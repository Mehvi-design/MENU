
MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bfc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e94  08008da8  08008da8  00009da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c3c  08009c3c  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c44  08009c44  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009c4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000007c  08009cc8  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08009cc8  0000b3cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fef  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c01  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00022ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f44  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9c2  00000000  00000000  00024f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fd4  00000000  00000000  0004f936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105adf  00000000  00000000  0006690a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c3e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  0016c42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00171a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008d90 	.word	0x08008d90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	08008d90 	.word	0x08008d90

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <drawPixel>:
extern uint8_t _xstart;
extern uint8_t _ystart;
extern uint8_t spi_ready;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
 8000522:	460b      	mov	r3, r1
 8000524:	80bb      	strh	r3, [r7, #4]
 8000526:	4613      	mov	r3, r2
 8000528:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	88b9      	ldrh	r1, [r7, #4]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fe6f 	bl	8002214 <ST7735_DrawPixel>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b085      	sub	sp, #20
 8000544:	af02      	add	r7, sp, #8
 8000546:	4604      	mov	r4, r0
 8000548:	4608      	mov	r0, r1
 800054a:	4611      	mov	r1, r2
 800054c:	461a      	mov	r2, r3
 800054e:	4623      	mov	r3, r4
 8000550:	80fb      	strh	r3, [r7, #6]
 8000552:	4603      	mov	r3, r0
 8000554:	80bb      	strh	r3, [r7, #4]
 8000556:	460b      	mov	r3, r1
 8000558:	807b      	strh	r3, [r7, #2]
 800055a:	4613      	mov	r3, r2
 800055c:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800055e:	88f8      	ldrh	r0, [r7, #6]
 8000560:	88b9      	ldrh	r1, [r7, #4]
 8000562:	887a      	ldrh	r2, [r7, #2]
 8000564:	883c      	ldrh	r4, [r7, #0]
 8000566:	8b3b      	ldrh	r3, [r7, #24]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	4623      	mov	r3, r4
 800056c:	f001 fffc 	bl	8002568 <ST7735_FillRectangle>
	while (!spi_ready ){};
 8000570:	bf00      	nop
 8000572:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <fillRect+0x44>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0fb      	beq.n	8000572 <fillRect+0x32>


}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	20000000 	.word	0x20000000

08000588 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
 8000592:	460b      	mov	r3, r1
 8000594:	80bb      	strh	r3, [r7, #4]
 8000596:	4613      	mov	r3, r2
 8000598:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800059a:	887a      	ldrh	r2, [r7, #2]
 800059c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffb7 	bl	8000518 <drawPixel>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b089      	sub	sp, #36	@ 0x24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4604      	mov	r4, r0
 80005ba:	4608      	mov	r0, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	461a      	mov	r2, r3
 80005c0:	4623      	mov	r3, r4
 80005c2:	80fb      	strh	r3, [r7, #6]
 80005c4:	4603      	mov	r3, r0
 80005c6:	80bb      	strh	r3, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
 80005cc:	4613      	mov	r3, r2
 80005ce:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80005d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	1acb      	subs	r3, r1, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	429a      	cmp	r2, r3
 80005f4:	bfcc      	ite	gt
 80005f6:	2301      	movgt	r3, #1
 80005f8:	2300      	movle	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80005fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	833b      	strh	r3, [r7, #24]
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	8b3b      	ldrh	r3, [r7, #24]
 8000610:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	82fb      	strh	r3, [r7, #22]
 8000616:	883b      	ldrh	r3, [r7, #0]
 8000618:	807b      	strh	r3, [r7, #2]
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800061e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000626:	429a      	cmp	r2, r3
 8000628:	dd0b      	ble.n	8000642 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	82bb      	strh	r3, [r7, #20]
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	8abb      	ldrh	r3, [r7, #20]
 8000634:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	827b      	strh	r3, [r7, #18]
 800063a:	883b      	ldrh	r3, [r7, #0]
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	8a7b      	ldrh	r3, [r7, #18]
 8000640:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000642:	887a      	ldrh	r2, [r7, #2]
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
 800064a:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800064c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000650:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	bfb8      	it	lt
 800065a:	425b      	neglt	r3, r3
 800065c:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800065e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000662:	0fda      	lsrs	r2, r3, #31
 8000664:	4413      	add	r3, r2
 8000666:	105b      	asrs	r3, r3, #1
 8000668:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800066a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800066e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000672:	429a      	cmp	r2, r3
 8000674:	da02      	bge.n	800067c <writeLine+0xca>
        ystep = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	83bb      	strh	r3, [r7, #28]
 800067a:	e031      	b.n	80006e0 <writeLine+0x12e>
    } else {
        ystep = -1;
 800067c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000680:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000682:	e02d      	b.n	80006e0 <writeLine+0x12e>
        if (steep) {
 8000684:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <writeLine+0xec>
            writePixel(y0, x0, color);
 800068c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800068e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff76 	bl	8000588 <writePixel>
 800069c:	e007      	b.n	80006ae <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800069e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff6d 	bl	8000588 <writePixel>
        }
        err -= dy;
 80006ae:	8bfa      	ldrh	r2, [r7, #30]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80006b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da09      	bge.n	80006d4 <writeLine+0x122>
            y0 += ystep;
 80006c0:	88ba      	ldrh	r2, [r7, #4]
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80006ca:	8bfa      	ldrh	r2, [r7, #30]
 80006cc:	8a3b      	ldrh	r3, [r7, #16]
 80006ce:	4413      	add	r3, r2
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80006d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	3301      	adds	r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	80fb      	strh	r3, [r7, #6]
 80006e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	ddcb      	ble.n	8000684 <writeLine+0xd2>
        }
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3724      	adds	r7, #36	@ 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}

080006f6 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af02      	add	r7, sp, #8
 80006fc:	4604      	mov	r4, r0
 80006fe:	4608      	mov	r0, r1
 8000700:	4611      	mov	r1, r2
 8000702:	461a      	mov	r2, r3
 8000704:	4623      	mov	r3, r4
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	4603      	mov	r3, r0
 800070a:	80bb      	strh	r3, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
 8000710:	4613      	mov	r3, r2
 8000712:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8000714:	88ba      	ldrh	r2, [r7, #4]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	4413      	add	r3, r2
 800071a:	b29b      	uxth	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b29b      	uxth	r3, r3
 8000720:	b21c      	sxth	r4, r3
 8000722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000726:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800072a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800072e:	883b      	ldrh	r3, [r7, #0]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4623      	mov	r3, r4
 8000734:	f7ff ff3d 	bl	80005b2 <writeLine>
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af02      	add	r7, sp, #8
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4603      	mov	r3, r0
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	4613      	mov	r3, r2
 800075c:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	4413      	add	r3, r2
 8000764:	b29b      	uxth	r3, r3
 8000766:	3b01      	subs	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	b21a      	sxth	r2, r3
 800076c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000770:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000774:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4623      	mov	r3, r4
 800077e:	f7ff ff18 	bl	80005b2 <writeLine>
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}

0800078a <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800078a:	b590      	push	{r4, r7, lr}
 800078c:	b087      	sub	sp, #28
 800078e:	af02      	add	r7, sp, #8
 8000790:	4604      	mov	r4, r0
 8000792:	4608      	mov	r0, r1
 8000794:	4611      	mov	r1, r2
 8000796:	461a      	mov	r2, r3
 8000798:	4623      	mov	r3, r4
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4603      	mov	r3, r0
 800079e:	80bb      	strh	r3, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
 80007a4:	4613      	mov	r3, r2
 80007a6:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80007a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d11a      	bne.n	80007ea <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80007b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dd05      	ble.n	80007cc <drawLine+0x42>
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	81bb      	strh	r3, [r7, #12]
 80007c4:	883b      	ldrh	r3, [r7, #0]
 80007c6:	80bb      	strh	r3, [r7, #4]
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80007cc:	883a      	ldrh	r2, [r7, #0]
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b21a      	sxth	r2, r3
 80007da:	8c3b      	ldrh	r3, [r7, #32]
 80007dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007e4:	f7ff ff87 	bl	80006f6 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80007e8:	e02d      	b.n	8000846 <drawLine+0xbc>
    } else if(y0 == y1){
 80007ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d11a      	bne.n	800082c <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80007f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dd05      	ble.n	800080e <drawLine+0x84>
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	81fb      	strh	r3, [r7, #14]
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800080e:	887a      	ldrh	r2, [r7, #2]
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	b29b      	uxth	r3, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	8c3b      	ldrh	r3, [r7, #32]
 800081e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000822:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000826:	f7ff ff8b 	bl	8000740 <drawFastHLine>
}
 800082a:	e00c      	b.n	8000846 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800082c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000830:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800083c:	8c3b      	ldrh	r3, [r7, #32]
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4623      	mov	r3, r4
 8000842:	f7ff feb6 	bl	80005b2 <writeLine>
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}

0800084e <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800084e:	b590      	push	{r4, r7, lr}
 8000850:	b087      	sub	sp, #28
 8000852:	af00      	add	r7, sp, #0
 8000854:	4604      	mov	r4, r0
 8000856:	4608      	mov	r0, r1
 8000858:	4611      	mov	r1, r2
 800085a:	461a      	mov	r2, r3
 800085c:	4623      	mov	r3, r4
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	4603      	mov	r3, r0
 8000862:	80bb      	strh	r3, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	807b      	strh	r3, [r7, #2]
 8000868:	4613      	mov	r3, r2
 800086a:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	f1c3 0301 	rsb	r3, r3, #1
 8000872:	b29b      	uxth	r3, r3
 8000874:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	461a      	mov	r2, r3
 800087e:	03d2      	lsls	r2, r2, #15
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000890:	88ba      	ldrh	r2, [r7, #4]
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4413      	add	r3, r2
 8000896:	b29b      	uxth	r3, r3
 8000898:	b219      	sxth	r1, r3
 800089a:	883a      	ldrh	r2, [r7, #0]
 800089c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe71 	bl	8000588 <writePixel>
    writePixel(x0  , y0-r, color);
 80008a6:	88ba      	ldrh	r2, [r7, #4]
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b219      	sxth	r1, r3
 80008b0:	883a      	ldrh	r2, [r7, #0]
 80008b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe66 	bl	8000588 <writePixel>
    writePixel(x0+r, y0  , color);
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	883a      	ldrh	r2, [r7, #0]
 80008c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe5b 	bl	8000588 <writePixel>
    writePixel(x0-r, y0  , color);
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b21b      	sxth	r3, r3
 80008dc:	883a      	ldrh	r2, [r7, #0]
 80008de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe50 	bl	8000588 <writePixel>

    while (x<y) {
 80008e8:	e091      	b.n	8000a0e <drawCircle+0x1c0>
        if (f >= 0) {
 80008ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0e      	blt.n	8000910 <drawCircle+0xc2>
            y--;
 80008f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80008fe:	8a7b      	ldrh	r3, [r7, #18]
 8000900:	3302      	adds	r3, #2
 8000902:	b29b      	uxth	r3, r3
 8000904:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000906:	8afa      	ldrh	r2, [r7, #22]
 8000908:	8a7b      	ldrh	r3, [r7, #18]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000910:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000914:	b29b      	uxth	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	3302      	adds	r3, #2
 8000920:	b29b      	uxth	r3, r3
 8000922:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000924:	8afa      	ldrh	r2, [r7, #22]
 8000926:	8abb      	ldrh	r3, [r7, #20]
 8000928:	4413      	add	r3, r2
 800092a:	b29b      	uxth	r3, r3
 800092c:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 800092e:	88fa      	ldrh	r2, [r7, #6]
 8000930:	8a3b      	ldrh	r3, [r7, #16]
 8000932:	4413      	add	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	b218      	sxth	r0, r3
 8000938:	88ba      	ldrh	r2, [r7, #4]
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	4413      	add	r3, r2
 800093e:	b29b      	uxth	r3, r3
 8000940:	b21b      	sxth	r3, r3
 8000942:	883a      	ldrh	r2, [r7, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff fe1f 	bl	8000588 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	8a3b      	ldrh	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b218      	sxth	r0, r3
 8000954:	88ba      	ldrh	r2, [r7, #4]
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	4413      	add	r3, r2
 800095a:	b29b      	uxth	r3, r3
 800095c:	b21b      	sxth	r3, r3
 800095e:	883a      	ldrh	r2, [r7, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f7ff fe11 	bl	8000588 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	8a3b      	ldrh	r3, [r7, #16]
 800096a:	4413      	add	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b218      	sxth	r0, r3
 8000970:	88ba      	ldrh	r2, [r7, #4]
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	883a      	ldrh	r2, [r7, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f7ff fe03 	bl	8000588 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	b218      	sxth	r0, r3
 800098c:	88ba      	ldrh	r2, [r7, #4]
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	b21b      	sxth	r3, r3
 8000996:	883a      	ldrh	r2, [r7, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f7ff fdf5 	bl	8000588 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 800099e:	88fa      	ldrh	r2, [r7, #6]
 80009a0:	89fb      	ldrh	r3, [r7, #14]
 80009a2:	4413      	add	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b218      	sxth	r0, r3
 80009a8:	88ba      	ldrh	r2, [r7, #4]
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	883a      	ldrh	r2, [r7, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f7ff fde7 	bl	8000588 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b218      	sxth	r0, r3
 80009c4:	88ba      	ldrh	r2, [r7, #4]
 80009c6:	8a3b      	ldrh	r3, [r7, #16]
 80009c8:	4413      	add	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	883a      	ldrh	r2, [r7, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fdd9 	bl	8000588 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b218      	sxth	r0, r3
 80009e0:	88ba      	ldrh	r2, [r7, #4]
 80009e2:	8a3b      	ldrh	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	883a      	ldrh	r2, [r7, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff fdcb 	bl	8000588 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80009f2:	88fa      	ldrh	r2, [r7, #6]
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b218      	sxth	r0, r3
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	8a3b      	ldrh	r3, [r7, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	883a      	ldrh	r2, [r7, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f7ff fdbd 	bl	8000588 <writePixel>
    while (x<y) {
 8000a0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	f6ff af67 	blt.w	80008ea <drawCircle+0x9c>
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}

08000a26 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8000a26:	b590      	push	{r4, r7, lr}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	461a      	mov	r2, r3
 8000a34:	4623      	mov	r3, r4
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	80bb      	strh	r3, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
 8000a40:	4613      	mov	r3, r2
 8000a42:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	f1c3 0301 	rsb	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	461a      	mov	r2, r3
 8000a56:	03d2      	lsls	r2, r2, #15
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000a68:	e0a5      	b.n	8000bb6 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000a6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0e      	blt.n	8000a90 <drawCircleHelper+0x6a>
            y--;
 8000a72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	3302      	adds	r3, #2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a86:	8afa      	ldrh	r2, [r7, #22]
 8000a88:	8a7b      	ldrh	r3, [r7, #18]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a9c:	8abb      	ldrh	r3, [r7, #20]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000aa4:	8afa      	ldrh	r2, [r7, #22]
 8000aa6:	8abb      	ldrh	r3, [r7, #20]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01b      	beq.n	8000af0 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	8a3b      	ldrh	r3, [r7, #16]
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b218      	sxth	r0, r3
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fd5a 	bl	8000588 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b218      	sxth	r0, r3
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	8a3b      	ldrh	r3, [r7, #16]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fd4c 	bl	8000588 <writePixel>
        }
        if (cornername & 0x2) {
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01b      	beq.n	8000b32 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000afa:	88fa      	ldrh	r2, [r7, #6]
 8000afc:	8a3b      	ldrh	r3, [r7, #16]
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b218      	sxth	r0, r3
 8000b04:	88ba      	ldrh	r2, [r7, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fd39 	bl	8000588 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b218      	sxth	r0, r3
 8000b20:	88ba      	ldrh	r2, [r7, #4]
 8000b22:	8a3b      	ldrh	r3, [r7, #16]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f7ff fd2b 	bl	8000588 <writePixel>
        }
        if (cornername & 0x8) {
 8000b32:	787b      	ldrb	r3, [r7, #1]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01b      	beq.n	8000b74 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	88ba      	ldrh	r2, [r7, #4]
 8000b48:	8a3b      	ldrh	r3, [r7, #16]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fd18 	bl	8000588 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000b58:	88fa      	ldrh	r2, [r7, #6]
 8000b5a:	8a3b      	ldrh	r3, [r7, #16]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b218      	sxth	r0, r3
 8000b62:	88ba      	ldrh	r2, [r7, #4]
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff fd0a 	bl	8000588 <writePixel>
        }
        if (cornername & 0x1) {
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b218      	sxth	r0, r3
 8000b88:	88ba      	ldrh	r2, [r7, #4]
 8000b8a:	8a3b      	ldrh	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff fcf7 	bl	8000588 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000b9a:	88fa      	ldrh	r2, [r7, #6]
 8000b9c:	8a3b      	ldrh	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b218      	sxth	r0, r3
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fce9 	bl	8000588 <writePixel>
    while (x<y) {
 8000bb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	f6ff af53 	blt.w	8000a6a <drawCircleHelper+0x44>
        }
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	4611      	mov	r1, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4623      	mov	r3, r4
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	4603      	mov	r3, r0
 8000be2:	80bb      	strh	r3, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	f1c3 0301 	rsb	r3, r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	03d2      	lsls	r2, r2, #15
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000c10:	8a3b      	ldrh	r3, [r7, #16]
 8000c12:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000c18:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8000c24:	e095      	b.n	8000d52 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0e      	blt.n	8000c4c <fillCircleHelper+0x7e>
            y--;
 8000c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000c42:	8afa      	ldrh	r2, [r7, #22]
 8000c44:	8a7b      	ldrh	r3, [r7, #18]
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000c4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000c58:	8abb      	ldrh	r3, [r7, #20]
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000c60:	8afa      	ldrh	r2, [r7, #22]
 8000c62:	8abb      	ldrh	r3, [r7, #20]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000c6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	db31      	blt.n	8000cda <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000c76:	787b      	ldrb	r3, [r7, #1]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d013      	beq.n	8000ca8 <fillCircleHelper+0xda>
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	8a3b      	ldrh	r3, [r7, #16]
 8000c84:	4413      	add	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b218      	sxth	r0, r3
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b219      	sxth	r1, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ca4:	f7ff fd27 	bl	80006f6 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d013      	beq.n	8000cda <fillCircleHelper+0x10c>
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	8a3b      	ldrh	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b218      	sxth	r0, r3
 8000cbc:	88ba      	ldrh	r2, [r7, #4]
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b219      	sxth	r1, r3
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cd6:	f7ff fd0e 	bl	80006f6 <drawFastVLine>
        }
        if(y != py) {
 8000cda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d033      	beq.n	8000d4e <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <fillCircleHelper+0x14a>
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b218      	sxth	r0, r3
 8000cfa:	88ba      	ldrh	r2, [r7, #4]
 8000cfc:	89bb      	ldrh	r3, [r7, #12]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b219      	sxth	r1, r3
 8000d04:	89bb      	ldrh	r3, [r7, #12]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d14:	f7ff fcef 	bl	80006f6 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d013      	beq.n	8000d4a <fillCircleHelper+0x17c>
 8000d22:	88fa      	ldrh	r2, [r7, #6]
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b218      	sxth	r0, r3
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b219      	sxth	r1, r3
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d46:	f7ff fcd6 	bl	80006f6 <drawFastVLine>
            py = y;
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000d4e:	8a3b      	ldrh	r3, [r7, #16]
 8000d50:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000d52:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	f6ff af63 	blt.w	8000c26 <fillCircleHelper+0x58>
    }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}

08000d6a <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af02      	add	r7, sp, #8
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	4623      	mov	r3, r4
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	80bb      	strh	r3, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000d88:	88ba      	ldrh	r2, [r7, #4]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b219      	sxth	r1, r3
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da4:	f7ff fca7 	bl	80006f6 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000da8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000db0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000db4:	883b      	ldrh	r3, [r7, #0]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f7ff ff06 	bl	8000bce <fillCircleHelper>
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}

08000dca <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000dca:	b590      	push	{r4, r7, lr}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4623      	mov	r3, r4
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4603      	mov	r3, r0
 8000dde:	80bb      	strh	r3, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000de8:	8b3b      	ldrh	r3, [r7, #24]
 8000dea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	f7ff fca3 	bl	8000740 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000dfa:	88ba      	ldrh	r2, [r7, #4]
 8000dfc:	883b      	ldrh	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b219      	sxth	r1, r3
 8000e08:	8b3b      	ldrh	r3, [r7, #24]
 8000e0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e12:	f7ff fc95 	bl	8000740 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000e16:	8b3b      	ldrh	r3, [r7, #24]
 8000e18:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f7ff fc67 	bl	80006f6 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b218      	sxth	r0, r3
 8000e36:	8b3b      	ldrh	r3, [r7, #24]
 8000e38:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e40:	f7ff fc59 	bl	80006f6 <drawFastVLine>
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	807b      	strh	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000e6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	bfa8      	it	ge
 8000e76:	4613      	movge	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	0fda      	lsrs	r2, r3, #31
 8000e7c:	4413      	add	r3, r2
 8000e7e:	105b      	asrs	r3, r3, #1
 8000e80:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dd01      	ble.n	8000e92 <drawRoundRect+0x46>
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000e92:	88fa      	ldrh	r2, [r7, #6]
 8000e94:	8c3b      	ldrh	r3, [r7, #32]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b218      	sxth	r0, r3
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000eb0:	f7ff fc46 	bl	8000740 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	8c3b      	ldrh	r3, [r7, #32]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b218      	sxth	r0, r3
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b219      	sxth	r1, r3
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	8c3b      	ldrh	r3, [r7, #32]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000edc:	f7ff fc30 	bl	8000740 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	8c3b      	ldrh	r3, [r7, #32]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b219      	sxth	r1, r3
 8000eea:	883a      	ldrh	r2, [r7, #0]
 8000eec:	8c3b      	ldrh	r3, [r7, #32]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000efe:	f7ff fbfa 	bl	80006f6 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4413      	add	r3, r2
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b218      	sxth	r0, r3
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	8c3b      	ldrh	r3, [r7, #32]
 8000f14:	4413      	add	r3, r2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b219      	sxth	r1, r3
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	8c3b      	ldrh	r3, [r7, #32]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f2a:	f7ff fbe4 	bl	80006f6 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	8c3b      	ldrh	r3, [r7, #32]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b218      	sxth	r0, r3
 8000f38:	88ba      	ldrh	r2, [r7, #4]
 8000f3a:	8c3b      	ldrh	r3, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b219      	sxth	r1, r3
 8000f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f7ff fd6b 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	4413      	add	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	8c3b      	ldrh	r3, [r7, #32]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b218      	sxth	r0, r3
 8000f64:	88ba      	ldrh	r2, [r7, #4]
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b219      	sxth	r1, r3
 8000f6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	f7ff fd55 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	4413      	add	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	8c3b      	ldrh	r3, [r7, #32]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b218      	sxth	r0, r3
 8000f90:	88ba      	ldrh	r2, [r7, #4]
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	8c3b      	ldrh	r3, [r7, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b219      	sxth	r1, r3
 8000fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2304      	movs	r3, #4
 8000fae:	f7ff fd3a 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b218      	sxth	r0, r3
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	8c3b      	ldrh	r3, [r7, #32]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b219      	sxth	r1, r3
 8000fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2308      	movs	r3, #8
 8000fda:	f7ff fd24 	bl	8000a26 <drawCircleHelper>
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b087      	sub	sp, #28
 8000fea:	af02      	add	r7, sp, #8
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001004:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001008:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800100c:	4293      	cmp	r3, r2
 800100e:	bfa8      	it	ge
 8001010:	4613      	movge	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	0fda      	lsrs	r2, r3, #31
 8001016:	4413      	add	r3, r2
 8001018:	105b      	asrs	r3, r3, #1
 800101a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800101c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	429a      	cmp	r2, r3
 8001026:	dd01      	ble.n	800102c <fillRoundRect+0x46>
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	8c3b      	ldrh	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	b218      	sxth	r0, r3
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	8c3b      	ldrh	r3, [r7, #32]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21a      	sxth	r2, r3
 8001044:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001048:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800104c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f7ff fa75 	bl	8000540 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4413      	add	r3, r2
 800105c:	b29a      	uxth	r2, r3
 800105e:	8c3b      	ldrh	r3, [r7, #32]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	b218      	sxth	r0, r3
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	8c3b      	ldrh	r3, [r7, #32]
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	b219      	sxth	r1, r3
 8001074:	883a      	ldrh	r2, [r7, #0]
 8001076:	8c3b      	ldrh	r3, [r7, #32]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21b      	sxth	r3, r3
 8001086:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800108a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	4622      	mov	r2, r4
 8001094:	f7ff fd9b 	bl	8000bce <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	8c3b      	ldrh	r3, [r7, #32]
 800109c:	4413      	add	r3, r2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b218      	sxth	r0, r3
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	8c3b      	ldrh	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b219      	sxth	r1, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	8c3b      	ldrh	r3, [r7, #32]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21b      	sxth	r3, r3
 80010be:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80010c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	4622      	mov	r2, r4
 80010cc:	f7ff fd7f 	bl	8000bce <fillCircleHelper>
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}

080010d8 <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	4611      	mov	r1, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	4603      	mov	r3, r0
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 80010f6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80010fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001106:	8c3b      	ldrh	r3, [r7, #32]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f7ff fb3d 	bl	800078a <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8001110:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8001114:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001118:	f9b7 1000 	ldrsh.w	r1, [r7]
 800111c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4623      	mov	r3, r4
 8001126:	f7ff fb30 	bl	800078a <drawLine>
    drawLine(x2, y2, x0, y0, color);
 800112a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800112e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001132:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001136:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff fb23 	bl	800078a <drawLine>
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b08f      	sub	sp, #60	@ 0x3c
 8001150:	af00      	add	r7, sp, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800116a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001172:	429a      	cmp	r2, r3
 8001174:	dd0b      	ble.n	800118e <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800117a:	883b      	ldrh	r3, [r7, #0]
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001180:	803b      	strh	r3, [r7, #0]
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800118c:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800118e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001192:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001196:	429a      	cmp	r2, r3
 8001198:	dd0f      	ble.n	80011ba <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800119a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800119e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80011a0:	883b      	ldrh	r3, [r7, #0]
 80011a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80011a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011a8:	803b      	strh	r3, [r7, #0]
 80011aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80011ae:	843b      	strh	r3, [r7, #32]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80011ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dd0b      	ble.n	80011de <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	83fb      	strh	r3, [r7, #30]
 80011ca:	883b      	ldrh	r3, [r7, #0]
 80011cc:	80bb      	strh	r3, [r7, #4]
 80011ce:	8bfb      	ldrh	r3, [r7, #30]
 80011d0:	803b      	strh	r3, [r7, #0]
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	83bb      	strh	r3, [r7, #28]
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	8bbb      	ldrh	r3, [r7, #28]
 80011dc:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80011de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d137      	bne.n	800125a <fillTriangle+0x10e>
        a = b = x0;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80011ee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 80011f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80011fa:	429a      	cmp	r2, r3
 80011fc:	da02      	bge.n	8001204 <fillTriangle+0xb8>
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001202:	e007      	b.n	8001214 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8001204:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001208:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800120c:	429a      	cmp	r2, r3
 800120e:	dd01      	ble.n	8001214 <fillTriangle+0xc8>
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 8001214:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800121c:	429a      	cmp	r2, r3
 800121e:	da03      	bge.n	8001228 <fillTriangle+0xdc>
 8001220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001224:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001226:	e008      	b.n	800123a <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8001228:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800122c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001230:	429a      	cmp	r2, r3
 8001232:	dd02      	ble.n	800123a <fillTriangle+0xee>
 8001234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001238:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y0, b-a+1, color);
 800123a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800123c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800124c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001250:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001254:	f7ff fa74 	bl	8000740 <drawFastHLine>
        return;
 8001258:	e0d4      	b.n	8001404 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001264:	883a      	ldrh	r2, [r7, #0]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800126e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29b      	uxth	r3, r3
 8001278:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800127a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001286:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001292:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80012a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d102      	bne.n	80012b8 <fillTriangle+0x16c>
 80012b2:	883b      	ldrh	r3, [r7, #0]
 80012b4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80012b6:	e003      	b.n	80012c0 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++) {
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80012c4:	e03e      	b.n	8001344 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 80012c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 80012da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 80012ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012f4:	4413      	add	r3, r2
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80012f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012fe:	4413      	add	r3, r2
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001302:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8001306:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800130a:	429a      	cmp	r2, r3
 800130c:	dd05      	ble.n	800131a <fillTriangle+0x1ce>
 800130e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001314:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 800131a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800131c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800132c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001330:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001334:	f7ff fa04 	bl	8000740 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8001338:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800133c:	b29b      	uxth	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001344:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001348:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800134c:	429a      	cmp	r2, r3
 800134e:	ddba      	ble.n	80012c6 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8001350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001354:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001358:	f9b7 2000 	ldrsh.w	r2, [r7]
 800135c:	1a8a      	subs	r2, r1, r2
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001368:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800136c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001370:	1a8a      	subs	r2, r1, r2
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++) {
 8001378:	e03e      	b.n	80013f8 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800137a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800137e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001380:	fb92 f3f3 	sdiv	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	4413      	add	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 800138e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001394:	fb92 f3f3 	sdiv	r3, r2, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 80013a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013a8:	4413      	add	r3, r2
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80013ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013b2:	4413      	add	r3, r2
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80013b6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80013ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80013be:	429a      	cmp	r2, r3
 80013c0:	dd05      	ble.n	80013ce <fillTriangle+0x282>
 80013c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 80013ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013e0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80013e4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80013e8:	f7ff f9aa 	bl	8000740 <drawFastHLine>
    for(; y<=y2; y++) {
 80013ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80013f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80013fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001400:	429a      	cmp	r2, r3
 8001402:	ddba      	ble.n	800137a <fillTriangle+0x22e>
    }
}
 8001404:	373c      	adds	r7, #60	@ 0x3c
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
	...

0800140c <fillScreen>:

void fillScreen(uint16_t color) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <fillScreen+0x2c>)
 8001418:	f9b3 2000 	ldrsh.w	r2, [r3]
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <fillScreen+0x30>)
 800141e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	460b      	mov	r3, r1
 8001428:	2100      	movs	r1, #0
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff f888 	bl	8000540 <fillRect>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000098 	.word	0x20000098
 800143c:	2000009a 	.word	0x2000009a

08001440 <testLines>:



void testLines(uint16_t color)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 800144a:	4b7c      	ldr	r3, [pc, #496]	@ (800163c <testLines+0x1fc>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	617b      	str	r3, [r7, #20]
                  h = _height;
 8001452:	4b7b      	ldr	r3, [pc, #492]	@ (8001640 <testLines+0x200>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ffd6 	bl	800140c <fillScreen>

    x1 = y1 = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	3b01      	subs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e00f      	b.n	8001494 <testLines+0x54>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	b218      	sxth	r0, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	b219      	sxth	r1, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	b21a      	sxth	r2, r3
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	b21c      	sxth	r4, r3
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	f7ff f97e 	bl	800078a <drawLine>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3306      	adds	r3, #6
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbeb      	blt.n	8001474 <testLines+0x34>
    x2    = w - 1;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3b01      	subs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	e00f      	b.n	80014c8 <testLines+0x88>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	b218      	sxth	r0, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	b219      	sxth	r1, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	b21c      	sxth	r4, r3
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	f7ff f964 	bl	800078a <drawLine>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	3306      	adds	r3, #6
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbeb      	blt.n	80014a8 <testLines+0x68>

    fillScreen(BLACK);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ff9b 	bl	800140c <fillScreen>

    x1    = w - 1;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e00f      	b.n	800150c <testLines+0xcc>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	b218      	sxth	r0, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	b21c      	sxth	r4, r3
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4623      	mov	r3, r4
 8001502:	f7ff f942 	bl	800078a <drawLine>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3306      	adds	r3, #6
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbeb      	blt.n	80014ec <testLines+0xac>
    x2    = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e00f      	b.n	800153e <testLines+0xfe>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	b218      	sxth	r0, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	b219      	sxth	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	b21a      	sxth	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	b21c      	sxth	r4, r3
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4623      	mov	r3, r4
 8001534:	f7ff f929 	bl	800078a <drawLine>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3306      	adds	r3, #6
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbeb      	blt.n	800151e <testLines+0xde>

    fillScreen(BLACK);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ff60 	bl	800140c <fillScreen>

    x1    = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	3b01      	subs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e00f      	b.n	8001580 <testLines+0x140>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	b218      	sxth	r0, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	b219      	sxth	r1, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	b21a      	sxth	r2, r3
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	b21c      	sxth	r4, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	f7ff f908 	bl	800078a <drawLine>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3306      	adds	r3, #6
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbeb      	blt.n	8001560 <testLines+0x120>
    x2    = w - 1;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3b01      	subs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e00f      	b.n	80015b4 <testLines+0x174>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	b218      	sxth	r0, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	b219      	sxth	r1, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	b21c      	sxth	r4, r3
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	f7ff f8ee 	bl	800078a <drawLine>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3306      	adds	r3, #6
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbeb      	blt.n	8001594 <testLines+0x154>

    fillScreen(BLACK);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff25 	bl	800140c <fillScreen>

    x1    = w - 1;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e00f      	b.n	80015f8 <testLines+0x1b8>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	b218      	sxth	r0, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	b219      	sxth	r1, r3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	b21c      	sxth	r4, r3
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4623      	mov	r3, r4
 80015ee:	f7ff f8cc 	bl	800078a <drawLine>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3306      	adds	r3, #6
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbeb      	blt.n	80015d8 <testLines+0x198>
    x2    = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	e00f      	b.n	800162a <testLines+0x1ea>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	b218      	sxth	r0, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	b219      	sxth	r1, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	b21a      	sxth	r2, r3
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	b21c      	sxth	r4, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4623      	mov	r3, r4
 8001620:	f7ff f8b3 	bl	800078a <drawLine>
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	3306      	adds	r3, #6
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbeb      	blt.n	800160a <testLines+0x1ca>

}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	@ 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	20000098 	.word	0x20000098
 8001640:	2000009a 	.word	0x2000009a

08001644 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	80fb      	strh	r3, [r7, #6]
 8001650:	4613      	mov	r3, r2
 8001652:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <testFastLines+0x78>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <testFastLines+0x7c>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fed1 	bl	800140c <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	e00a      	b.n	8001686 <testFastLines+0x42>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	b219      	sxth	r1, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	b21a      	sxth	r2, r3
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff f860 	bl	8000740 <drawFastHLine>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3305      	adds	r3, #5
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf0      	blt.n	8001670 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e00a      	b.n	80016aa <testFastLines+0x66>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	b218      	sxth	r0, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	b21a      	sxth	r2, r3
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	2100      	movs	r1, #0
 80016a0:	f7ff f829 	bl	80006f6 <drawFastVLine>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3305      	adds	r3, #5
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf0      	blt.n	8001694 <testFastLines+0x50>
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000098 	.word	0x20000098
 80016c0:	2000009a 	.word	0x2000009a

080016c4 <testRects>:

void testRects(uint16_t color)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b08b      	sub	sp, #44	@ 0x2c
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <testRects+0x9c>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	0fda      	lsrs	r2, r3, #31
 80016d6:	4413      	add	r3, r2
 80016d8:	105b      	asrs	r3, r3, #1
 80016da:	b21b      	sxth	r3, r3
 80016dc:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <testRects+0xa0>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	0fda      	lsrs	r2, r3, #31
 80016e6:	4413      	add	r3, r2
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe8c 	bl	800140c <fillScreen>
    n     = min(_width, _height);
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <testRects+0xa0>)
 80016f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <testRects+0x9c>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4293      	cmp	r3, r2
 8001702:	bfa8      	it	ge
 8001704:	4613      	movge	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e01e      	b.n	800174e <testRects+0x8a>
        i2 = i / 2;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	0fda      	lsrs	r2, r3, #31
 8001714:	4413      	add	r3, r2
 8001716:	105b      	asrs	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	b29b      	uxth	r3, r3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	b218      	sxth	r0, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	b29b      	uxth	r3, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	b219      	sxth	r1, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b21a      	sxth	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	b21c      	sxth	r4, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4623      	mov	r3, r4
 8001744:	f7ff fb41 	bl	8000dca <drawRect>
    for (i = 2; i < n; i += 6) {
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3306      	adds	r3, #6
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbdc      	blt.n	8001710 <testRects+0x4c>
    }

}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3724      	adds	r7, #36	@ 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000098 	.word	0x20000098
 8001764:	2000009a 	.word	0x2000009a

08001768 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	@ 0x2c
 800176c:	af02      	add	r7, sp, #8
 800176e:	4603      	mov	r3, r0
 8001770:	460a      	mov	r2, r1
 8001772:	80fb      	strh	r3, [r7, #6]
 8001774:	4613      	mov	r3, r2
 8001776:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <testFilledRects+0xd4>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	0fda      	lsrs	r2, r3, #31
 8001780:	4413      	add	r3, r2
 8001782:	105b      	asrs	r3, r3, #1
 8001784:	b21b      	sxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <testFilledRects+0xd8>)
 800178c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001790:	0fda      	lsrs	r2, r3, #31
 8001792:	4413      	add	r3, r2
 8001794:	105b      	asrs	r3, r3, #1
 8001796:	b21b      	sxth	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fe35 	bl	800140c <fillScreen>
    n = min(_width, _height);
 80017a2:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <testFilledRects+0xd8>)
 80017a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <testFilledRects+0xd4>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	bfa8      	it	ge
 80017b2:	4613      	movge	r3, r2
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	e035      	b.n	800182a <testFilledRects+0xc2>
        i2    = i / 2;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	0fda      	lsrs	r2, r3, #31
 80017c2:	4413      	add	r3, r2
 80017c4:	105b      	asrs	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b219      	sxth	r1, r3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	b21c      	sxth	r4, r3
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	f7fe fea5 	bl	8000540 <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b218      	sxth	r0, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b29b      	uxth	r3, r3
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	b219      	sxth	r1, r3
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	b21a      	sxth	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	b21c      	sxth	r4, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4623      	mov	r3, r4
 8001820:	f7ff fad3 	bl	8000dca <drawRect>
    for (i = n; i > 0; i -= 6) {
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3b06      	subs	r3, #6
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dcc6      	bgt.n	80017be <testFilledRects+0x56>
    }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000098 	.word	0x20000098
 8001840:	2000009a 	.word	0x2000009a

08001844 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <testFilledCircles+0x74>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <testFilledCircles+0x78>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fdce 	bl	800140c <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e017      	b.n	80018a6 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e00c      	b.n	8001896 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	b218      	sxth	r0, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	b219      	sxth	r1, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	b21a      	sxth	r2, r3
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	f7ff fa6e 	bl	8000d6a <fillCircle>
        for (y = radius; y < h; y += r2) {
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbee      	blt.n	800187c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbe3      	blt.n	8001876 <testFilledCircles+0x32>
        }
    }

}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000098 	.word	0x20000098
 80018bc:	2000009a 	.word	0x2000009a

080018c0 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <testCircles+0x7c>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	461a      	mov	r2, r3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4413      	add	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <testCircles+0x80>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	461a      	mov	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e017      	b.n	8001928 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	e00c      	b.n	8001918 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	b218      	sxth	r0, r3
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	b219      	sxth	r1, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	b21a      	sxth	r2, r3
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	f7fe ff9f 	bl	800084e <drawCircle>
        for (y = 0; y < h; y += r2) {
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbee      	blt.n	80018fe <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbe3      	blt.n	80018f8 <testCircles+0x38>
        }
    }

}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000098 	.word	0x20000098
 8001940:	2000009a 	.word	0x2000009a

08001944 <testTriangles>:

void testTriangles()
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800194a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <testTriangles+0xc0>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	0fda      	lsrs	r2, r3, #31
 8001952:	4413      	add	r3, r2
 8001954:	105b      	asrs	r3, r3, #1
 8001956:	b21b      	sxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <testTriangles+0xc4>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	4413      	add	r3, r2
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	b21b      	sxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fd4c 	bl	800140c <fillScreen>
    n     = min(cx, cy);
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4293      	cmp	r3, r2
 800197a:	bfa8      	it	ge
 800197c:	4613      	movge	r3, r2
 800197e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e035      	b.n	80019f2 <testTriangles+0xae>
        drawTriangle(
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
        drawTriangle(
 8001996:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
        drawTriangle(
 80019a4:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
        drawTriangle(
 80019b2:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
        drawTriangle(
 80019c0:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	b291      	uxth	r1, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	b292      	uxth	r2, r2
 80019ca:	440a      	add	r2, r1
 80019cc:	b292      	uxth	r2, r2
        drawTriangle(
 80019ce:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	10c9      	asrs	r1, r1, #3
 80019d4:	b289      	uxth	r1, r1
        drawTriangle(
 80019d6:	f001 011f 	and.w	r1, r1, #31
 80019da:	b289      	uxth	r1, r1
 80019dc:	9102      	str	r1, [sp, #8]
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4633      	mov	r3, r6
 80019e4:	462a      	mov	r2, r5
 80019e6:	4621      	mov	r1, r4
 80019e8:	f7ff fb76 	bl	80010d8 <drawTriangle>
    for (i = 0; i < n; i += 5) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3305      	adds	r3, #5
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbc5      	blt.n	8001986 <testTriangles+0x42>
    }

}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a04:	20000098 	.word	0x20000098
 8001a08:	2000009a 	.word	0x2000009a

08001a0c <testFilledTriangles>:

void testFilledTriangles() {
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8001a12:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <testFilledTriangles+0x158>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	0fda      	lsrs	r2, r3, #31
 8001a1a:	4413      	add	r3, r2
 8001a1c:	105b      	asrs	r3, r3, #1
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <testFilledTriangles+0x15c>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	4413      	add	r3, r2
 8001a2e:	105b      	asrs	r3, r3, #1
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fce8 	bl	800140c <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bfa8      	it	ge
 8001a44:	4613      	movge	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e083      	b.n	8001b52 <testFilledTriangles+0x146>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	b21c      	sxth	r4, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b21d      	sxth	r5, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21e      	sxth	r6, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	fa0f fc83 	sxth.w	ip, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	b291      	uxth	r1, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	440a      	add	r2, r1
 8001a92:	b292      	uxth	r2, r2
 8001a94:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	b209      	sxth	r1, r1
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	b209      	sxth	r1, r1
 8001a9e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8001aa2:	b208      	sxth	r0, r1
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	10c9      	asrs	r1, r1, #3
 8001aa8:	b209      	sxth	r1, r1
 8001aaa:	f001 011f 	and.w	r1, r1, #31
 8001aae:	b209      	sxth	r1, r1
 8001ab0:	4301      	orrs	r1, r0
 8001ab2:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ab4:	b289      	uxth	r1, r1
 8001ab6:	9102      	str	r1, [sp, #8]
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4663      	mov	r3, ip
 8001abe:	4632      	mov	r2, r6
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fb42 	bl	800114c <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	b21c      	sxth	r4, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b21d      	sxth	r5, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21e      	sxth	r6, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	fa0f fc83 	sxth.w	ip, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	b218      	sxth	r0, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4303      	orrs	r3, r0
 8001b36:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	9101      	str	r1, [sp, #4]
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	4663      	mov	r3, ip
 8001b42:	4632      	mov	r2, r6
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fac6 	bl	80010d8 <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3b05      	subs	r3, #5
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	f73f af78 	bgt.w	8001a4a <testFilledTriangles+0x3e>
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b64:	20000098 	.word	0x20000098
 8001b68:	2000009a 	.word	0x2000009a

08001b6c <testRoundRects>:

void testRoundRects() {
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <testRoundRects+0xd4>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	0fda      	lsrs	r2, r3, #31
 8001b7a:	4413      	add	r3, r2
 8001b7c:	105b      	asrs	r3, r3, #1
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001b84:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <testRoundRects+0xd8>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	0fda      	lsrs	r2, r3, #31
 8001b8c:	4413      	add	r3, r2
 8001b8e:	105b      	asrs	r3, r3, #1
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fc38 	bl	800140c <fillScreen>
    w     = min(_width, _height);
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <testRoundRects+0xd8>)
 8001b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <testRoundRects+0xd4>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bfa8      	it	ge
 8001bac:	4613      	movge	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	60fb      	str	r3, [r7, #12]
    red = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8001bb6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e032      	b.n	8001c2e <testRoundRects+0xc2>
        i2 = i / 2;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	0fda      	lsrs	r2, r3, #31
 8001bcc:	4413      	add	r3, r2
 8001bce:	105b      	asrs	r3, r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
        red += step;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b218      	sxth	r0, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b219      	sxth	r1, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	b21d      	sxth	r5, r3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da00      	bge.n	8001c06 <testRoundRects+0x9a>
 8001c04:	3307      	adds	r3, #7
 8001c06:	10db      	asrs	r3, r3, #3
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c16:	f023 0307 	bic.w	r3, r3, #7
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f7ff f912 	bl	8000e4c <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbc8      	blt.n	8001bc8 <testRoundRects+0x5c>
    }

}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c40:	20000098 	.word	0x20000098
 8001c44:	2000009a 	.word	0x2000009a

08001c48 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001c4e:	4b36      	ldr	r3, [pc, #216]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	0fda      	lsrs	r2, r3, #31
 8001c56:	4413      	add	r3, r2
 8001c58:	105b      	asrs	r3, r3, #1
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	0fda      	lsrs	r2, r3, #31
 8001c68:	4413      	add	r3, r2
 8001c6a:	105b      	asrs	r3, r3, #1
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fbca 	bl	800140c <fillScreen>
    green = 256;
 8001c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7c:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001c80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c84:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfa8      	it	ge
 8001c8e:	4613      	movge	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c9c:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001ca0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	bfa8      	it	ge
 8001cae:	4613      	movge	r3, r2
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e030      	b.n	8001d18 <testFilledRoundRects+0xd0>
        i2 = i / 2;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	0fda      	lsrs	r2, r3, #31
 8001cba:	4413      	add	r3, r2
 8001cbc:	105b      	asrs	r3, r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
        green -= step;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b218      	sxth	r0, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b219      	sxth	r1, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	b21c      	sxth	r4, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	b21d      	sxth	r5, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da00      	bge.n	8001cf4 <testFilledRoundRects+0xac>
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	10db      	asrs	r3, r3, #3
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8001d04:	b292      	uxth	r2, r2
 8001d06:	9201      	str	r2, [sp, #4]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	f7ff f96a 	bl	8000fe6 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3b06      	subs	r3, #6
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b14      	cmp	r3, #20
 8001d1c:	dccb      	bgt.n	8001cb6 <testFilledRoundRects+0x6e>
    }

}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdb0      	pop	{r4, r5, r7, pc}
 8001d28:	20000098 	.word	0x20000098
 8001d2c:	2000009a 	.word	0x2000009a

08001d30 <testFillScreen>:
void testFillScreen()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fb69 	bl	800140c <fillScreen>
    fillScreen(RED);
 8001d3a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001d3e:	f7ff fb65 	bl	800140c <fillScreen>
    fillScreen(GREEN);
 8001d42:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001d46:	f7ff fb61 	bl	800140c <fillScreen>
    fillScreen(BLUE);
 8001d4a:	201f      	movs	r0, #31
 8001d4c:	f7ff fb5e 	bl	800140c <fillScreen>
    fillScreen(BLACK);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fb5b 	bl	800140c <fillScreen>
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <testAll>:

void testAll (void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
	testFillScreen();
 8001d5e:	f7ff ffe7 	bl	8001d30 <testFillScreen>
	testLines(CYAN);
 8001d62:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001d66:	f7ff fb6b 	bl	8001440 <testLines>
	testFastLines(RED, BLUE);
 8001d6a:	211f      	movs	r1, #31
 8001d6c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001d70:	f7ff fc68 	bl	8001644 <testFastLines>
	testRects(GREEN);
 8001d74:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001d78:	f7ff fca4 	bl	80016c4 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001d7c:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001d80:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001d84:	f7ff fcf0 	bl	8001768 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001d88:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f7ff fd59 	bl	8001844 <testFilledCircles>
	testCircles(10, WHITE);
 8001d92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d96:	200a      	movs	r0, #10
 8001d98:	f7ff fd92 	bl	80018c0 <testCircles>
	testTriangles();
 8001d9c:	f7ff fdd2 	bl	8001944 <testTriangles>
	testFilledTriangles();
 8001da0:	f7ff fe34 	bl	8001a0c <testFilledTriangles>
	testRoundRects();
 8001da4:	f7ff fee2 	bl	8001b6c <testRoundRects>
	testFilledRoundRects();
 8001da8:	f7ff ff4e 	bl	8001c48 <testFilledRoundRects>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_SPI_ErrorCallback>:
//	         spi_ready = 1;  // if you're using a flagc
//	         //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
//	     }
// }

 void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d11c      	bne.n	8001dfe <HAL_SPI_ErrorCallback+0x4e>
         // Clean up DMA state on error
         if (dma_buffer != NULL) {
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_SPI_ErrorCallback+0x32>
             free(dma_buffer);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 fe83 	bl	8008adc <free>
             dma_buffer = NULL;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_SPI_ErrorCallback+0x60>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
         }
         ST7735_Unselect();
 8001de2:	f000 f87d 	bl	8001ee0 <ST7735_Unselect>
         spi_ready = 1;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_SPI_ErrorCallback+0x64>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
         dma_active = 0;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_SPI_ErrorCallback+0x68>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

         // Optional: Reset SPI peripheral if needed
         HAL_SPI_DeInit(&ST7735_SPI_PORT);
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001df4:	f003 ff73 	bl	8005cde <HAL_SPI_DeInit>
         HAL_SPI_Init(&ST7735_SPI_PORT);
 8001df8:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001dfa:	f003 fecd 	bl	8005b98 <HAL_SPI_Init>
     }
 }
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000134 	.word	0x20000134
 8001e0c:	200000a4 	.word	0x200000a4
 8001e10:	200000a8 	.word	0x200000a8
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200000a1 	.word	0x200000a1

08001e1c <HAL_SPI_TxCpltCallback>:

 void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_SPI_TxCpltCallback+0x4c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d116      	bne.n	8001e5e <HAL_SPI_TxCpltCallback+0x42>
         // Free the previous DMA buffer if it exists
         if (dma_buffer != NULL) {
 8001e30:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_SPI_TxCpltCallback+0x32>
             free(dma_buffer);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 fe4d 	bl	8008adc <free>
             dma_buffer = NULL;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_SPI_TxCpltCallback+0x54>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
         }

         ST7735_Unselect();
 8001e4e:	f000 f847 	bl	8001ee0 <ST7735_Unselect>
         spi_ready = 1;      // SPI is now ready
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_SPI_TxCpltCallback+0x58>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
         dma_active = 0;     // DMA is no longer active
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_SPI_TxCpltCallback+0x5c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
     }
 }
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000134 	.word	0x20000134
 8001e6c:	200000a4 	.word	0x200000a4
 8001e70:	200000a8 	.word	0x200000a8
 8001e74:	20000000 	.word	0x20000000
 8001e78:	200000a1 	.word	0x200000a1

08001e7c <ST7735_WaitForDMA>:
//          dma_busy = 0;
//          // Optionally trigger next transfer here
//      }
//  }

 void ST7735_WaitForDMA(void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
     uint32_t timeout = 1000;  // Reasonable timeout
 8001e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e86:	607b      	str	r3, [r7, #4]
     while(dma_active && timeout--) {
 8001e88:	e000      	b.n	8001e8c <ST7735_WaitForDMA+0x10>
         __NOP();  // Wait or yield to RTOS if you're using one
 8001e8a:	bf00      	nop
     while(dma_active && timeout--) {
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <ST7735_WaitForDMA+0x44>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <ST7735_WaitForDMA+0x24>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f4      	bne.n	8001e8a <ST7735_WaitForDMA+0xe>
     }
     if (timeout == 0) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <ST7735_WaitForDMA+0x36>
         // Handle timeout error
         dma_active = 0;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <ST7735_WaitForDMA+0x44>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
         spi_ready = 1;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <ST7735_WaitForDMA+0x48>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
     }
 }
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200000a1 	.word	0x200000a1
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <ST7735_Select>:


void ST7735_Select()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);//to select the LCD and start the communication CS=0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ed2:	4802      	ldr	r0, [pc, #8]	@ (8001edc <ST7735_Select+0x14>)
 8001ed4:	f002 fab2 	bl	800443c <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	48000c00 	.word	0x48000c00

08001ee0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);//to deselect the LCD set CS=1
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eea:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <ST7735_Unselect+0x14>)
 8001eec:	f002 faa6 	bl	800443c <HAL_GPIO_WritePin>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	48000c00 	.word	0x48000c00

08001ef8 <ST7735_Reset>:

void ST7735_Reset()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);//first reset =0
 8001efc:	2200      	movs	r2, #0
 8001efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f02:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <ST7735_Reset+0x28>)
 8001f04:	f002 fa9a 	bl	800443c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f08:	2005      	movs	r0, #5
 8001f0a:	f001 fbd5 	bl	80036b8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);//reset=1
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <ST7735_Reset+0x28>)
 8001f16:	f002 fa91 	bl	800443c <HAL_GPIO_WritePin>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	48000c00 	.word	0x48000c00

08001f24 <ST7735_WriteCommand>:
//    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);//to send data DC=1
//    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,HAL_MAX_DELAY);
//	//HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
//
//}
void ST7735_WriteCommand(uint8_t cmd) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8001f2e:	f7ff ffa5 	bl	8001e7c <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f38:	4806      	ldr	r0, [pc, #24]	@ (8001f54 <ST7735_WriteCommand+0x30>)
 8001f3a:	f002 fa7f 	bl	800443c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 8001f3e:	1df9      	adds	r1, r7, #7
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	2201      	movs	r2, #1
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <ST7735_WriteCommand+0x34>)
 8001f48:	f003 fef1 	bl	8005d2e <HAL_SPI_Transmit>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	48001400 	.word	0x48001400
 8001f58:	20000134 	.word	0x20000134

08001f5c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8001f66:	f7ff ff89 	bl	8001e7c <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f70:	4807      	ldr	r0, [pc, #28]	@ (8001f90 <ST7735_WriteData+0x34>)
 8001f72:	f002 fa63 	bl	800443c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <ST7735_WriteData+0x38>)
 8001f82:	f003 fed4 	bl	8005d2e <HAL_SPI_Transmit>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	48001400 	.word	0x48001400
 8001f94:	20000134 	.word	0x20000134

08001f98 <DisplayInit>:

void DisplayInit(const uint8_t *addr)//the pointer that points to the series of commands which has the list of commands,arguments total, arguments,optional delay
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;//the number of command is stored in numCommand and the pointer is incremented
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 8001faa:	e034      	b.n	8002016 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;//cmd stores the command and pointer is updated
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);//the command is sent via SPI_DMA
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffb3 	bl	8001f24 <ST7735_WriteCommand>

        numArgs = *addr++;//the pointer stores the number of arguments and increments
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;//if the delay is calculated by taking AND of number of argument and delay
 8001fc8:	7abb      	ldrb	r3, [r7, #10]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;//if delay is same the num argument and the invert of DELAY AND will give zero
 8001fd2:	7abb      	ldrb	r3, [r7, #10]
 8001fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {//if it is more then 1 write the arguments
 8001fda:	7abb      	ldrb	r3, [r7, #10]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);//send the buffer and buffer's size
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffb9 	bl	8001f5c <ST7735_WriteData>
            addr += numArgs;//adder pointer is added by numArgs
 8001fea:	7abb      	ldrb	r3, [r7, #10]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001ff2:	89bb      	ldrh	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <DisplayInit+0x7e>
            ms = *addr++;//the pointer is pointed in ms then incremented
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;//if the ms is 25 update it to 500
 8002002:	89bb      	ldrh	r3, [r7, #12]
 8002004:	2bff      	cmp	r3, #255	@ 0xff
 8002006:	d102      	bne.n	800200e <DisplayInit+0x76>
 8002008:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800200c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800200e:	89bb      	ldrh	r3, [r7, #12]
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fb51 	bl	80036b8 <HAL_Delay>
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	73fa      	strb	r2, [r7, #15]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1c5      	bne.n	8001fac <DisplayInit+0x14>
        }
    }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	4603      	mov	r3, r0
 8002040:	71bb      	strb	r3, [r7, #6]
 8002042:	460b      	mov	r3, r1
 8002044:	717b      	strb	r3, [r7, #5]
 8002046:	4613      	mov	r3, r2
 8002048:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);//column address
 800204a:	202a      	movs	r0, #42	@ 0x2a
 800204c:	f7ff ff6a 	bl	8001f24 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002050:	2300      	movs	r3, #0
 8002052:	733b      	strb	r3, [r7, #12]
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <ST7735_SetAddressWindow+0x88>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4413      	add	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	737b      	strb	r3, [r7, #13]
 8002060:	2300      	movs	r3, #0
 8002062:	73bb      	strb	r3, [r7, #14]
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <ST7735_SetAddressWindow+0x88>)
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	797b      	ldrb	r3, [r7, #5]
 800206a:	4413      	add	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	2104      	movs	r1, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff70 	bl	8001f5c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);// row address
 800207c:	202b      	movs	r0, #43	@ 0x2b
 800207e:	f7ff ff51 	bl	8001f24 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <ST7735_SetAddressWindow+0x8c>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	4413      	add	r3, r2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <ST7735_SetAddressWindow+0x8c>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2104      	movs	r1, #4
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5b 	bl	8001f5c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80020a6:	202c      	movs	r0, #44	@ 0x2c
 80020a8:	f7ff ff3c 	bl	8001f24 <ST7735_WriteCommand>
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	2000009f 	.word	0x2000009f
 80020b8:	200000a0 	.word	0x200000a0

080020bc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80020c6:	f7ff feff 	bl	8001ec8 <ST7735_Select>
    ST7735_Reset();
 80020ca:	f7ff ff15 	bl	8001ef8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80020ce:	480c      	ldr	r0, [pc, #48]	@ (8002100 <ST7735_Init+0x44>)
 80020d0:	f7ff ff62 	bl	8001f98 <DisplayInit>
    DisplayInit(init_cmds2);
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <ST7735_Init+0x48>)
 80020d6:	f7ff ff5f 	bl	8001f98 <DisplayInit>
    DisplayInit(init_cmds3);
 80020da:	480b      	ldr	r0, [pc, #44]	@ (8002108 <ST7735_Init+0x4c>)
 80020dc:	f7ff ff5c 	bl	8001f98 <DisplayInit>
//    The color order (RGB vs BGR).
#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <ST7735_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <ST7735_Init+0x54>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f810 	bl	8002114 <ST7735_SetRotation>
    ST7735_Unselect();
 80020f4:	f7ff fef4 	bl	8001ee0 <ST7735_Unselect>

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08008e24 	.word	0x08008e24
 8002104:	08008e5c 	.word	0x08008e5c
 8002108:	08008e6c 	.word	0x08008e6c
 800210c:	2000009d 	.word	0x2000009d
 8002110:	2000009e 	.word	0x2000009e

08002114 <ST7735_SetRotation>:
//
//2: upside-down portrait (rotated 180°)
//
//3: landscape (rotated 270°)
void ST7735_SetRotation(uint8_t m)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <ST7735_SetRotation+0xe4>)
 800212c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800212e:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <ST7735_SetRotation+0xe4>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d84e      	bhi.n	80021d4 <ST7735_SetRotation+0xc0>
 8002136:	a201      	add	r2, pc, #4	@ (adr r2, 800213c <ST7735_SetRotation+0x28>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800216f 	.word	0x0800216f
 8002144:	08002191 	.word	0x08002191
 8002148:	080021b3 	.word	0x080021b3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;//selecting the right madctl bit
 800214c:	23c0      	movs	r3, #192	@ 0xc0
 800214e:	73fb      	strb	r3, [r7, #15]
      //ST7735_MADCTL_MX → mirror X (flip left-right)
//      ST7735_MADCTL_MY → mirror Y (flip top-bottom)
//      ST7735_MADCTL_MV → swap X and Y (transpose image axes)
//      ST7735_MADCTL_BGR / RGB → color order (Blue-Green-Red or Red-Green-Blue)
      _height = ST7735_HEIGHT;
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <ST7735_SetRotation+0xe8>)
 8002152:	22a0      	movs	r2, #160	@ 0xa0
 8002154:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <ST7735_SetRotation+0xec>)
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <ST7735_SetRotation+0xf0>)
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <ST7735_SetRotation+0xf4>)
 8002162:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <ST7735_SetRotation+0xf8>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <ST7735_SetRotation+0xfc>)
 800216a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800216c:	e032      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800216e:	23a0      	movs	r3, #160	@ 0xa0
 8002170:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8002172:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <ST7735_SetRotation+0xec>)
 8002174:	22a0      	movs	r2, #160	@ 0xa0
 8002176:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002178:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <ST7735_SetRotation+0xe8>)
 800217a:	2280      	movs	r2, #128	@ 0x80
 800217c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <ST7735_SetRotation+0xf0>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <ST7735_SetRotation+0xfc>)
 8002184:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <ST7735_SetRotation+0xf8>)
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <ST7735_SetRotation+0xf4>)
 800218c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800218e:	e021      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <ST7735_SetRotation+0xe8>)
 8002196:	22a0      	movs	r2, #160	@ 0xa0
 8002198:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800219a:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <ST7735_SetRotation+0xec>)
 800219c:	2280      	movs	r2, #128	@ 0x80
 800219e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80021a0:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <ST7735_SetRotation+0xf0>)
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <ST7735_SetRotation+0xf4>)
 80021a6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <ST7735_SetRotation+0xf8>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <ST7735_SetRotation+0xfc>)
 80021ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021b0:	e010      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80021b2:	2360      	movs	r3, #96	@ 0x60
 80021b4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80021b6:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <ST7735_SetRotation+0xec>)
 80021b8:	22a0      	movs	r2, #160	@ 0xa0
 80021ba:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <ST7735_SetRotation+0xe8>)
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <ST7735_SetRotation+0xf0>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <ST7735_SetRotation+0xfc>)
 80021c8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <ST7735_SetRotation+0xf8>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <ST7735_SetRotation+0xf4>)
 80021d0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021d2:	bf00      	nop
  }
  ST7735_Select();
 80021d4:	f7ff fe78 	bl	8001ec8 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80021d8:	2036      	movs	r0, #54	@ 0x36
 80021da:	f7ff fea3 	bl	8001f24 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80021de:	f107 030f 	add.w	r3, r7, #15
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff feb9 	bl	8001f5c <ST7735_WriteData>
  ST7735_Unselect();
 80021ea:	f7ff fe79 	bl	8001ee0 <ST7735_Unselect>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000009c 	.word	0x2000009c
 80021fc:	2000009a 	.word	0x2000009a
 8002200:	20000098 	.word	0x20000098
 8002204:	2000009d 	.word	0x2000009d
 8002208:	2000009f 	.word	0x2000009f
 800220c:	2000009e 	.word	0x2000009e
 8002210:	200000a0 	.word	0x200000a0

08002214 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	460b      	mov	r3, r1
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <ST7735_DrawPixel+0x74>)
 800222a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800222e:	4293      	cmp	r3, r2
 8002230:	da26      	bge.n	8002280 <ST7735_DrawPixel+0x6c>
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <ST7735_DrawPixel+0x78>)
 8002236:	f9b2 2000 	ldrsh.w	r2, [r2]
 800223a:	4293      	cmp	r3, r2
 800223c:	da20      	bge.n	8002280 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800223e:	f7ff fe43 	bl	8001ec8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	b2d9      	uxtb	r1, r3
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f7ff fee7 	bl	800202c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	733b      	strb	r3, [r7, #12]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2102      	movs	r1, #2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe71 	bl	8001f5c <ST7735_WriteData>

    ST7735_Unselect();
 800227a:	f7ff fe31 	bl	8001ee0 <ST7735_Unselect>
 800227e:	e000      	b.n	8002282 <ST7735_DrawPixel+0x6e>
        return;
 8002280:	bf00      	nop
}
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000098 	.word	0x20000098
 800228c:	2000009a 	.word	0x2000009a

08002290 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002290:	b082      	sub	sp, #8
 8002292:	b590      	push	{r4, r7, lr}
 8002294:	b089      	sub	sp, #36	@ 0x24
 8002296:	af00      	add	r7, sp, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
 800229e:	460b      	mov	r3, r1
 80022a0:	80bb      	strh	r3, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	b2d8      	uxtb	r0, r3
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	b2d9      	uxtb	r1, r3
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80022b6:	4413      	add	r3, r2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b2dc      	uxtb	r4, r3
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022c6:	4413      	add	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4622      	mov	r2, r4
 80022d0:	f7ff feac 	bl	800202c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e043      	b.n	8002362 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80022da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	3b20      	subs	r3, #32
 80022e0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	440b      	add	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	e029      	b.n	8002350 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800230c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	743b      	strb	r3, [r7, #16]
 8002316:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002318:	b2db      	uxtb	r3, r3
 800231a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe1a 	bl	8001f5c <ST7735_WriteData>
 8002328:	e00f      	b.n	800234a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800232a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	733b      	strb	r3, [r7, #12]
 8002336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800233a:	b2db      	uxtb	r3, r3
 800233c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2102      	movs	r1, #2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fe09 	bl	8001f5c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002354:	461a      	mov	r2, r3
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4293      	cmp	r3, r2
 800235a:	d3cf      	bcc.n	80022fc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002366:	461a      	mov	r2, r3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4293      	cmp	r3, r2
 800236c:	d3b5      	bcc.n	80022da <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3724      	adds	r7, #36	@ 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800237a:	b002      	add	sp, #8
 800237c:	4770      	bx	lr
	...

08002380 <ST7735_WriteString>:
//        str++;
//    }
//
//    ST7735_Unselect();
//}
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002380:	b082      	sub	sp, #8
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af04      	add	r7, sp, #16
 8002388:	603a      	str	r2, [r7, #0]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	4603      	mov	r3, r0
 800238e:	80fb      	strh	r3, [r7, #6]
 8002390:	460b      	mov	r3, r1
 8002392:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002394:	f7ff fd98 	bl	8001ec8 <ST7735_Select>

    while (*str) {
 8002398:	e04a      	b.n	8002430 <ST7735_WriteString+0xb0>
        if (*str == '\r') {
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b0d      	cmp	r3, #13
 80023a0:	d103      	bne.n	80023aa <ST7735_WriteString+0x2a>
            str++;  // skip carriage return
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	603b      	str	r3, [r7, #0]
            continue;
 80023a8:	e042      	b.n	8002430 <ST7735_WriteString+0xb0>
        }

        if (*str == '\n') {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b0a      	cmp	r3, #10
 80023b0:	d112      	bne.n	80023d8 <ST7735_WriteString+0x58>
            x = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023b6:	7d7b      	ldrb	r3, [r7, #21]
 80023b8:	461a      	mov	r2, r3
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80023c0:	88bb      	ldrh	r3, [r7, #4]
 80023c2:	7d7a      	ldrb	r2, [r7, #21]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <ST7735_WriteString+0xd4>)
 80023c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	da34      	bge.n	800243a <ST7735_WriteString+0xba>
                break;  // no more space on screen
            }
            str++;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
            continue;
 80023d6:	e02b      	b.n	8002430 <ST7735_WriteString+0xb0>
        }

        if (x + font.width >= _width) {
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	7d3a      	ldrb	r2, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <ST7735_WriteString+0xd8>)
 80023e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	db0e      	blt.n	8002406 <ST7735_WriteString+0x86>
            x = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023ec:	7d7b      	ldrb	r3, [r7, #21]
 80023ee:	461a      	mov	r2, r3
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	7d7a      	ldrb	r2, [r7, #21]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <ST7735_WriteString+0xd4>)
 80023fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002402:	4293      	cmp	r3, r2
 8002404:	da1b      	bge.n	800243e <ST7735_WriteString+0xbe>
                break;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	88b9      	ldrh	r1, [r7, #4]
 800240c:	88f8      	ldrh	r0, [r7, #6]
 800240e:	8c3b      	ldrh	r3, [r7, #32]
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	8bbb      	ldrh	r3, [r7, #28]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f7ff ff38 	bl	8002290 <ST7735_WriteChar>
        x += font.width;
 8002420:	7d3b      	ldrb	r3, [r7, #20]
 8002422:	461a      	mov	r2, r3
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4413      	add	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
        str++;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	603b      	str	r3, [r7, #0]
    while (*str) {
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1b0      	bne.n	800239a <ST7735_WriteString+0x1a>
 8002438:	e002      	b.n	8002440 <ST7735_WriteString+0xc0>
                break;  // no more space on screen
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <ST7735_WriteString+0xc0>
                break;
 800243e:	bf00      	nop
    }

    ST7735_Unselect();
 8002440:	f7ff fd4e 	bl	8001ee0 <ST7735_Unselect>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800244e:	b002      	add	sp, #8
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000009a 	.word	0x2000009a
 8002458:	20000098 	.word	0x20000098

0800245c <ST7735_WriteStringWithSeparators>:
void ST7735_WriteStringWithSeparators(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800245c:	b082      	sub	sp, #8
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af04      	add	r7, sp, #16
 8002464:	603a      	str	r2, [r7, #0]
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	4603      	mov	r3, r0
 800246a:	80fb      	strh	r3, [r7, #6]
 800246c:	460b      	mov	r3, r1
 800246e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();//X COLUMN,Y ROWS
 8002470:	f7ff fd2a 	bl	8001ec8 <ST7735_Select>
//11 pixels wide(column) 18 pixels height(row)
    while (*str) {
 8002474:	e061      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        if (*str == '\r') {
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b0d      	cmp	r3, #13
 800247c:	d103      	bne.n	8002486 <ST7735_WriteStringWithSeparators+0x2a>
            str++;  // skip carriage return
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	603b      	str	r3, [r7, #0]
            continue;
 8002484:	e059      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        }
        if (*str == '\n') {
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b0a      	cmp	r3, #10
 800248c:	d112      	bne.n	80024b4 <ST7735_WriteStringWithSeparators+0x58>
            x = 20;
 800248e:	2314      	movs	r3, #20
 8002490:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002492:	7d7b      	ldrb	r3, [r7, #21]
 8002494:	461a      	mov	r2, r3
 8002496:	88bb      	ldrh	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 800249c:	88bb      	ldrh	r3, [r7, #4]
 800249e:	7d7a      	ldrb	r2, [r7, #21]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <ST7735_WriteStringWithSeparators+0x104>)
 80024a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024a8:	4293      	cmp	r3, r2
 80024aa:	da4b      	bge.n	8002544 <ST7735_WriteStringWithSeparators+0xe8>
                break;
            }
            str++;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	603b      	str	r3, [r7, #0]
            continue;
 80024b2:	e042      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        }
        if (*str == '/') {  // treat / as newline
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80024ba:	d112      	bne.n	80024e2 <ST7735_WriteStringWithSeparators+0x86>
            x = 20;
 80024bc:	2314      	movs	r3, #20
 80024be:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80024c0:	7d7b      	ldrb	r3, [r7, #21]
 80024c2:	461a      	mov	r2, r3
 80024c4:	88bb      	ldrh	r3, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	7d7a      	ldrb	r2, [r7, #21]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <ST7735_WriteStringWithSeparators+0x104>)
 80024d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	da36      	bge.n	8002548 <ST7735_WriteStringWithSeparators+0xec>
                break;
            }
            str++;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	603b      	str	r3, [r7, #0]
            continue;
 80024e0:	e02b      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        }

        if (x + font.width >= _width) {
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	7d3a      	ldrb	r2, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <ST7735_WriteStringWithSeparators+0x108>)
 80024ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	db0e      	blt.n	8002510 <ST7735_WriteStringWithSeparators+0xb4>
            x = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	80fb      	strh	r3, [r7, #6]
            y += (font.height);
 80024f6:	7d7b      	ldrb	r3, [r7, #21]
 80024f8:	461a      	mov	r2, r3
 80024fa:	88bb      	ldrh	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 8002500:	88bb      	ldrh	r3, [r7, #4]
 8002502:	7d7a      	ldrb	r2, [r7, #21]
 8002504:	4413      	add	r3, r2
 8002506:	4a16      	ldr	r2, [pc, #88]	@ (8002560 <ST7735_WriteStringWithSeparators+0x104>)
 8002508:	f9b2 2000 	ldrsh.w	r2, [r2]
 800250c:	4293      	cmp	r3, r2
 800250e:	da1d      	bge.n	800254c <ST7735_WriteStringWithSeparators+0xf0>
                break;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	88b9      	ldrh	r1, [r7, #4]
 8002516:	88f8      	ldrh	r0, [r7, #6]
 8002518:	8c3b      	ldrh	r3, [r7, #32]
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	8bbb      	ldrh	r3, [r7, #28]
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f7ff feb3 	bl	8002290 <ST7735_WriteChar>
        x += font.width;
 800252a:	7d3b      	ldrb	r3, [r7, #20]
 800252c:	461a      	mov	r2, r3
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4413      	add	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
        str++;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	603b      	str	r3, [r7, #0]
    while (*str) {
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d199      	bne.n	8002476 <ST7735_WriteStringWithSeparators+0x1a>
 8002542:	e004      	b.n	800254e <ST7735_WriteStringWithSeparators+0xf2>
                break;
 8002544:	bf00      	nop
 8002546:	e002      	b.n	800254e <ST7735_WriteStringWithSeparators+0xf2>
                break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <ST7735_WriteStringWithSeparators+0xf2>
                break;
 800254c:	bf00      	nop
    }

    ST7735_Unselect();
 800254e:	f7ff fcc7 	bl	8001ee0 <ST7735_Unselect>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800255c:	b002      	add	sp, #8
 800255e:	4770      	bx	lr
 8002560:	2000009a 	.word	0x2000009a
 8002564:	20000098 	.word	0x20000098

08002568 <ST7735_FillRectangle>:

// Assume you have ST7735 width and height defined globally
// #define ST7735_WIDTH 128
// #define ST7735_HEIGHT 160
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	4603      	mov	r3, r0
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]
 8002582:	4613      	mov	r3, r2
 8002584:	803b      	strh	r3, [r7, #0]
    // Boundary checks
    if ((x >= _width) || (y >= _height)) return;
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4a54      	ldr	r2, [pc, #336]	@ (80026dc <ST7735_FillRectangle+0x174>)
 800258a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800258e:	4293      	cmp	r3, r2
 8002590:	f280 80a0 	bge.w	80026d4 <ST7735_FillRectangle+0x16c>
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <ST7735_FillRectangle+0x178>)
 8002598:	f9b2 2000 	ldrsh.w	r2, [r2]
 800259c:	4293      	cmp	r3, r2
 800259e:	f280 8099 	bge.w	80026d4 <ST7735_FillRectangle+0x16c>
    if ((x + w - 1) >= _width) w = _width - x;
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a4c      	ldr	r2, [pc, #304]	@ (80026dc <ST7735_FillRectangle+0x174>)
 80025aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	dd06      	ble.n	80025c0 <ST7735_FillRectangle+0x58>
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <ST7735_FillRectangle+0x174>)
 80025b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height) h = _height - y;
 80025c0:	88ba      	ldrh	r2, [r7, #4]
 80025c2:	883b      	ldrh	r3, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a46      	ldr	r2, [pc, #280]	@ (80026e0 <ST7735_FillRectangle+0x178>)
 80025c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	dd06      	ble.n	80025de <ST7735_FillRectangle+0x76>
 80025d0:	4b43      	ldr	r3, [pc, #268]	@ (80026e0 <ST7735_FillRectangle+0x178>)
 80025d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	88bb      	ldrh	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	803b      	strh	r3, [r7, #0]

    // Wait for any previous DMA to complete
    ST7735_WaitForDMA();
 80025de:	f7ff fc4d 	bl	8001e7c <ST7735_WaitForDMA>

    ST7735_Select();
 80025e2:	f7ff fc71 	bl	8001ec8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	b2d8      	uxtb	r0, r3
 80025ea:	88bb      	ldrh	r3, [r7, #4]
 80025ec:	b2d9      	uxtb	r1, r3
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b2dc      	uxtb	r4, r3
 80025fe:	88bb      	ldrh	r3, [r7, #4]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	883b      	ldrh	r3, [r7, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4622      	mov	r2, r4
 8002610:	f7ff fd0c 	bl	800202c <ST7735_SetAddressWindow>

    uint32_t size = w * h;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	883a      	ldrh	r2, [r7, #0]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	613b      	str	r3, [r7, #16]
    uint8_t *buffer = malloc(size * 2);  // 2 bytes per pixel (RGB565)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f006 fa52 	bl	8008acc <malloc>
 8002628:	4603      	mov	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]

    if (buffer == NULL) {
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <ST7735_FillRectangle+0xd0>
        ST7735_Unselect();
 8002632:	f7ff fc55 	bl	8001ee0 <ST7735_Unselect>
        return;
 8002636:	e04e      	b.n	80026d6 <ST7735_FillRectangle+0x16e>
    }

    // Fill buffer with color
    uint8_t high = color >> 8;
 8002638:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29b      	uxth	r3, r3
 800263e:	72fb      	strb	r3, [r7, #11]
    uint8_t low = color & 0xFF;
 8002640:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002642:	72bb      	strb	r3, [r7, #10]
    for (uint32_t i = 0; i < size; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e00f      	b.n	800266a <ST7735_FillRectangle+0x102>
        buffer[i * 2] = high;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4413      	add	r3, r2
 8002652:	7afa      	ldrb	r2, [r7, #11]
 8002654:	701a      	strb	r2, [r3, #0]
        buffer[i * 2 + 1] = low;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3301      	adds	r3, #1
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	7aba      	ldrb	r2, [r7, #10]
 8002662:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3eb      	bcc.n	800264a <ST7735_FillRectangle+0xe2>
    }


    // Set DMA state before starting transfer
    spi_ready = 0;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <ST7735_FillRectangle+0x17c>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
    dma_active = 1;
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <ST7735_FillRectangle+0x180>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
    dma_buffer = buffer;
 800267e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ec <ST7735_FillRectangle+0x184>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6013      	str	r3, [r2, #0]
    dma_buffer_size = size * 2;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <ST7735_FillRectangle+0x188>)
 800268a:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002692:	4818      	ldr	r0, [pc, #96]	@ (80026f4 <ST7735_FillRectangle+0x18c>)
 8002694:	f001 fed2 	bl	800443c <HAL_GPIO_WritePin>

    if (HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buffer, size * 2) != HAL_OK) {
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	b29b      	uxth	r3, r3
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	4814      	ldr	r0, [pc, #80]	@ (80026f8 <ST7735_FillRectangle+0x190>)
 80026a6:	f003 fcb9 	bl	800601c <HAL_SPI_Transmit_DMA>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <ST7735_FillRectangle+0x16e>
        // If DMA start fails, clean up
        free(buffer);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f006 fa13 	bl	8008adc <free>
        dma_buffer = NULL;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <ST7735_FillRectangle+0x184>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
        dma_buffer_size = 0;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <ST7735_FillRectangle+0x188>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
        spi_ready = 1;
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <ST7735_FillRectangle+0x17c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
        dma_active = 0;
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <ST7735_FillRectangle+0x180>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
        ST7735_Unselect();
 80026ce:	f7ff fc07 	bl	8001ee0 <ST7735_Unselect>
 80026d2:	e000      	b.n	80026d6 <ST7735_FillRectangle+0x16e>
    if ((x >= _width) || (y >= _height)) return;
 80026d4:	bf00      	nop
    }
}
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	20000098 	.word	0x20000098
 80026e0:	2000009a 	.word	0x2000009a
 80026e4:	20000000 	.word	0x20000000
 80026e8:	200000a1 	.word	0x200000a1
 80026ec:	200000a4 	.word	0x200000a4
 80026f0:	200000a8 	.word	0x200000a8
 80026f4:	48001400 	.word	0x48001400
 80026f8:	20000134 	.word	0x20000134

080026fc <draw_bulb_on>:
volatile uint8_t rx_ready = 0;
char last_char;
uint8_t rx_char;
uint8_t brightness = 50;  // Default 50%
// Draw a simple light bulb ON
void draw_bulb_on(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af02      	add	r7, sp, #8
	fillScreen(BLACK);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe82 	bl	800140c <fillScreen>
    fillCircle(64, 40, 20, YELLOW);         // Bulb head
 8002708:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800270c:	2214      	movs	r2, #20
 800270e:	2128      	movs	r1, #40	@ 0x28
 8002710:	2040      	movs	r0, #64	@ 0x40
 8002712:	f7fe fb2a 	bl	8000d6a <fillCircle>
    ST7735_FillRectangle(60, 60, 8, 15, GRAY);          // Bulb base
 8002716:	f248 4310 	movw	r3, #33808	@ 0x8410
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	230f      	movs	r3, #15
 800271e:	2208      	movs	r2, #8
 8002720:	213c      	movs	r1, #60	@ 0x3c
 8002722:	203c      	movs	r0, #60	@ 0x3c
 8002724:	f7ff ff20 	bl	8002568 <ST7735_FillRectangle>
    drawLine(64, 75, 64, 100, ORANGE);      // Glow line
 8002728:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2364      	movs	r3, #100	@ 0x64
 8002730:	2240      	movs	r2, #64	@ 0x40
 8002732:	214b      	movs	r1, #75	@ 0x4b
 8002734:	2040      	movs	r0, #64	@ 0x40
 8002736:	f7fe f828 	bl	800078a <drawLine>
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <draw_bulb_off>:
void draw_bulb_off(void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af02      	add	r7, sp, #8
    fillScreen(BLACK);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fe60 	bl	800140c <fillScreen>
    fillCircle(64, 40, 20, GRAY);         // Bulb head
 800274c:	f248 4310 	movw	r3, #33808	@ 0x8410
 8002750:	2214      	movs	r2, #20
 8002752:	2128      	movs	r1, #40	@ 0x28
 8002754:	2040      	movs	r0, #64	@ 0x40
 8002756:	f7fe fb08 	bl	8000d6a <fillCircle>
    ST7735_FillRectangle(60, 60, 8, 15, WHITE);          // Bulb base
 800275a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	230f      	movs	r3, #15
 8002762:	2208      	movs	r2, #8
 8002764:	213c      	movs	r1, #60	@ 0x3c
 8002766:	203c      	movs	r0, #60	@ 0x3c
 8002768:	f7ff fefe 	bl	8002568 <ST7735_FillRectangle>
    drawLine(64, 75, 64, 100, ORANGE);      // Glow line
 800276c:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2364      	movs	r3, #100	@ 0x64
 8002774:	2240      	movs	r2, #64	@ 0x40
 8002776:	214b      	movs	r1, #75	@ 0x4b
 8002778:	2040      	movs	r0, #64	@ 0x40
 800277a:	f7fe f806 	bl	800078a <drawLine>
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <process_command>:

void process_command(char *cmd)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b098      	sub	sp, #96	@ 0x60
 8002788:	af04      	add	r7, sp, #16
 800278a:	6078      	str	r0, [r7, #4]

    if (strstr(cmd, "LED ON"))
 800278c:	4950      	ldr	r1, [pc, #320]	@ (80028d0 <process_command+0x14c>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 fa62 	bl	8008c58 <strstr>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d021      	beq.n	80027de <process_command+0x5a>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // LED ON
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027a0:	484c      	ldr	r0, [pc, #304]	@ (80028d4 <process_command+0x150>)
 80027a2:	f001 fe4b 	bl	800443c <HAL_GPIO_WritePin>
        char msg[] = "LED turned ON\r\n";
 80027a6:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <process_command+0x154>)
 80027a8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80027ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        fillScreen(BLACK);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fe2a 	bl	800140c <fillScreen>
        draw_bulb_on();
 80027b8:	f7ff ffa0 	bl	80026fc <draw_bulb_on>
        ST7735_WriteString(5, 90,msg, Font_11x18, YELLOW, BLACK);
 80027bc:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <process_command+0x158>)
 80027be:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80027c2:	2200      	movs	r2, #0
 80027c4:	9202      	str	r2, [sp, #8]
 80027c6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80027ca:	9201      	str	r2, [sp, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	9200      	str	r2, [sp, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	460a      	mov	r2, r1
 80027d4:	215a      	movs	r1, #90	@ 0x5a
 80027d6:	2005      	movs	r0, #5
 80027d8:	f7ff fdd2 	bl	8002380 <ST7735_WriteString>
        char msg[] = "Invalid/Command";
        //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        fillScreen(BLACK);
        ST7735_WriteStringWithSeparators(10, 90, msg, Font_11x18, RED, BLACK);
    }
}
 80027dc:	e073      	b.n	80028c6 <process_command+0x142>
    else if (strstr(cmd, "LED OFF"))
 80027de:	4940      	ldr	r1, [pc, #256]	@ (80028e0 <process_command+0x15c>)
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f006 fa39 	bl	8008c58 <strstr>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <process_command+0xb0>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // LED OFF
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027f2:	4838      	ldr	r0, [pc, #224]	@ (80028d4 <process_command+0x150>)
 80027f4:	f001 fe22 	bl	800443c <HAL_GPIO_WritePin>
        char msg[] = "LED turned OFF\r\n";
 80027f8:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <process_command+0x160>)
 80027fa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80027fe:	461d      	mov	r5, r3
 8002800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	7023      	strb	r3, [r4, #0]
        fillScreen(BLACK);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe fdff 	bl	800140c <fillScreen>
        draw_bulb_off();
 800280e:	f7ff ff97 	bl	8002740 <draw_bulb_off>
        ST7735_WriteString(5, 90,msg, Font_11x18,CYAN, BLACK);
 8002812:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <process_command+0x158>)
 8002814:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002818:	2200      	movs	r2, #0
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002820:	9201      	str	r2, [sp, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	9200      	str	r2, [sp, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	460a      	mov	r2, r1
 800282a:	215a      	movs	r1, #90	@ 0x5a
 800282c:	2005      	movs	r0, #5
 800282e:	f7ff fda7 	bl	8002380 <ST7735_WriteString>
}
 8002832:	e048      	b.n	80028c6 <process_command+0x142>
    else if (strstr(cmd, "LED TOGGLE"))
 8002834:	492c      	ldr	r1, [pc, #176]	@ (80028e8 <process_command+0x164>)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f006 fa0e 	bl	8008c58 <strstr>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01e      	beq.n	8002880 <process_command+0xfc>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002842:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002846:	4823      	ldr	r0, [pc, #140]	@ (80028d4 <process_command+0x150>)
 8002848:	f001 fe10 	bl	800446c <HAL_GPIO_TogglePin>
        char msg[] = "LED Toggled\r\n";
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <process_command+0x168>)
 800284e:	f107 041c 	add.w	r4, r7, #28
 8002852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002854:	c407      	stmia	r4!, {r0, r1, r2}
 8002856:	8023      	strh	r3, [r4, #0]
        fillScreen(BLACK);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fdd7 	bl	800140c <fillScreen>
        ST7735_WriteString(5, 90,msg, Font_11x18, GREEN, BLACK);
 800285e:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <process_command+0x158>)
 8002860:	f107 011c 	add.w	r1, r7, #28
 8002864:	2200      	movs	r2, #0
 8002866:	9202      	str	r2, [sp, #8]
 8002868:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	460a      	mov	r2, r1
 8002876:	215a      	movs	r1, #90	@ 0x5a
 8002878:	2005      	movs	r0, #5
 800287a:	f7ff fd81 	bl	8002380 <ST7735_WriteString>
}
 800287e:	e022      	b.n	80028c6 <process_command+0x142>
    else if (strstr(cmd, "TEST LCD"))
 8002880:	491b      	ldr	r1, [pc, #108]	@ (80028f0 <process_command+0x16c>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f006 f9e8 	bl	8008c58 <strstr>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <process_command+0x110>
    	   testAll();
 800288e:	f7ff fa64 	bl	8001d5a <testAll>
}
 8002892:	e018      	b.n	80028c6 <process_command+0x142>
        char msg[] = "Invalid/Command";
 8002894:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <process_command+0x170>)
 8002896:	f107 040c 	add.w	r4, r7, #12
 800289a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        fillScreen(BLACK);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fdb3 	bl	800140c <fillScreen>
        ST7735_WriteStringWithSeparators(10, 90, msg, Font_11x18, RED, BLACK);
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <process_command+0x158>)
 80028a8:	f107 010c 	add.w	r1, r7, #12
 80028ac:	2200      	movs	r2, #0
 80028ae:	9202      	str	r2, [sp, #8]
 80028b0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028b4:	9201      	str	r2, [sp, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	9200      	str	r2, [sp, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	460a      	mov	r2, r1
 80028be:	215a      	movs	r1, #90	@ 0x5a
 80028c0:	200a      	movs	r0, #10
 80028c2:	f7ff fdcb 	bl	800245c <ST7735_WriteStringWithSeparators>
}
 80028c6:	bf00      	nop
 80028c8:	3750      	adds	r7, #80	@ 0x50
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdb0      	pop	{r4, r5, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08008db4 	.word	0x08008db4
 80028d4:	48000400 	.word	0x48000400
 80028d8:	08008dd0 	.word	0x08008dd0
 80028dc:	20000004 	.word	0x20000004
 80028e0:	08008dbc 	.word	0x08008dbc
 80028e4:	08008de0 	.word	0x08008de0
 80028e8:	08008dc4 	.word	0x08008dc4
 80028ec:	08008df4 	.word	0x08008df4
 80028f0:	08008da8 	.word	0x08008da8
 80028f4:	08008e04 	.word	0x08008e04

080028f8 <draw_menu>:
void draw_menu(int selected) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	6078      	str	r0, [r7, #4]
	fillScreen(BLACK);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe fd83 	bl	800140c <fillScreen>

    for (int i = 0; i < NUM_OPTIONS; i++) {
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e042      	b.n	8002992 <draw_menu+0x9a>
        uint16_t y = 10 + i * 20;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	b29b      	uxth	r3, r3
 800291a:	330a      	adds	r3, #10
 800291c:	817b      	strh	r3, [r7, #10]
        if (i == selected) {
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	d120      	bne.n	8002968 <draw_menu+0x70>
            ST7735_WriteString(10, y, "->", Font_11x18,YELLOW, BLACK);
 8002926:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <draw_menu+0xac>)
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	2200      	movs	r2, #0
 800292c:	9202      	str	r2, [sp, #8]
 800292e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002932:	9201      	str	r2, [sp, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <draw_menu+0xb0>)
 800293c:	200a      	movs	r0, #10
 800293e:	f7ff fd1f 	bl	8002380 <ST7735_WriteString>
            ST7735_WriteString(30, y, (char*)menu[i], Font_11x18, YELLOW,BLACK);
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <draw_menu+0xb4>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800294a:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <draw_menu+0xac>)
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	2200      	movs	r2, #0
 8002950:	9202      	str	r2, [sp, #8]
 8002952:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002956:	9201      	str	r2, [sp, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	9200      	str	r2, [sp, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4602      	mov	r2, r0
 8002960:	201e      	movs	r0, #30
 8002962:	f7ff fd0d 	bl	8002380 <ST7735_WriteString>
 8002966:	e011      	b.n	800298c <draw_menu+0x94>

        } else {
            ST7735_WriteString(30, y, (char*)menu[i], Font_11x18, WHITE,BLACK);
 8002968:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <draw_menu+0xb4>)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002970:	4b0c      	ldr	r3, [pc, #48]	@ (80029a4 <draw_menu+0xac>)
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	2200      	movs	r2, #0
 8002976:	9202      	str	r2, [sp, #8]
 8002978:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800297c:	9201      	str	r2, [sp, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4602      	mov	r2, r0
 8002986:	201e      	movs	r0, #30
 8002988:	f7ff fcfa 	bl	8002380 <ST7735_WriteString>
    for (int i = 0; i < NUM_OPTIONS; i++) {
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3301      	adds	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b03      	cmp	r3, #3
 8002996:	ddb9      	ble.n	800290c <draw_menu+0x14>
        }
    }



}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000004 	.word	0x20000004
 80029a8:	08008e14 	.word	0x08008e14
 80029ac:	2000000c 	.word	0x2000000c

080029b0 <set_backlight_brightness>:



void set_backlight_brightness(uint8_t percent) {
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
    if (percent > 100) percent = 100;
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b64      	cmp	r3, #100	@ 0x64
 80029be:	d901      	bls.n	80029c4 <set_backlight_brightness+0x14>
 80029c0:	2364      	movs	r3, #100	@ 0x64
 80029c2:	71fb      	strb	r3, [r7, #7]
    uint32_t pulse = (htim1.Init.Period + 1) * percent / 100;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <set_backlight_brightness+0x40>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	79fa      	ldrb	r2, [r7, #7]
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	4a08      	ldr	r2, [pc, #32]	@ (80029f4 <set_backlight_brightness+0x44>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <set_backlight_brightness+0x40>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	635a      	str	r2, [r3, #52]	@ 0x34


}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000228 	.word	0x20000228
 80029f4:	51eb851f 	.word	0x51eb851f

080029f8 <backlight_display>:
void backlight_display(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af04      	add	r7, sp, #16
	  char b_str[8];  // Enough for "100%" + null terminator

	    // Easy conversion
	    b_str[0] = (brightness / 100) + '0';                 // Hundreds
 80029fe:	4b29      	ldr	r3, [pc, #164]	@ (8002aa4 <backlight_display+0xac>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4a29      	ldr	r2, [pc, #164]	@ (8002aa8 <backlight_display+0xb0>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3330      	adds	r3, #48	@ 0x30
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	703b      	strb	r3, [r7, #0]
	    b_str[1] = ((brightness / 10) % 10) + '0';           // Tens
 8002a12:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <backlight_display+0xac>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	4a25      	ldr	r2, [pc, #148]	@ (8002aac <backlight_display+0xb4>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <backlight_display+0xb4>)
 8002a22:	fba3 1302 	umull	r1, r3, r3, r2
 8002a26:	08d9      	lsrs	r1, r3, #3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3330      	adds	r3, #48	@ 0x30
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	707b      	strb	r3, [r7, #1]
	    b_str[2] = (brightness % 10) + '0';                  // Ones
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <backlight_display+0xac>)
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <backlight_display+0xb4>)
 8002a40:	fba3 1302 	umull	r1, r3, r3, r2
 8002a44:	08d9      	lsrs	r1, r3, #3
 8002a46:	460b      	mov	r3, r1
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3330      	adds	r3, #48	@ 0x30
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	70bb      	strb	r3, [r7, #2]
	    b_str[3] = '%';                                      // Percent symbol
 8002a58:	2325      	movs	r3, #37	@ 0x25
 8002a5a:	70fb      	strb	r3, [r7, #3]
	    b_str[4] = '\0';                                     // Null-terminate
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	713b      	strb	r3, [r7, #4]
	    ST7735_WriteString(0, 100, "Bright: ", Font_11x18, WHITE, BLACK);
 8002a60:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <backlight_display+0xb8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	9202      	str	r2, [sp, #8]
 8002a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a6a:	9201      	str	r2, [sp, #4]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a10      	ldr	r2, [pc, #64]	@ (8002ab4 <backlight_display+0xbc>)
 8002a74:	2164      	movs	r1, #100	@ 0x64
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7ff fc82 	bl	8002380 <ST7735_WriteString>
	    ST7735_WriteString(95, 100, b_str, Font_11x18, WHITE, BLACK);
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <backlight_display+0xb8>)
 8002a7e:	4639      	mov	r1, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	9202      	str	r2, [sp, #8]
 8002a84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a88:	9201      	str	r2, [sp, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	460a      	mov	r2, r1
 8002a92:	2164      	movs	r1, #100	@ 0x64
 8002a94:	205f      	movs	r0, #95	@ 0x5f
 8002a96:	f7ff fc73 	bl	8002380 <ST7735_WriteString>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000001c 	.word	0x2000001c
 8002aa8:	51eb851f 	.word	0x51eb851f
 8002aac:	cccccccd 	.word	0xcccccccd
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	08008e18 	.word	0x08008e18

08002ab8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <HAL_UART_RxCpltCallback+0x34>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_UART_RxCpltCallback+0x2a>
        last_char = rx_char;
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_UART_RxCpltCallback+0x38>)
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_UART_RxCpltCallback+0x3c>)
 8002ad0:	701a      	strb	r2, [r3, #0]
        rx_ready = 1; // Signal main loop
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_UART_RxCpltCallback+0x40>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&hlpuart1, &rx_char, 1);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4905      	ldr	r1, [pc, #20]	@ (8002af0 <HAL_UART_RxCpltCallback+0x38>)
 8002adc:	4807      	ldr	r0, [pc, #28]	@ (8002afc <HAL_UART_RxCpltCallback+0x44>)
 8002ade:	f004 fce3 	bl	80074a8 <HAL_UART_Receive_IT>
    }
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40008000 	.word	0x40008000
 8002af0:	20000276 	.word	0x20000276
 8002af4:	20000275 	.word	0x20000275
 8002af8:	20000274 	.word	0x20000274
 8002afc:	200000ac 	.word	0x200000ac

08002b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b04:	f000 fd63 	bl	80035ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b08:	f000 f8e4 	bl	8002cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b0c:	f000 fa54 	bl	8002fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b10:	f000 fa2c 	bl	8002f6c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002b14:	f000 f930 	bl	8002d78 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002b18:	f000 f95a 	bl	8002dd0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002b1c:	f000 f996 	bl	8002e4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b20:	2100      	movs	r1, #0
 8002b22:	4864      	ldr	r0, [pc, #400]	@ (8002cb4 <main+0x1b4>)
 8002b24:	f003 fdb0 	bl	8006688 <HAL_TIM_PWM_Start>

  // Test: set brightness to 50%
  set_backlight_brightness(brightness);
 8002b28:	4b63      	ldr	r3, [pc, #396]	@ (8002cb8 <main+0x1b8>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff3f 	bl	80029b0 <set_backlight_brightness>
  ST7735_Init(0);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff fac2 	bl	80020bc <ST7735_Init>
  fillScreen(BLACK);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe fc67 	bl	800140c <fillScreen>
  ST7735_SetRotation (1);
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff fae8 	bl	8002114 <ST7735_SetRotation>
  draw_menu(selected);
 8002b44:	4b5d      	ldr	r3, [pc, #372]	@ (8002cbc <main+0x1bc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fed5 	bl	80028f8 <draw_menu>
//  char rx_buffer[8];
  HAL_UART_Receive_IT(&hlpuart1, &rx_char, 1);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	495b      	ldr	r1, [pc, #364]	@ (8002cc0 <main+0x1c0>)
 8002b52:	485c      	ldr	r0, [pc, #368]	@ (8002cc4 <main+0x1c4>)
 8002b54:	f004 fca8 	bl	80074a8 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (rx_ready) {
 8002b58:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc8 <main+0x1c8>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0fa      	beq.n	8002b58 <main+0x58>
	         rx_ready = 0;
 8002b62:	4b59      	ldr	r3, [pc, #356]	@ (8002cc8 <main+0x1c8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]

	         switch (last_char) {
 8002b68:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <main+0x1cc>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b0d      	cmp	r3, #13
 8002b6e:	d05d      	beq.n	8002c2c <main+0x12c>
 8002b70:	2b0d      	cmp	r3, #13
 8002b72:	dbf1      	blt.n	8002b58 <main+0x58>
 8002b74:	2b77      	cmp	r3, #119	@ 0x77
 8002b76:	dcef      	bgt.n	8002b58 <main+0x58>
 8002b78:	2b61      	cmp	r3, #97	@ 0x61
 8002b7a:	dbed      	blt.n	8002b58 <main+0x58>
 8002b7c:	3b61      	subs	r3, #97	@ 0x61
 8002b7e:	2b16      	cmp	r3, #22
 8002b80:	d8ea      	bhi.n	8002b58 <main+0x58>
 8002b82:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <main+0x88>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002c57 	.word	0x08002c57
 8002b8c:	08002b59 	.word	0x08002b59
 8002b90:	08002b59 	.word	0x08002b59
 8002b94:	08002c83 	.word	0x08002c83
 8002b98:	08002b59 	.word	0x08002b59
 8002b9c:	08002b59 	.word	0x08002b59
 8002ba0:	08002b59 	.word	0x08002b59
 8002ba4:	08002b59 	.word	0x08002b59
 8002ba8:	08002b59 	.word	0x08002b59
 8002bac:	08002b59 	.word	0x08002b59
 8002bb0:	08002b59 	.word	0x08002b59
 8002bb4:	08002b59 	.word	0x08002b59
 8002bb8:	08002b59 	.word	0x08002b59
 8002bbc:	08002b59 	.word	0x08002b59
 8002bc0:	08002b59 	.word	0x08002b59
 8002bc4:	08002b59 	.word	0x08002b59
 8002bc8:	08002b59 	.word	0x08002b59
 8002bcc:	08002b59 	.word	0x08002b59
 8002bd0:	08002c09 	.word	0x08002c09
 8002bd4:	08002b59 	.word	0x08002b59
 8002bd8:	08002b59 	.word	0x08002b59
 8002bdc:	08002b59 	.word	0x08002b59
 8002be0:	08002be5 	.word	0x08002be5
	             case 'w':
	                 selected--;
 8002be4:	4b35      	ldr	r3, [pc, #212]	@ (8002cbc <main+0x1bc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <main+0x1bc>)
 8002bec:	6013      	str	r3, [r2, #0]
	                 if (selected < 0) selected = NUM_OPTIONS - 1;
 8002bee:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <main+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	da02      	bge.n	8002bfc <main+0xfc>
 8002bf6:	4b31      	ldr	r3, [pc, #196]	@ (8002cbc <main+0x1bc>)
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	601a      	str	r2, [r3, #0]
	                 draw_menu(selected);
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <main+0x1bc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fe79 	bl	80028f8 <draw_menu>
	                 break;
 8002c06:	e053      	b.n	8002cb0 <main+0x1b0>

	             case 's':
	                 selected++;
 8002c08:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <main+0x1bc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <main+0x1bc>)
 8002c10:	6013      	str	r3, [r2, #0]
	                 if (selected >= NUM_OPTIONS) selected = 0;
 8002c12:	4b2a      	ldr	r3, [pc, #168]	@ (8002cbc <main+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	dd02      	ble.n	8002c20 <main+0x120>
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <main+0x1bc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
	                 draw_menu(selected);
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <main+0x1bc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fe67 	bl	80028f8 <draw_menu>
	                 break;
 8002c2a:	e041      	b.n	8002cb0 <main+0x1b0>

	             case '\r':
	            	 fillScreen(BLACK);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe fbed 	bl	800140c <fillScreen>
	                 process_command((char*)menu[selected]);
 8002c32:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <main+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a26      	ldr	r2, [pc, #152]	@ (8002cd0 <main+0x1d0>)
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fda1 	bl	8002784 <process_command>
	                 HAL_Delay(1000);
 8002c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c46:	f000 fd37 	bl	80036b8 <HAL_Delay>
	                 draw_menu(selected);
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cbc <main+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fe52 	bl	80028f8 <draw_menu>

	                 break;
 8002c54:	e02c      	b.n	8002cb0 <main+0x1b0>
	             case 'a': // decrease brightness
	                    if (brightness >= 10) brightness -= 10;
 8002c56:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <main+0x1b8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b09      	cmp	r3, #9
 8002c5c:	d906      	bls.n	8002c6c <main+0x16c>
 8002c5e:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <main+0x1b8>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	3b0a      	subs	r3, #10
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <main+0x1b8>)
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e002      	b.n	8002c72 <main+0x172>
	                    else brightness = 0;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <main+0x1b8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
	                    set_backlight_brightness(brightness);
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <main+0x1b8>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe9a 	bl	80029b0 <set_backlight_brightness>
	                    backlight_display();
 8002c7c:	f7ff febc 	bl	80029f8 <backlight_display>
	                    break;
 8002c80:	e016      	b.n	8002cb0 <main+0x1b0>

	                case 'd': // increase brightness
	                    if (brightness <= 90) brightness += 10;
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <main+0x1b8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b5a      	cmp	r3, #90	@ 0x5a
 8002c88:	d806      	bhi.n	8002c98 <main+0x198>
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <main+0x1b8>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	330a      	adds	r3, #10
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <main+0x1b8>)
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e002      	b.n	8002c9e <main+0x19e>
	                    else brightness = 100;
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <main+0x1b8>)
 8002c9a:	2264      	movs	r2, #100	@ 0x64
 8002c9c:	701a      	strb	r2, [r3, #0]
	                    set_backlight_brightness(brightness);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <main+0x1b8>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fe84 	bl	80029b0 <set_backlight_brightness>
	                    backlight_display();
 8002ca8:	f7ff fea6 	bl	80029f8 <backlight_display>
	                    break;
 8002cac:	bf00      	nop
 8002cae:	e753      	b.n	8002b58 <main+0x58>
	  if (rx_ready) {
 8002cb0:	e752      	b.n	8002b58 <main+0x58>
 8002cb2:	bf00      	nop
 8002cb4:	20000228 	.word	0x20000228
 8002cb8:	2000001c 	.word	0x2000001c
 8002cbc:	20000278 	.word	0x20000278
 8002cc0:	20000276 	.word	0x20000276
 8002cc4:	200000ac 	.word	0x200000ac
 8002cc8:	20000274 	.word	0x20000274
 8002ccc:	20000275 	.word	0x20000275
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b096      	sub	sp, #88	@ 0x58
 8002cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	2244      	movs	r2, #68	@ 0x44
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f005 ffb0 	bl	8008c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce8:	463b      	mov	r3, r7
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002cf6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002cfa:	f001 fbdf 	bl	80044bc <HAL_PWREx_ControlVoltageScaling>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002d04:	f000 f9f8 	bl	80030f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d12:	2340      	movs	r3, #64	@ 0x40
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d16:	2302      	movs	r3, #2
 8002d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002d22:	230a      	movs	r3, #10
 8002d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d26:	2302      	movs	r3, #2
 8002d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fc26 	bl	8004588 <HAL_RCC_OscConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002d42:	f000 f9d9 	bl	80030f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d46:	230f      	movs	r3, #15
 8002d48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 f82c 	bl	8004dbc <HAL_RCC_ClockConfig>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d6a:	f000 f9c5 	bl	80030f8 <Error_Handler>
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3758      	adds	r7, #88	@ 0x58
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002d7c:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002d7e:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <MX_LPUART1_UART_Init+0x54>)
 8002d80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002d90:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002d9e:	220c      	movs	r2, #12
 8002da0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da8:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002db4:	4804      	ldr	r0, [pc, #16]	@ (8002dc8 <MX_LPUART1_UART_Init+0x50>)
 8002db6:	f004 fb29 	bl	800740c <HAL_UART_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002dc0:	f000 f99a 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200000ac 	.word	0x200000ac
 8002dcc:	40008000 	.word	0x40008000

08002dd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <MX_SPI1_Init+0x78>)
 8002dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002ddc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002de8:	4b16      	ldr	r3, [pc, #88]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002dea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002dee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df0:	4b14      	ldr	r3, [pc, #80]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e06:	2218      	movs	r2, #24
 8002e08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e1e:	2207      	movs	r2, #7
 8002e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e2e:	4805      	ldr	r0, [pc, #20]	@ (8002e44 <MX_SPI1_Init+0x74>)
 8002e30:	f002 feb2 	bl	8005b98 <HAL_SPI_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e3a:	f000 f95d 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000134 	.word	0x20000134
 8002e48:	40013000 	.word	0x40013000

08002e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b096      	sub	sp, #88	@ 0x58
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	615a      	str	r2, [r3, #20]
 8002e70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	222c      	movs	r2, #44	@ 0x2c
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f005 fee5 	bl	8008c48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e7e:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002e80:	4a39      	ldr	r2, [pc, #228]	@ (8002f68 <MX_TIM1_Init+0x11c>)
 8002e82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8002e84:	4b37      	ldr	r3, [pc, #220]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002e86:	2207      	movs	r2, #7
 8002e88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002e90:	4b34      	ldr	r3, [pc, #208]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002e92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e98:	4b32      	ldr	r3, [pc, #200]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e9e:	4b31      	ldr	r3, [pc, #196]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002eaa:	482e      	ldr	r0, [pc, #184]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002eac:	f003 fb94 	bl	80065d8 <HAL_TIM_PWM_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002eb6:	f000 f91f 	bl	80030f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ec6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4825      	ldr	r0, [pc, #148]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002ece:	f004 f997 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ed8:	f000 f90e 	bl	80030f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002edc:	2360      	movs	r3, #96	@ 0x60
 8002ede:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002efc:	2200      	movs	r2, #0
 8002efe:	4619      	mov	r1, r3
 8002f00:	4818      	ldr	r0, [pc, #96]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002f02:	f003 fcc7 	bl	8006894 <HAL_TIM_PWM_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f0c:	f000 f8f4 	bl	80030f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4807      	ldr	r0, [pc, #28]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002f46:	f004 f9e3 	bl	8007310 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002f50:	f000 f8d2 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f54:	4803      	ldr	r0, [pc, #12]	@ (8002f64 <MX_TIM1_Init+0x118>)
 8002f56:	f000 fa43 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 8002f5a:	bf00      	nop
 8002f5c:	3758      	adds	r7, #88	@ 0x58
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000228 	.word	0x20000228
 8002f68:	40012c00 	.word	0x40012c00

08002f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <MX_DMA_Init+0x48>)
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb4 <MX_DMA_Init+0x48>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <MX_DMA_Init+0x48>)
 8002f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	200c      	movs	r0, #12
 8002f90:	f000 fc91 	bl	80038b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f94:	200c      	movs	r0, #12
 8002f96:	f000 fcaa 	bl	80038ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	200d      	movs	r0, #13
 8002fa0:	f000 fc89 	bl	80038b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fa4:	200d      	movs	r0, #13
 8002fa6:	f000 fca2 	bl	80038ee <HAL_NVIC_EnableIRQ>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	@ 0x30
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	4b46      	ldr	r3, [pc, #280]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	4a45      	ldr	r2, [pc, #276]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fda:	4b43      	ldr	r3, [pc, #268]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fe6:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	4a3f      	ldr	r2, [pc, #252]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8002fec:	f043 0320 	orr.w	r3, r3, #32
 8002ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	4a39      	ldr	r2, [pc, #228]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800300a:	4b37      	ldr	r3, [pc, #220]	@ (80030e8 <MX_GPIO_Init+0x130>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	4b34      	ldr	r3, [pc, #208]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	4a33      	ldr	r2, [pc, #204]	@ (80030e8 <MX_GPIO_Init+0x130>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003022:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800302e:	4b2e      	ldr	r3, [pc, #184]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	4a2d      	ldr	r2, [pc, #180]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800303a:	4b2b      	ldr	r3, [pc, #172]	@ (80030e8 <MX_GPIO_Init+0x130>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003046:	4b28      	ldr	r3, [pc, #160]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304a:	4a27      	ldr	r2, [pc, #156]	@ (80030e8 <MX_GPIO_Init+0x130>)
 800304c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003052:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <MX_GPIO_Init+0x130>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800305e:	f001 fa83 	bl	8004568 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003068:	4820      	ldr	r0, [pc, #128]	@ (80030ec <MX_GPIO_Init+0x134>)
 800306a:	f001 f9e7 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800306e:	2200      	movs	r2, #0
 8003070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003074:	481e      	ldr	r0, [pc, #120]	@ (80030f0 <MX_GPIO_Init+0x138>)
 8003076:	f001 f9e1 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|reset_Pin, GPIO_PIN_RESET);
 800307a:	2200      	movs	r2, #0
 800307c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003080:	481c      	ldr	r0, [pc, #112]	@ (80030f4 <MX_GPIO_Init+0x13c>)
 8003082:	f001 f9db 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8003086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	4619      	mov	r1, r3
 800309e:	4813      	ldr	r0, [pc, #76]	@ (80030ec <MX_GPIO_Init+0x134>)
 80030a0:	f000 ff48 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030aa:	2301      	movs	r3, #1
 80030ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b6:	f107 031c 	add.w	r3, r7, #28
 80030ba:	4619      	mov	r1, r3
 80030bc:	480c      	ldr	r0, [pc, #48]	@ (80030f0 <MX_GPIO_Init+0x138>)
 80030be:	f000 ff39 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin reset_Pin */
  GPIO_InitStruct.Pin = CS_Pin|reset_Pin;
 80030c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80030c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4806      	ldr	r0, [pc, #24]	@ (80030f4 <MX_GPIO_Init+0x13c>)
 80030dc:	f000 ff2a 	bl	8003f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80030e0:	bf00      	nop
 80030e2:	3730      	adds	r7, #48	@ 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	48001400 	.word	0x48001400
 80030f0:	48000400 	.word	0x48000400
 80030f4:	48000c00 	.word	0x48000c00

080030f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030fc:	b672      	cpsid	i
}
 80030fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <Error_Handler+0x8>

08003104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <HAL_MspInit+0x44>)
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	4a0e      	ldr	r2, [pc, #56]	@ (8003148 <HAL_MspInit+0x44>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6613      	str	r3, [r2, #96]	@ 0x60
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_MspInit+0x44>)
 8003118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <HAL_MspInit+0x44>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	4a08      	ldr	r2, [pc, #32]	@ (8003148 <HAL_MspInit+0x44>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <HAL_MspInit+0x44>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b0ac      	sub	sp, #176	@ 0xb0
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	228c      	movs	r2, #140	@ 0x8c
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f005 fd6b 	bl	8008c48 <memset>
  if(huart->Instance==LPUART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a26      	ldr	r2, [pc, #152]	@ (8003210 <HAL_UART_MspInit+0xc4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d145      	bne.n	8003208 <HAL_UART_MspInit+0xbc>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800317c:	2320      	movs	r3, #32
 800317e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003180:	2300      	movs	r3, #0
 8003182:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	4618      	mov	r0, r3
 800318a:	f002 f83b 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003194:	f7ff ffb0 	bl	80030f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <HAL_UART_MspInit+0xc8>)
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	4a1d      	ldr	r2, [pc, #116]	@ (8003214 <HAL_UART_MspInit+0xc8>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80031a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_UART_MspInit+0xc8>)
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031b0:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <HAL_UART_MspInit+0xc8>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_UART_MspInit+0xc8>)
 80031b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <HAL_UART_MspInit+0xc8>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80031c8:	f001 f9ce 	bl	8004568 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031cc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80031d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031e6:	2308      	movs	r3, #8
 80031e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031f0:	4619      	mov	r1, r3
 80031f2:	4809      	ldr	r0, [pc, #36]	@ (8003218 <HAL_UART_MspInit+0xcc>)
 80031f4:	f000 fe9e 	bl	8003f34 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	2046      	movs	r0, #70	@ 0x46
 80031fe:	f000 fb5a 	bl	80038b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003202:	2046      	movs	r0, #70	@ 0x46
 8003204:	f000 fb73 	bl	80038ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8003208:	bf00      	nop
 800320a:	37b0      	adds	r7, #176	@ 0xb0
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40008000 	.word	0x40008000
 8003214:	40021000 	.word	0x40021000
 8003218:	48001800 	.word	0x48001800

0800321c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	@ 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a40      	ldr	r2, [pc, #256]	@ (800333c <HAL_SPI_MspInit+0x120>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d17a      	bne.n	8003334 <HAL_SPI_MspInit+0x118>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800323e:	4b40      	ldr	r3, [pc, #256]	@ (8003340 <HAL_SPI_MspInit+0x124>)
 8003240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003242:	4a3f      	ldr	r2, [pc, #252]	@ (8003340 <HAL_SPI_MspInit+0x124>)
 8003244:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003248:	6613      	str	r3, [r2, #96]	@ 0x60
 800324a:	4b3d      	ldr	r3, [pc, #244]	@ (8003340 <HAL_SPI_MspInit+0x124>)
 800324c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b3a      	ldr	r3, [pc, #232]	@ (8003340 <HAL_SPI_MspInit+0x124>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	4a39      	ldr	r2, [pc, #228]	@ (8003340 <HAL_SPI_MspInit+0x124>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003262:	4b37      	ldr	r3, [pc, #220]	@ (8003340 <HAL_SPI_MspInit+0x124>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800326e:	23e0      	movs	r3, #224	@ 0xe0
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800327e:	2305      	movs	r3, #5
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800328c:	f000 fe52 	bl	8003f34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003290:	4b2c      	ldr	r3, [pc, #176]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 8003292:	4a2d      	ldr	r2, [pc, #180]	@ (8003348 <HAL_SPI_MspInit+0x12c>)
 8003294:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8003296:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 8003298:	2201      	movs	r2, #1
 800329a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329c:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a2:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032a8:	4b26      	ldr	r3, [pc, #152]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032aa:	2280      	movs	r2, #128	@ 0x80
 80032ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ae:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80032ba:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032bc:	2200      	movs	r2, #0
 80032be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032c0:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80032c6:	481f      	ldr	r0, [pc, #124]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032c8:	f000 fb2c 	bl	8003924 <HAL_DMA_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80032d2:	f7ff ff11 	bl	80030f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032da:	659a      	str	r2, [r3, #88]	@ 0x58
 80032dc:	4a19      	ldr	r2, [pc, #100]	@ (8003344 <HAL_SPI_MspInit+0x128>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <HAL_SPI_MspInit+0x130>)
 80032e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <HAL_SPI_MspInit+0x134>)
 80032e6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80032e8:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_SPI_MspInit+0x130>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <HAL_SPI_MspInit+0x130>)
 80032f0:	2210      	movs	r2, #16
 80032f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f4:	4b15      	ldr	r3, [pc, #84]	@ (800334c <HAL_SPI_MspInit+0x130>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <HAL_SPI_MspInit+0x130>)
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003300:	4b12      	ldr	r3, [pc, #72]	@ (800334c <HAL_SPI_MspInit+0x130>)
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_SPI_MspInit+0x130>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800330c:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <HAL_SPI_MspInit+0x130>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <HAL_SPI_MspInit+0x130>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003318:	480c      	ldr	r0, [pc, #48]	@ (800334c <HAL_SPI_MspInit+0x130>)
 800331a:	f000 fb03 	bl	8003924 <HAL_DMA_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003324:	f7ff fee8 	bl	80030f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <HAL_SPI_MspInit+0x130>)
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
 800332e:	4a07      	ldr	r2, [pc, #28]	@ (800334c <HAL_SPI_MspInit+0x130>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	@ 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40013000 	.word	0x40013000
 8003340:	40021000 	.word	0x40021000
 8003344:	20000198 	.word	0x20000198
 8003348:	4002001c 	.word	0x4002001c
 800334c:	200001e0 	.word	0x200001e0
 8003350:	40020030 	.word	0x40020030

08003354 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0d      	ldr	r2, [pc, #52]	@ (8003398 <HAL_SPI_MspDeInit+0x44>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d114      	bne.n	8003390 <HAL_SPI_MspDeInit+0x3c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003366:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <HAL_SPI_MspDeInit+0x48>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <HAL_SPI_MspDeInit+0x48>)
 800336c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003370:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8003372:	21e0      	movs	r1, #224	@ 0xe0
 8003374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003378:	f000 ff6e 	bl	8004258 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fb87 	bl	8003a94 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fb82 	bl	8003a94 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40013000 	.word	0x40013000
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <HAL_TIM_PWM_MspInit+0x38>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10b      	bne.n	80033ca <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <HAL_TIM_PWM_MspInit+0x3c>)
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	4a09      	ldr	r2, [pc, #36]	@ (80033dc <HAL_TIM_PWM_MspInit+0x3c>)
 80033b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80033be:	4b07      	ldr	r3, [pc, #28]	@ (80033dc <HAL_TIM_PWM_MspInit+0x3c>)
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40021000 	.word	0x40021000

080033e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_TIM_MspPostInit+0x64>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d11c      	bne.n	800343c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_TIM_MspPostInit+0x68>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003406:	4a10      	ldr	r2, [pc, #64]	@ (8003448 <HAL_TIM_MspPostInit+0x68>)
 8003408:	f043 0310 	orr.w	r3, r3, #16
 800340c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_TIM_MspPostInit+0x68>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800341a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800341e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800342c:	2301      	movs	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	4619      	mov	r1, r3
 8003436:	4805      	ldr	r0, [pc, #20]	@ (800344c <HAL_TIM_MspPostInit+0x6c>)
 8003438:	f000 fd7c 	bl	8003f34 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800343c:	bf00      	nop
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40021000 	.word	0x40021000
 800344c:	48001000 	.word	0x48001000

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <NMI_Handler+0x4>

08003458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <HardFault_Handler+0x4>

08003460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <MemManage_Handler+0x4>

08003468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <UsageFault_Handler+0x4>

08003478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034a6:	f000 f8e7 	bl	8003678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80034b4:	4802      	ldr	r0, [pc, #8]	@ (80034c0 <DMA1_Channel2_IRQHandler+0x10>)
 80034b6:	f000 fc5e 	bl	8003d76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000198 	.word	0x20000198

080034c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80034c8:	4802      	ldr	r0, [pc, #8]	@ (80034d4 <DMA1_Channel3_IRQHandler+0x10>)
 80034ca:	f000 fc54 	bl	8003d76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200001e0 	.word	0x200001e0

080034d8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80034dc:	4802      	ldr	r0, [pc, #8]	@ (80034e8 <LPUART1_IRQHandler+0x10>)
 80034de:	f004 f82f 	bl	8007540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200000ac 	.word	0x200000ac

080034ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034f4:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <_sbrk+0x5c>)
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <_sbrk+0x60>)
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003500:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <_sbrk+0x64>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <_sbrk+0x64>)
 800350a:	4a12      	ldr	r2, [pc, #72]	@ (8003554 <_sbrk+0x68>)
 800350c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <_sbrk+0x64>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d207      	bcs.n	800352c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800351c:	f005 fbc2 	bl	8008ca4 <__errno>
 8003520:	4603      	mov	r3, r0
 8003522:	220c      	movs	r2, #12
 8003524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	e009      	b.n	8003540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800352c:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <_sbrk+0x64>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003532:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <_sbrk+0x64>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <_sbrk+0x64>)
 800353c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800353e:	68fb      	ldr	r3, [r7, #12]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20050000 	.word	0x20050000
 800354c:	00000400 	.word	0x00000400
 8003550:	2000027c 	.word	0x2000027c
 8003554:	200003d0 	.word	0x200003d0

08003558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <SystemInit+0x20>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003562:	4a05      	ldr	r2, [pc, #20]	@ (8003578 <SystemInit+0x20>)
 8003564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800357c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003580:	f7ff ffea 	bl	8003558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003584:	480c      	ldr	r0, [pc, #48]	@ (80035b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003586:	490d      	ldr	r1, [pc, #52]	@ (80035bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <LoopForever+0xe>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800358c:	e002      	b.n	8003594 <LoopCopyDataInit>

0800358e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003592:	3304      	adds	r3, #4

08003594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003598:	d3f9      	bcc.n	800358e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359a:	4a0a      	ldr	r2, [pc, #40]	@ (80035c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800359c:	4c0a      	ldr	r4, [pc, #40]	@ (80035c8 <LoopForever+0x16>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a0:	e001      	b.n	80035a6 <LoopFillZerobss>

080035a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a4:	3204      	adds	r2, #4

080035a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a8:	d3fb      	bcc.n	80035a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035aa:	f005 fb81 	bl	8008cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ae:	f7ff faa7 	bl	8002b00 <main>

080035b2 <LoopForever>:

LoopForever:
    b LoopForever
 80035b2:	e7fe      	b.n	80035b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80035b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80035b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80035c0:	08009c4c 	.word	0x08009c4c
  ldr r2, =_sbss
 80035c4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80035c8:	200003cc 	.word	0x200003cc

080035cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035cc:	e7fe      	b.n	80035cc <ADC1_2_IRQHandler>

080035ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d8:	2003      	movs	r0, #3
 80035da:	f000 f961 	bl	80038a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035de:	200f      	movs	r0, #15
 80035e0:	f000 f80e 	bl	8003600 <HAL_InitTick>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	71fb      	strb	r3, [r7, #7]
 80035ee:	e001      	b.n	80035f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035f0:	f7ff fd88 	bl	8003104 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f4:	79fb      	ldrb	r3, [r7, #7]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800360c:	4b17      	ldr	r3, [pc, #92]	@ (800366c <HAL_InitTick+0x6c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d023      	beq.n	800365c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003614:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <HAL_InitTick+0x70>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b14      	ldr	r3, [pc, #80]	@ (800366c <HAL_InitTick+0x6c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4619      	mov	r1, r3
 800361e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003622:	fbb3 f3f1 	udiv	r3, r3, r1
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f96d 	bl	800390a <HAL_SYSTICK_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d809      	bhi.n	8003650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800363c:	2200      	movs	r2, #0
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	f04f 30ff 	mov.w	r0, #4294967295
 8003644:	f000 f937 	bl	80038b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003648:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <HAL_InitTick+0x74>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e007      	b.n	8003660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e004      	b.n	8003660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	e001      	b.n	8003660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000028 	.word	0x20000028
 8003670:	20000020 	.word	0x20000020
 8003674:	20000024 	.word	0x20000024

08003678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_IncTick+0x20>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_IncTick+0x24>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4413      	add	r3, r2
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_IncTick+0x24>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000028 	.word	0x20000028
 800369c:	20000280 	.word	0x20000280

080036a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return uwTick;
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <HAL_GetTick+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000280 	.word	0x20000280

080036b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7ff ffee 	bl	80036a0 <HAL_GetTick>
 80036c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d005      	beq.n	80036de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <HAL_Delay+0x44>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036de:	bf00      	nop
 80036e0:	f7ff ffde 	bl	80036a0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d8f7      	bhi.n	80036e0 <HAL_Delay+0x28>
  {
  }
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000028 	.word	0x20000028

08003700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003710:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <__NVIC_SetPriorityGrouping+0x44>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800371c:	4013      	ands	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800372c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003732:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <__NVIC_SetPriorityGrouping+0x44>)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	60d3      	str	r3, [r2, #12]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800374c:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <__NVIC_GetPriorityGrouping+0x18>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	0a1b      	lsrs	r3, r3, #8
 8003752:	f003 0307 	and.w	r3, r3, #7
}
 8003756:	4618      	mov	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	db0b      	blt.n	800378e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	4907      	ldr	r1, [pc, #28]	@ (800379c <__NVIC_EnableIRQ+0x38>)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2001      	movs	r0, #1
 8003786:	fa00 f202 	lsl.w	r2, r0, r2
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000e100 	.word	0xe000e100

080037a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	db0a      	blt.n	80037ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	490c      	ldr	r1, [pc, #48]	@ (80037ec <__NVIC_SetPriority+0x4c>)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	440b      	add	r3, r1
 80037c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c8:	e00a      	b.n	80037e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4908      	ldr	r1, [pc, #32]	@ (80037f0 <__NVIC_SetPriority+0x50>)
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	3b04      	subs	r3, #4
 80037d8:	0112      	lsls	r2, r2, #4
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	440b      	add	r3, r1
 80037de:	761a      	strb	r2, [r3, #24]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000e100 	.word	0xe000e100
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	@ 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f1c3 0307 	rsb	r3, r3, #7
 800380e:	2b04      	cmp	r3, #4
 8003810:	bf28      	it	cs
 8003812:	2304      	movcs	r3, #4
 8003814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3304      	adds	r3, #4
 800381a:	2b06      	cmp	r3, #6
 800381c:	d902      	bls.n	8003824 <NVIC_EncodePriority+0x30>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3b03      	subs	r3, #3
 8003822:	e000      	b.n	8003826 <NVIC_EncodePriority+0x32>
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	401a      	ands	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800383c:	f04f 31ff 	mov.w	r1, #4294967295
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43d9      	mvns	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	4313      	orrs	r3, r2
         );
}
 800384e:	4618      	mov	r0, r3
 8003850:	3724      	adds	r7, #36	@ 0x24
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800386c:	d301      	bcc.n	8003872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800386e:	2301      	movs	r3, #1
 8003870:	e00f      	b.n	8003892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003872:	4a0a      	ldr	r2, [pc, #40]	@ (800389c <SysTick_Config+0x40>)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800387a:	210f      	movs	r1, #15
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	f7ff ff8e 	bl	80037a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <SysTick_Config+0x40>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388a:	4b04      	ldr	r3, [pc, #16]	@ (800389c <SysTick_Config+0x40>)
 800388c:	2207      	movs	r2, #7
 800388e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	e000e010 	.word	0xe000e010

080038a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ff29 	bl	8003700 <__NVIC_SetPriorityGrouping>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038c8:	f7ff ff3e 	bl	8003748 <__NVIC_GetPriorityGrouping>
 80038cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	6978      	ldr	r0, [r7, #20]
 80038d4:	f7ff ff8e 	bl	80037f4 <NVIC_EncodePriority>
 80038d8:	4602      	mov	r2, r0
 80038da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff5d 	bl	80037a0 <__NVIC_SetPriority>
}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff31 	bl	8003764 <__NVIC_EnableIRQ>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffa2 	bl	800385c <SysTick_Config>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e098      	b.n	8003a68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a74 <HAL_DMA_Init+0x150>)
 800393e:	429a      	cmp	r2, r3
 8003940:	d80f      	bhi.n	8003962 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4b4b      	ldr	r3, [pc, #300]	@ (8003a78 <HAL_DMA_Init+0x154>)
 800394a:	4413      	add	r3, r2
 800394c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a7c <HAL_DMA_Init+0x158>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a48      	ldr	r2, [pc, #288]	@ (8003a80 <HAL_DMA_Init+0x15c>)
 800395e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003960:	e00e      	b.n	8003980 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b46      	ldr	r3, [pc, #280]	@ (8003a84 <HAL_DMA_Init+0x160>)
 800396a:	4413      	add	r3, r2
 800396c:	4a43      	ldr	r2, [pc, #268]	@ (8003a7c <HAL_DMA_Init+0x158>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a42      	ldr	r2, [pc, #264]	@ (8003a88 <HAL_DMA_Init+0x164>)
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039da:	d039      	beq.n	8003a50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	4a27      	ldr	r2, [pc, #156]	@ (8003a80 <HAL_DMA_Init+0x15c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d11a      	bne.n	8003a1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039e6:	4b29      	ldr	r3, [pc, #164]	@ (8003a8c <HAL_DMA_Init+0x168>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	f003 031c 	and.w	r3, r3, #28
 80039f2:	210f      	movs	r1, #15
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4924      	ldr	r1, [pc, #144]	@ (8003a8c <HAL_DMA_Init+0x168>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a00:	4b22      	ldr	r3, [pc, #136]	@ (8003a8c <HAL_DMA_Init+0x168>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0c:	f003 031c 	and.w	r3, r3, #28
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	491d      	ldr	r1, [pc, #116]	@ (8003a8c <HAL_DMA_Init+0x168>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
 8003a1a:	e019      	b.n	8003a50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a90 <HAL_DMA_Init+0x16c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a24:	f003 031c 	and.w	r3, r3, #28
 8003a28:	210f      	movs	r1, #15
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4917      	ldr	r1, [pc, #92]	@ (8003a90 <HAL_DMA_Init+0x16c>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a36:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_DMA_Init+0x16c>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f003 031c 	and.w	r3, r3, #28
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	4911      	ldr	r1, [pc, #68]	@ (8003a90 <HAL_DMA_Init+0x16c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40020407 	.word	0x40020407
 8003a78:	bffdfff8 	.word	0xbffdfff8
 8003a7c:	cccccccd 	.word	0xcccccccd
 8003a80:	40020000 	.word	0x40020000
 8003a84:	bffdfbf8 	.word	0xbffdfbf8
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	400200a8 	.word	0x400200a8
 8003a90:	400204a8 	.word	0x400204a8

08003a94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e072      	b.n	8003b8c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_DMA_DeInit+0x104>)
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d80f      	bhi.n	8003ae2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_DMA_DeInit+0x108>)
 8003aca:	4413      	add	r3, r2
 8003acc:	4a34      	ldr	r2, [pc, #208]	@ (8003ba0 <HAL_DMA_DeInit+0x10c>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	009a      	lsls	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a31      	ldr	r2, [pc, #196]	@ (8003ba4 <HAL_DMA_DeInit+0x110>)
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ae0:	e00e      	b.n	8003b00 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba8 <HAL_DMA_DeInit+0x114>)
 8003aea:	4413      	add	r3, r2
 8003aec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <HAL_DMA_DeInit+0x10c>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2b      	ldr	r2, [pc, #172]	@ (8003bac <HAL_DMA_DeInit+0x118>)
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f003 021c 	and.w	r2, r3, #28
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2101      	movs	r1, #1
 8003b16:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	4a20      	ldr	r2, [pc, #128]	@ (8003ba4 <HAL_DMA_DeInit+0x110>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10d      	bne.n	8003b42 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b26:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <HAL_DMA_DeInit+0x11c>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f003 031c 	and.w	r3, r3, #28
 8003b32:	210f      	movs	r1, #15
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	491d      	ldr	r1, [pc, #116]	@ (8003bb0 <HAL_DMA_DeInit+0x11c>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
 8003b40:	e00c      	b.n	8003b5c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b42:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb4 <HAL_DMA_DeInit+0x120>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f003 031c 	and.w	r3, r3, #28
 8003b4e:	210f      	movs	r1, #15
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	4917      	ldr	r1, [pc, #92]	@ (8003bb4 <HAL_DMA_DeInit+0x120>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40020407 	.word	0x40020407
 8003b9c:	bffdfff8 	.word	0xbffdfff8
 8003ba0:	cccccccd 	.word	0xcccccccd
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	bffdfbf8 	.word	0xbffdfbf8
 8003bac:	40020400 	.word	0x40020400
 8003bb0:	400200a8 	.word	0x400200a8
 8003bb4:	400204a8 	.word	0x400204a8

08003bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_DMA_Start_IT+0x20>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e04b      	b.n	8003c70 <HAL_DMA_Start_IT+0xb8>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d13a      	bne.n	8003c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f95f 	bl	8003ed4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 020e 	orr.w	r2, r2, #14
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e00f      	b.n	8003c50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
 8003c3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 020a 	orr.w	r2, r2, #10
 8003c4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e005      	b.n	8003c6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d008      	beq.n	8003ca2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2204      	movs	r2, #4
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e022      	b.n	8003ce8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020e 	bic.w	r2, r2, #14
 8003cb0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	f003 021c 	and.w	r2, r3, #28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d005      	beq.n	8003d18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e029      	b.n	8003d6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 020e 	bic.w	r2, r2, #14
 8003d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f003 021c 	and.w	r2, r3, #28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
    }
  }
  return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	f003 031c 	and.w	r3, r3, #28
 8003d96:	2204      	movs	r2, #4
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d026      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x7a>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d021      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f003 021c 	and.w	r2, r3, #28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d071      	beq.n	8003eca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dee:	e06c      	b.n	8003eca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	f003 031c 	and.w	r3, r3, #28
 8003df8:	2202      	movs	r2, #2
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d02e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xec>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d029      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 020a 	bic.w	r2, r2, #10
 8003e2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e38:	f003 021c 	and.w	r2, r3, #28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	2102      	movs	r1, #2
 8003e42:	fa01 f202 	lsl.w	r2, r1, r2
 8003e46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d038      	beq.n	8003eca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e60:	e033      	b.n	8003eca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	f003 031c 	and.w	r3, r3, #28
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02a      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x156>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d025      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 020e 	bic.w	r2, r2, #14
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e94:	f003 021c 	and.w	r2, r3, #28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
}
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f003 021c 	and.w	r2, r3, #28
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d108      	bne.n	8003f18 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f16:	e007      	b.n	8003f28 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f42:	e166      	b.n	8004212 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8158 	beq.w	800420c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d005      	beq.n	8003f74 <HAL_GPIO_Init+0x40>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d130      	bne.n	8003fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003faa:	2201      	movs	r2, #1
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	f003 0201 	and.w	r2, r3, #1
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d017      	beq.n	8004012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d123      	bne.n	8004066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	08da      	lsrs	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3208      	adds	r2, #8
 8004026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	220f      	movs	r2, #15
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	08da      	lsrs	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3208      	adds	r2, #8
 8004060:	6939      	ldr	r1, [r7, #16]
 8004062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	2203      	movs	r2, #3
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 0203 	and.w	r2, r3, #3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80b2 	beq.w	800420c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a8:	4b61      	ldr	r3, [pc, #388]	@ (8004230 <HAL_GPIO_Init+0x2fc>)
 80040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ac:	4a60      	ldr	r2, [pc, #384]	@ (8004230 <HAL_GPIO_Init+0x2fc>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80040b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004230 <HAL_GPIO_Init+0x2fc>)
 80040b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040c0:	4a5c      	ldr	r2, [pc, #368]	@ (8004234 <HAL_GPIO_Init+0x300>)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040ea:	d02b      	beq.n	8004144 <HAL_GPIO_Init+0x210>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a52      	ldr	r2, [pc, #328]	@ (8004238 <HAL_GPIO_Init+0x304>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d025      	beq.n	8004140 <HAL_GPIO_Init+0x20c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a51      	ldr	r2, [pc, #324]	@ (800423c <HAL_GPIO_Init+0x308>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01f      	beq.n	800413c <HAL_GPIO_Init+0x208>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a50      	ldr	r2, [pc, #320]	@ (8004240 <HAL_GPIO_Init+0x30c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d019      	beq.n	8004138 <HAL_GPIO_Init+0x204>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a4f      	ldr	r2, [pc, #316]	@ (8004244 <HAL_GPIO_Init+0x310>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d013      	beq.n	8004134 <HAL_GPIO_Init+0x200>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a4e      	ldr	r2, [pc, #312]	@ (8004248 <HAL_GPIO_Init+0x314>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00d      	beq.n	8004130 <HAL_GPIO_Init+0x1fc>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a4d      	ldr	r2, [pc, #308]	@ (800424c <HAL_GPIO_Init+0x318>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <HAL_GPIO_Init+0x1f8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a4c      	ldr	r2, [pc, #304]	@ (8004250 <HAL_GPIO_Init+0x31c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_GPIO_Init+0x1f4>
 8004124:	2307      	movs	r3, #7
 8004126:	e00e      	b.n	8004146 <HAL_GPIO_Init+0x212>
 8004128:	2308      	movs	r3, #8
 800412a:	e00c      	b.n	8004146 <HAL_GPIO_Init+0x212>
 800412c:	2306      	movs	r3, #6
 800412e:	e00a      	b.n	8004146 <HAL_GPIO_Init+0x212>
 8004130:	2305      	movs	r3, #5
 8004132:	e008      	b.n	8004146 <HAL_GPIO_Init+0x212>
 8004134:	2304      	movs	r3, #4
 8004136:	e006      	b.n	8004146 <HAL_GPIO_Init+0x212>
 8004138:	2303      	movs	r3, #3
 800413a:	e004      	b.n	8004146 <HAL_GPIO_Init+0x212>
 800413c:	2302      	movs	r3, #2
 800413e:	e002      	b.n	8004146 <HAL_GPIO_Init+0x212>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <HAL_GPIO_Init+0x212>
 8004144:	2300      	movs	r3, #0
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	f002 0203 	and.w	r2, r2, #3
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	4093      	lsls	r3, r2
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004156:	4937      	ldr	r1, [pc, #220]	@ (8004234 <HAL_GPIO_Init+0x300>)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	3302      	adds	r3, #2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004164:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_GPIO_Init+0x320>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43db      	mvns	r3, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4013      	ands	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004188:	4a32      	ldr	r2, [pc, #200]	@ (8004254 <HAL_GPIO_Init+0x320>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800418e:	4b31      	ldr	r3, [pc, #196]	@ (8004254 <HAL_GPIO_Init+0x320>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	43db      	mvns	r3, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4013      	ands	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041b2:	4a28      	ldr	r2, [pc, #160]	@ (8004254 <HAL_GPIO_Init+0x320>)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041b8:	4b26      	ldr	r3, [pc, #152]	@ (8004254 <HAL_GPIO_Init+0x320>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004254 <HAL_GPIO_Init+0x320>)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004254 <HAL_GPIO_Init+0x320>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004206:	4a13      	ldr	r2, [pc, #76]	@ (8004254 <HAL_GPIO_Init+0x320>)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3301      	adds	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f ae91 	bne.w	8003f44 <HAL_GPIO_Init+0x10>
  }
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40021000 	.word	0x40021000
 8004234:	40010000 	.word	0x40010000
 8004238:	48000400 	.word	0x48000400
 800423c:	48000800 	.word	0x48000800
 8004240:	48000c00 	.word	0x48000c00
 8004244:	48001000 	.word	0x48001000
 8004248:	48001400 	.word	0x48001400
 800424c:	48001800 	.word	0x48001800
 8004250:	48001c00 	.word	0x48001c00
 8004254:	40010400 	.word	0x40010400

08004258 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004266:	e0c9      	b.n	80043fc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004268:	2201      	movs	r2, #1
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80bc 	beq.w	80043f6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800427e:	4a66      	ldr	r2, [pc, #408]	@ (8004418 <HAL_GPIO_DeInit+0x1c0>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3302      	adds	r3, #2
 8004286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	220f      	movs	r2, #15
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042a6:	d02b      	beq.n	8004300 <HAL_GPIO_DeInit+0xa8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a5c      	ldr	r2, [pc, #368]	@ (800441c <HAL_GPIO_DeInit+0x1c4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d025      	beq.n	80042fc <HAL_GPIO_DeInit+0xa4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004420 <HAL_GPIO_DeInit+0x1c8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d01f      	beq.n	80042f8 <HAL_GPIO_DeInit+0xa0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004424 <HAL_GPIO_DeInit+0x1cc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d019      	beq.n	80042f4 <HAL_GPIO_DeInit+0x9c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a59      	ldr	r2, [pc, #356]	@ (8004428 <HAL_GPIO_DeInit+0x1d0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_GPIO_DeInit+0x98>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a58      	ldr	r2, [pc, #352]	@ (800442c <HAL_GPIO_DeInit+0x1d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00d      	beq.n	80042ec <HAL_GPIO_DeInit+0x94>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a57      	ldr	r2, [pc, #348]	@ (8004430 <HAL_GPIO_DeInit+0x1d8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <HAL_GPIO_DeInit+0x90>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a56      	ldr	r2, [pc, #344]	@ (8004434 <HAL_GPIO_DeInit+0x1dc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_GPIO_DeInit+0x8c>
 80042e0:	2307      	movs	r3, #7
 80042e2:	e00e      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042e4:	2308      	movs	r3, #8
 80042e6:	e00c      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042e8:	2306      	movs	r3, #6
 80042ea:	e00a      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042ec:	2305      	movs	r3, #5
 80042ee:	e008      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042f0:	2304      	movs	r3, #4
 80042f2:	e006      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042f4:	2303      	movs	r3, #3
 80042f6:	e004      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e002      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_GPIO_DeInit+0xaa>
 8004300:	2300      	movs	r3, #0
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	f002 0203 	and.w	r2, r2, #3
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	4093      	lsls	r3, r2
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	429a      	cmp	r2, r3
 8004310:	d132      	bne.n	8004378 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004312:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	43db      	mvns	r3, r3
 800431a:	4947      	ldr	r1, [pc, #284]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 800431c:	4013      	ands	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004320:	4b45      	ldr	r3, [pc, #276]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	43db      	mvns	r3, r3
 8004328:	4943      	ldr	r1, [pc, #268]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 800432a:	4013      	ands	r3, r2
 800432c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800432e:	4b42      	ldr	r3, [pc, #264]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	4940      	ldr	r1, [pc, #256]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 8004338:	4013      	ands	r3, r2
 800433a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800433c:	4b3e      	ldr	r3, [pc, #248]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	43db      	mvns	r3, r3
 8004344:	493c      	ldr	r1, [pc, #240]	@ (8004438 <HAL_GPIO_DeInit+0x1e0>)
 8004346:	4013      	ands	r3, r2
 8004348:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800435a:	4a2f      	ldr	r2, [pc, #188]	@ (8004418 <HAL_GPIO_DeInit+0x1c0>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	43da      	mvns	r2, r3
 800436a:	482b      	ldr	r0, [pc, #172]	@ (8004418 <HAL_GPIO_DeInit+0x1c0>)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	400a      	ands	r2, r1
 8004372:	3302      	adds	r3, #2
 8004374:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2103      	movs	r1, #3
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	08da      	lsrs	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3208      	adds	r2, #8
 8004394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	08d2      	lsrs	r2, r2, #3
 80043ac:	4019      	ands	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2103      	movs	r1, #3
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	2101      	movs	r1, #1
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	401a      	ands	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2103      	movs	r1, #3
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	401a      	ands	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f af2f 	bne.w	8004268 <HAL_GPIO_DeInit+0x10>
  }
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40010000 	.word	0x40010000
 800441c:	48000400 	.word	0x48000400
 8004420:	48000800 	.word	0x48000800
 8004424:	48000c00 	.word	0x48000c00
 8004428:	48001000 	.word	0x48001000
 800442c:	48001400 	.word	0x48001400
 8004430:	48001800 	.word	0x48001800
 8004434:	48001c00 	.word	0x48001c00
 8004438:	40010400 	.word	0x40010400

0800443c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
 8004448:	4613      	mov	r3, r2
 800444a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004458:	e002      	b.n	8004460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800445a:	887a      	ldrh	r2, [r7, #2]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	041a      	lsls	r2, r3, #16
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	43d9      	mvns	r1, r3
 800448a:	887b      	ldrh	r3, [r7, #2]
 800448c:	400b      	ands	r3, r1
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000

080044bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ca:	d130      	bne.n	800452e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044cc:	4b23      	ldr	r3, [pc, #140]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d8:	d038      	beq.n	800454c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044da:	4b20      	ldr	r3, [pc, #128]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044e2:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2232      	movs	r2, #50	@ 0x32
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0c9b      	lsrs	r3, r3, #18
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004500:	e002      	b.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b01      	subs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004508:	4b14      	ldr	r3, [pc, #80]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004514:	d102      	bne.n	800451c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f2      	bne.n	8004502 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800451c:	4b0f      	ldr	r3, [pc, #60]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004528:	d110      	bne.n	800454c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e00f      	b.n	800454e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453a:	d007      	beq.n	800454c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004544:	4a05      	ldr	r2, [pc, #20]	@ (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800454a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40007000 	.word	0x40007000
 8004560:	20000020 	.word	0x20000020
 8004564:	431bde83 	.word	0x431bde83

08004568 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_PWREx_EnableVddIO2+0x1c>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a04      	ldr	r2, [pc, #16]	@ (8004584 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004576:	6053      	str	r3, [r2, #4]
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40007000 	.word	0x40007000

08004588 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f000 bc08 	b.w	8004dac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459c:	4b96      	ldr	r3, [pc, #600]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a6:	4b94      	ldr	r3, [pc, #592]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80e4 	beq.w	8004786 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4c>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	f040 808b 	bne.w	80046e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	f040 8087 	bne.w	80046e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045d4:	4b88      	ldr	r3, [pc, #544]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_OscConfig+0x64>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e3df      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	4b81      	ldr	r3, [pc, #516]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_RCC_OscConfig+0x7e>
 80045fc:	4b7e      	ldr	r3, [pc, #504]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004604:	e005      	b.n	8004612 <HAL_RCC_OscConfig+0x8a>
 8004606:	4b7c      	ldr	r3, [pc, #496]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004612:	4293      	cmp	r3, r2
 8004614:	d223      	bcs.n	800465e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fd92 	bl	8005144 <RCC_SetFlashLatencyFromMSIRange>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e3c0      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800462a:	4b73      	ldr	r3, [pc, #460]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a72      	ldr	r2, [pc, #456]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004630:	f043 0308 	orr.w	r3, r3, #8
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b70      	ldr	r3, [pc, #448]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	496d      	ldr	r1, [pc, #436]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004648:	4b6b      	ldr	r3, [pc, #428]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	4968      	ldr	r1, [pc, #416]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
 800465c:	e025      	b.n	80046aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465e:	4b66      	ldr	r3, [pc, #408]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a65      	ldr	r2, [pc, #404]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b63      	ldr	r3, [pc, #396]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4960      	ldr	r1, [pc, #384]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800467c:	4b5e      	ldr	r3, [pc, #376]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	495b      	ldr	r1, [pc, #364]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fd52 	bl	8005144 <RCC_SetFlashLatencyFromMSIRange>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e380      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046aa:	f000 fc87 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b51      	ldr	r3, [pc, #324]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4950      	ldr	r1, [pc, #320]	@ (80047fc <HAL_RCC_OscConfig+0x274>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004800 <HAL_RCC_OscConfig+0x278>)
 80046c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004804 <HAL_RCC_OscConfig+0x27c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe ff96 	bl	8003600 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d052      	beq.n	8004784 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	e364      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d032      	beq.n	8004750 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046ea:	4b43      	ldr	r3, [pc, #268]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a42      	ldr	r2, [pc, #264]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f6:	f7fe ffd3 	bl	80036a0 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046fe:	f7fe ffcf 	bl	80036a0 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e34d      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004710:	4b39      	ldr	r3, [pc, #228]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800471c:	4b36      	ldr	r3, [pc, #216]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a35      	ldr	r2, [pc, #212]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004722:	f043 0308 	orr.w	r3, r3, #8
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b33      	ldr	r3, [pc, #204]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4930      	ldr	r1, [pc, #192]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800473a:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	492b      	ldr	r1, [pc, #172]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
 800474e:	e01a      	b.n	8004786 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004750:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800475c:	f7fe ffa0 	bl	80036a0 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004764:	f7fe ff9c 	bl	80036a0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e31a      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004776:	4b20      	ldr	r3, [pc, #128]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x1dc>
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004784:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d073      	beq.n	800487a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x21c>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d10e      	bne.n	80047bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d10b      	bne.n	80047bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d063      	beq.n	8004878 <HAL_RCC_OscConfig+0x2f0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d15f      	bne.n	8004878 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e2f7      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCC_OscConfig+0x24c>
 80047c6:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e025      	b.n	8004820 <HAL_RCC_OscConfig+0x298>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047dc:	d114      	bne.n	8004808 <HAL_RCC_OscConfig+0x280>
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b03      	ldr	r3, [pc, #12]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a02      	ldr	r2, [pc, #8]	@ (80047f8 <HAL_RCC_OscConfig+0x270>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e013      	b.n	8004820 <HAL_RCC_OscConfig+0x298>
 80047f8:	40021000 	.word	0x40021000
 80047fc:	08009bf4 	.word	0x08009bf4
 8004800:	20000020 	.word	0x20000020
 8004804:	20000024 	.word	0x20000024
 8004808:	4ba0      	ldr	r3, [pc, #640]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a9f      	ldr	r2, [pc, #636]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800480e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b9d      	ldr	r3, [pc, #628]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a9c      	ldr	r2, [pc, #624]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800481a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800481e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe ff3a 	bl	80036a0 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fe ff36 	bl	80036a0 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	@ 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e2b4      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004842:	4b92      	ldr	r3, [pc, #584]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x2a8>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe ff26 	bl	80036a0 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fe ff22 	bl	80036a0 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	@ 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e2a0      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800486a:	4b88      	ldr	r3, [pc, #544]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x2d0>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d060      	beq.n	8004948 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d005      	beq.n	8004898 <HAL_RCC_OscConfig+0x310>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d119      	bne.n	80048c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d116      	bne.n	80048c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004898:	4b7c      	ldr	r3, [pc, #496]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_OscConfig+0x328>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e27d      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b76      	ldr	r3, [pc, #472]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	4973      	ldr	r1, [pc, #460]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c4:	e040      	b.n	8004948 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d023      	beq.n	8004916 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ce:	4b6f      	ldr	r3, [pc, #444]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6e      	ldr	r2, [pc, #440]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fe fee1 	bl	80036a0 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e2:	f7fe fedd 	bl	80036a0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e25b      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f4:	4b65      	ldr	r3, [pc, #404]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b62      	ldr	r3, [pc, #392]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	495f      	ldr	r1, [pc, #380]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
 8004914:	e018      	b.n	8004948 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004916:	4b5d      	ldr	r3, [pc, #372]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a5c      	ldr	r2, [pc, #368]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800491c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004922:	f7fe febd 	bl	80036a0 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492a:	f7fe feb9 	bl	80036a0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e237      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800493c:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d03c      	beq.n	80049ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01c      	beq.n	8004996 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495c:	4b4b      	ldr	r3, [pc, #300]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004962:	4a4a      	ldr	r2, [pc, #296]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe fe98 	bl	80036a0 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004974:	f7fe fe94 	bl	80036a0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e212      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004986:	4b41      	ldr	r3, [pc, #260]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ef      	beq.n	8004974 <HAL_RCC_OscConfig+0x3ec>
 8004994:	e01b      	b.n	80049ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004996:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800499c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fe fe7b 	bl	80036a0 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ae:	f7fe fe77 	bl	80036a0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1f5      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c0:	4b32      	ldr	r3, [pc, #200]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80049c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ef      	bne.n	80049ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a6 	beq.w	8004b28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049e0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ec:	4b27      	ldr	r3, [pc, #156]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f0:	4a26      	ldr	r2, [pc, #152]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f8:	4b24      	ldr	r3, [pc, #144]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	4b21      	ldr	r3, [pc, #132]	@ (8004a90 <HAL_RCC_OscConfig+0x508>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d118      	bne.n	8004a46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a14:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <HAL_RCC_OscConfig+0x508>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	@ (8004a90 <HAL_RCC_OscConfig+0x508>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a20:	f7fe fe3e 	bl	80036a0 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fe fe3a 	bl	80036a0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1b8      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3a:	4b15      	ldr	r3, [pc, #84]	@ (8004a90 <HAL_RCC_OscConfig+0x508>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d108      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4d8>
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a54:	4a0d      	ldr	r2, [pc, #52]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a5e:	e029      	b.n	8004ab4 <HAL_RCC_OscConfig+0x52c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d115      	bne.n	8004a94 <HAL_RCC_OscConfig+0x50c>
 8004a68:	4b08      	ldr	r3, [pc, #32]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	4a07      	ldr	r2, [pc, #28]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a78:	4b04      	ldr	r3, [pc, #16]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	4a03      	ldr	r2, [pc, #12]	@ (8004a8c <HAL_RCC_OscConfig+0x504>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a88:	e014      	b.n	8004ab4 <HAL_RCC_OscConfig+0x52c>
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
 8004a94:	4b9d      	ldr	r3, [pc, #628]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9a:	4a9c      	ldr	r2, [pc, #624]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa4:	4b99      	ldr	r3, [pc, #612]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aaa:	4a98      	ldr	r2, [pc, #608]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d016      	beq.n	8004aea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fe fdf0 	bl	80036a0 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fe fdec 	bl	80036a0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e168      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ada:	4b8c      	ldr	r3, [pc, #560]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ed      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x53c>
 8004ae8:	e015      	b.n	8004b16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aea:	f7fe fdd9 	bl	80036a0 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004af0:	e00a      	b.n	8004b08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fe fdd5 	bl	80036a0 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e151      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b08:	4b80      	ldr	r3, [pc, #512]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ed      	bne.n	8004af2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7ffb      	ldrb	r3, [r7, #31]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	4a7a      	ldr	r2, [pc, #488]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d03c      	beq.n	8004bae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01c      	beq.n	8004b76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b3c:	4b73      	ldr	r3, [pc, #460]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b42:	4a72      	ldr	r2, [pc, #456]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fe fda8 	bl	80036a0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b54:	f7fe fda4 	bl	80036a0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e122      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b66:	4b69      	ldr	r3, [pc, #420]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ef      	beq.n	8004b54 <HAL_RCC_OscConfig+0x5cc>
 8004b74:	e01b      	b.n	8004bae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b76:	4b65      	ldr	r3, [pc, #404]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b7c:	4a63      	ldr	r2, [pc, #396]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fe fd8b 	bl	80036a0 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8e:	f7fe fd87 	bl	80036a0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e105      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ef      	bne.n	8004b8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80f9 	beq.w	8004daa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f040 80cf 	bne.w	8004d60 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bc2:	4b52      	ldr	r3, [pc, #328]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d12c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	3b01      	subs	r3, #1
 8004be2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d123      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d11b      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d113      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	3b01      	subs	r3, #1
 8004c16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d071      	beq.n	8004d14 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d068      	beq.n	8004d08 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c36:	4b35      	ldr	r3, [pc, #212]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d105      	bne.n	8004c4e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c42:	4b32      	ldr	r3, [pc, #200]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0ac      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c52:	4b2e      	ldr	r3, [pc, #184]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2d      	ldr	r2, [pc, #180]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004c58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c5e:	f7fe fd1f 	bl	80036a0 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fe fd1b 	bl	80036a0 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e099      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	4b24      	ldr	r3, [pc, #144]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c84:	4b21      	ldr	r3, [pc, #132]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <HAL_RCC_OscConfig+0x788>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0112      	lsls	r2, r2, #4
 8004c98:	4311      	orrs	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c9e:	0212      	lsls	r2, r2, #8
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ca6:	0852      	lsrs	r2, r2, #1
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0552      	lsls	r2, r2, #21
 8004cac:	4311      	orrs	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cb2:	0852      	lsrs	r2, r2, #1
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	0652      	lsls	r2, r2, #25
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cbe:	06d2      	lsls	r2, r2, #27
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	4912      	ldr	r1, [pc, #72]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cc8:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ce0:	f7fe fcde 	bl	80036a0 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fe fcda 	bl	80036a0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e058      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cfa:	4b04      	ldr	r3, [pc, #16]	@ (8004d0c <HAL_RCC_OscConfig+0x784>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d06:	e050      	b.n	8004daa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e04f      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d14:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d144      	bne.n	8004daa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d20:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a23      	ldr	r2, [pc, #140]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d2c:	4b21      	ldr	r3, [pc, #132]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a20      	ldr	r2, [pc, #128]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d38:	f7fe fcb2 	bl	80036a0 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe fcae 	bl	80036a0 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e02c      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x7b8>
 8004d5e:	e024      	b.n	8004daa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d01f      	beq.n	8004da6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a12      	ldr	r2, [pc, #72]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fe fc95 	bl	80036a0 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fe fc91 	bl	80036a0 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e00f      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d98:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	4905      	ldr	r1, [pc, #20]	@ (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d9e:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_RCC_OscConfig+0x830>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	60cb      	str	r3, [r1, #12]
 8004da4:	e001      	b.n	8004daa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	feeefffc 	.word	0xfeeefffc

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0e7      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b75      	ldr	r3, [pc, #468]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d910      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b72      	ldr	r3, [pc, #456]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	4970      	ldr	r1, [pc, #448]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0cf      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	4b66      	ldr	r3, [pc, #408]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d908      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b63      	ldr	r3, [pc, #396]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4960      	ldr	r1, [pc, #384]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04c      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e42:	4b5a      	ldr	r3, [pc, #360]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d121      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e0a6      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5a:	4b54      	ldr	r3, [pc, #336]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d115      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e09a      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e72:	4b4e      	ldr	r3, [pc, #312]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e08e      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e82:	4b4a      	ldr	r3, [pc, #296]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e086      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e92:	4b46      	ldr	r3, [pc, #280]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 0203 	bic.w	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4943      	ldr	r1, [pc, #268]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea4:	f7fe fbfc 	bl	80036a0 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eac:	f7fe fbf8 	bl	80036a0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e06e      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 020c 	and.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d1eb      	bne.n	8004eac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	4b31      	ldr	r3, [pc, #196]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d208      	bcs.n	8004f02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	492b      	ldr	r1, [pc, #172]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f02:	4b29      	ldr	r3, [pc, #164]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d210      	bcs.n	8004f32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 0207 	bic.w	r2, r3, #7
 8004f18:	4923      	ldr	r1, [pc, #140]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f20:	4b21      	ldr	r3, [pc, #132]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e036      	b.n	8004fa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4918      	ldr	r1, [pc, #96]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f5c:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4910      	ldr	r1, [pc, #64]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f70:	f000 f824 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <HAL_RCC_ClockConfig+0x1f0>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	490b      	ldr	r1, [pc, #44]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1f4>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8c:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f90:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1fc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe fb33 	bl	8003600 <HAL_InitTick>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40022000 	.word	0x40022000
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	08009bf4 	.word	0x08009bf4
 8004fb4:	20000020 	.word	0x20000020
 8004fb8:	20000024 	.word	0x20000024

08004fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	@ 0x24
 8004fc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fca:	4b3e      	ldr	r3, [pc, #248]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d121      	bne.n	800502e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d11e      	bne.n	800502e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ff0:	4b34      	ldr	r3, [pc, #208]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ffc:	4b31      	ldr	r3, [pc, #196]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e005      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800500c:	4b2d      	ldr	r3, [pc, #180]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005018:	4a2b      	ldr	r2, [pc, #172]	@ (80050c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005020:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10d      	bne.n	8005044 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800502c:	e00a      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b04      	cmp	r3, #4
 8005032:	d102      	bne.n	800503a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005034:	4b25      	ldr	r3, [pc, #148]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x110>)
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e004      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d101      	bne.n	8005044 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005040:	4b23      	ldr	r3, [pc, #140]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005042:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b0c      	cmp	r3, #12
 8005048:	d134      	bne.n	80050b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800504a:	4b1e      	ldr	r3, [pc, #120]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d003      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0xa6>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d003      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0xac>
 8005060:	e005      	b.n	800506e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005062:	4b1a      	ldr	r3, [pc, #104]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x110>)
 8005064:	617b      	str	r3, [r7, #20]
      break;
 8005066:	e005      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005068:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800506a:	617b      	str	r3, [r7, #20]
      break;
 800506c:	e002      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	617b      	str	r3, [r7, #20]
      break;
 8005072:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005074:	4b13      	ldr	r3, [pc, #76]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	3301      	adds	r3, #1
 8005080:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005082:	4b10      	ldr	r3, [pc, #64]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	fb03 f202 	mul.w	r2, r3, r2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800509a:	4b0a      	ldr	r3, [pc, #40]	@ (80050c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	0e5b      	lsrs	r3, r3, #25
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	3301      	adds	r3, #1
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050b4:	69bb      	ldr	r3, [r7, #24]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3724      	adds	r7, #36	@ 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	08009c0c 	.word	0x08009c0c
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	007a1200 	.word	0x007a1200

080050d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d8:	4b03      	ldr	r3, [pc, #12]	@ (80050e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000020 	.word	0x20000020

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050f0:	f7ff fff0 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4904      	ldr	r1, [pc, #16]	@ (8005114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40021000 	.word	0x40021000
 8005114:	08009c04 	.word	0x08009c04

08005118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800511c:	f7ff ffda 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b06      	ldr	r3, [pc, #24]	@ (800513c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0adb      	lsrs	r3, r3, #11
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	4904      	ldr	r1, [pc, #16]	@ (8005140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	08009c04 	.word	0x08009c04

08005144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800515c:	f7ff f9a0 	bl	80044a0 <HAL_PWREx_GetVoltageRange>
 8005160:	6178      	str	r0, [r7, #20]
 8005162:	e014      	b.n	800518e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005170:	4b22      	ldr	r3, [pc, #136]	@ (80051fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800517c:	f7ff f990 	bl	80044a0 <HAL_PWREx_GetVoltageRange>
 8005180:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005182:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800518c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005194:	d10b      	bne.n	80051ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b80      	cmp	r3, #128	@ 0x80
 800519a:	d919      	bls.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2ba0      	cmp	r3, #160	@ 0xa0
 80051a0:	d902      	bls.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051a2:	2302      	movs	r3, #2
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e013      	b.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a8:	2301      	movs	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e010      	b.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b80      	cmp	r3, #128	@ 0x80
 80051b2:	d902      	bls.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051b4:	2303      	movs	r3, #3
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e00a      	b.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b80      	cmp	r3, #128	@ 0x80
 80051be:	d102      	bne.n	80051c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051c0:	2302      	movs	r3, #2
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e004      	b.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b70      	cmp	r3, #112	@ 0x70
 80051ca:	d101      	bne.n	80051d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051cc:	2301      	movs	r3, #1
 80051ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 0207 	bic.w	r2, r3, #7
 80051d8:	4909      	ldr	r1, [pc, #36]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000
 8005200:	40022000 	.word	0x40022000

08005204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800520c:	2300      	movs	r3, #0
 800520e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005210:	2300      	movs	r3, #0
 8005212:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521c:	2b00      	cmp	r3, #0
 800521e:	d041      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005224:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005228:	d02a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800522a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800522e:	d824      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005230:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005234:	d008      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005236:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800523a:	d81e      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005244:	d010      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005246:	e018      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005248:	4b86      	ldr	r3, [pc, #536]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a85      	ldr	r2, [pc, #532]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005252:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005254:	e015      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 facd 	bl	80057fc <RCCEx_PLLSAI1_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005266:	e00c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3320      	adds	r3, #32
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fbb6 	bl	80059e0 <RCCEx_PLLSAI2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005278:	e003      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	74fb      	strb	r3, [r7, #19]
      break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005288:	4b76      	ldr	r3, [pc, #472]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005296:	4973      	ldr	r1, [pc, #460]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7cfb      	ldrb	r3, [r7, #19]
 80052a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d041      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052b8:	d02a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80052ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052be:	d824      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052c4:	d008      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ca:	d81e      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80052d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052d4:	d010      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052d6:	e018      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d8:	4b62      	ldr	r3, [pc, #392]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a61      	ldr	r2, [pc, #388]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052e4:	e015      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fa85 	bl	80057fc <RCCEx_PLLSAI1_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052f6:	e00c      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3320      	adds	r3, #32
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb6e 	bl	80059e0 <RCCEx_PLLSAI2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005308:	e003      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	74fb      	strb	r3, [r7, #19]
      break;
 800530e:	e000      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10b      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005318:	4b52      	ldr	r3, [pc, #328]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005326:	494f      	ldr	r1, [pc, #316]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80a0 	beq.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005346:	4b47      	ldr	r3, [pc, #284]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535c:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005360:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005366:	6593      	str	r3, [r2, #88]	@ 0x58
 8005368:	4b3e      	ldr	r3, [pc, #248]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005374:	2301      	movs	r3, #1
 8005376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005378:	4b3b      	ldr	r3, [pc, #236]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3a      	ldr	r2, [pc, #232]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800537e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005384:	f7fe f98c 	bl	80036a0 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800538a:	e009      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538c:	f7fe f988 	bl	80036a0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d902      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	74fb      	strb	r3, [r7, #19]
        break;
 800539e:	e005      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053a0:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ef      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d15c      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d019      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053d0:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053dc:	4b21      	ldr	r3, [pc, #132]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e2:	4a20      	ldr	r2, [pc, #128]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053fc:	4a19      	ldr	r2, [pc, #100]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d016      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540e:	f7fe f947 	bl	80036a0 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005414:	e00b      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fe f943 	bl	80036a0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d902      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	74fb      	strb	r3, [r7, #19]
            break;
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ec      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10c      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005442:	4b08      	ldr	r3, [pc, #32]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	4904      	ldr	r1, [pc, #16]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800545a:	e009      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	74bb      	strb	r3, [r7, #18]
 8005460:	e006      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005470:	7c7b      	ldrb	r3, [r7, #17]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d105      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005476:	4ba6      	ldr	r3, [pc, #664]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547a:	4aa5      	ldr	r2, [pc, #660]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800547c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005480:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800548e:	4ba0      	ldr	r3, [pc, #640]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005494:	f023 0203 	bic.w	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	499c      	ldr	r1, [pc, #624]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054b0:	4b97      	ldr	r3, [pc, #604]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b6:	f023 020c 	bic.w	r2, r3, #12
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054be:	4994      	ldr	r1, [pc, #592]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	498b      	ldr	r1, [pc, #556]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054f4:	4b86      	ldr	r3, [pc, #536]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	4983      	ldr	r1, [pc, #524]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005516:	4b7e      	ldr	r3, [pc, #504]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005524:	497a      	ldr	r1, [pc, #488]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005538:	4b75      	ldr	r3, [pc, #468]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005546:	4972      	ldr	r1, [pc, #456]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800555a:	4b6d      	ldr	r3, [pc, #436]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005560:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005568:	4969      	ldr	r1, [pc, #420]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800557c:	4b64      	ldr	r3, [pc, #400]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005582:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800558a:	4961      	ldr	r1, [pc, #388]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800559e:	4b5c      	ldr	r3, [pc, #368]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ac:	4958      	ldr	r1, [pc, #352]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055c0:	4b53      	ldr	r3, [pc, #332]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ce:	4950      	ldr	r1, [pc, #320]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f0:	4947      	ldr	r1, [pc, #284]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005604:	4b42      	ldr	r3, [pc, #264]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005612:	493f      	ldr	r1, [pc, #252]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d028      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005626:	4b3a      	ldr	r3, [pc, #232]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005634:	4936      	ldr	r1, [pc, #216]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005644:	d106      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005646:	4b32      	ldr	r3, [pc, #200]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	4a31      	ldr	r2, [pc, #196]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800564c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005650:	60d3      	str	r3, [r2, #12]
 8005652:	e011      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005658:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800565c:	d10c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f8c9 	bl	80057fc <RCCEx_PLLSAI1_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d028      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005684:	4b22      	ldr	r3, [pc, #136]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	491f      	ldr	r1, [pc, #124]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056a2:	d106      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a19      	ldr	r2, [pc, #100]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ae:	60d3      	str	r3, [r2, #12]
 80056b0:	e011      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ba:	d10c      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	2101      	movs	r1, #1
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f89a 	bl	80057fc <RCCEx_PLLSAI1_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80056d2:	7cfb      	ldrb	r3, [r7, #19]
 80056d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056f0:	4907      	ldr	r1, [pc, #28]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005700:	d108      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005702:	4b03      	ldr	r3, [pc, #12]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4a02      	ldr	r2, [pc, #8]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005708:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570c:	60d3      	str	r3, [r2, #12]
 800570e:	e013      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005710:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800571c:	d10c      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3304      	adds	r3, #4
 8005722:	2101      	movs	r1, #1
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f869 	bl	80057fc <RCCEx_PLLSAI1_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800572e:	7cfb      	ldrb	r3, [r7, #19]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d02f      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005744:	4b2c      	ldr	r3, [pc, #176]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005752:	4929      	ldr	r1, [pc, #164]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800575e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005762:	d10d      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2102      	movs	r1, #2
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f846 	bl	80057fc <RCCEx_PLLSAI1_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d014      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	74bb      	strb	r3, [r7, #18]
 800577e:	e011      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3320      	adds	r3, #32
 800578e:	2102      	movs	r1, #2
 8005790:	4618      	mov	r0, r3
 8005792:	f000 f925 	bl	80059e0 <RCCEx_PLLSAI2_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057b0:	4b11      	ldr	r3, [pc, #68]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057c0:	490d      	ldr	r1, [pc, #52]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057d4:	4b08      	ldr	r3, [pc, #32]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057e4:	4904      	ldr	r1, [pc, #16]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80057ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000

080057fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800580a:	4b74      	ldr	r3, [pc, #464]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005816:	4b71      	ldr	r3, [pc, #452]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0203 	and.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d10d      	bne.n	8005842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
       ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800582e:	4b6b      	ldr	r3, [pc, #428]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	091b      	lsrs	r3, r3, #4
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
       ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d047      	beq.n	80058d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	e044      	b.n	80058d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d018      	beq.n	8005882 <RCCEx_PLLSAI1_Config+0x86>
 8005850:	2b03      	cmp	r3, #3
 8005852:	d825      	bhi.n	80058a0 <RCCEx_PLLSAI1_Config+0xa4>
 8005854:	2b01      	cmp	r3, #1
 8005856:	d002      	beq.n	800585e <RCCEx_PLLSAI1_Config+0x62>
 8005858:	2b02      	cmp	r3, #2
 800585a:	d009      	beq.n	8005870 <RCCEx_PLLSAI1_Config+0x74>
 800585c:	e020      	b.n	80058a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800585e:	4b5f      	ldr	r3, [pc, #380]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d11d      	bne.n	80058a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586e:	e01a      	b.n	80058a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005870:	4b5a      	ldr	r3, [pc, #360]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005878:	2b00      	cmp	r3, #0
 800587a:	d116      	bne.n	80058aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005880:	e013      	b.n	80058aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005882:	4b56      	ldr	r3, [pc, #344]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10f      	bne.n	80058ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800588e:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800589e:	e006      	b.n	80058ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      break;
 80058a4:	e004      	b.n	80058b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058a6:	bf00      	nop
 80058a8:	e002      	b.n	80058b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10d      	bne.n	80058d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058b6:	4b49      	ldr	r3, [pc, #292]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	430b      	orrs	r3, r1
 80058cc:	4943      	ldr	r1, [pc, #268]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d17c      	bne.n	80059d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058d8:	4b40      	ldr	r3, [pc, #256]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3f      	ldr	r2, [pc, #252]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80058de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e4:	f7fd fedc 	bl	80036a0 <HAL_GetTick>
 80058e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058ea:	e009      	b.n	8005900 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ec:	f7fd fed8 	bl	80036a0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d902      	bls.n	8005900 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	73fb      	strb	r3, [r7, #15]
        break;
 80058fe:	e005      	b.n	800590c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005900:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ef      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d15f      	bne.n	80059d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d110      	bne.n	800593a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005918:	4b30      	ldr	r3, [pc, #192]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005920:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6892      	ldr	r2, [r2, #8]
 8005928:	0211      	lsls	r1, r2, #8
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68d2      	ldr	r2, [r2, #12]
 800592e:	06d2      	lsls	r2, r2, #27
 8005930:	430a      	orrs	r2, r1
 8005932:	492a      	ldr	r1, [pc, #168]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005934:	4313      	orrs	r3, r2
 8005936:	610b      	str	r3, [r1, #16]
 8005938:	e027      	b.n	800598a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d112      	bne.n	8005966 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005940:	4b26      	ldr	r3, [pc, #152]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005948:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6892      	ldr	r2, [r2, #8]
 8005950:	0211      	lsls	r1, r2, #8
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6912      	ldr	r2, [r2, #16]
 8005956:	0852      	lsrs	r2, r2, #1
 8005958:	3a01      	subs	r2, #1
 800595a:	0552      	lsls	r2, r2, #21
 800595c:	430a      	orrs	r2, r1
 800595e:	491f      	ldr	r1, [pc, #124]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005960:	4313      	orrs	r3, r2
 8005962:	610b      	str	r3, [r1, #16]
 8005964:	e011      	b.n	800598a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005966:	4b1d      	ldr	r3, [pc, #116]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800596e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6892      	ldr	r2, [r2, #8]
 8005976:	0211      	lsls	r1, r2, #8
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6952      	ldr	r2, [r2, #20]
 800597c:	0852      	lsrs	r2, r2, #1
 800597e:	3a01      	subs	r2, #1
 8005980:	0652      	lsls	r2, r2, #25
 8005982:	430a      	orrs	r2, r1
 8005984:	4915      	ldr	r1, [pc, #84]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005986:	4313      	orrs	r3, r2
 8005988:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800598a:	4b14      	ldr	r3, [pc, #80]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a13      	ldr	r2, [pc, #76]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005990:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005994:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005996:	f7fd fe83 	bl	80036a0 <HAL_GetTick>
 800599a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800599c:	e009      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800599e:	f7fd fe7f 	bl	80036a0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d902      	bls.n	80059b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	73fb      	strb	r3, [r7, #15]
          break;
 80059b0:	e005      	b.n	80059be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059b2:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0ef      	beq.n	800599e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059c4:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	4903      	ldr	r1, [pc, #12]	@ (80059dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40021000 	.word	0x40021000

080059e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059ee:	4b69      	ldr	r3, [pc, #420]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059fa:	4b66      	ldr	r3, [pc, #408]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0203 	and.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d10d      	bne.n	8005a26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a12:	4b60      	ldr	r3, [pc, #384]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
       ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d047      	beq.n	8005ab6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
 8005a2a:	e044      	b.n	8005ab6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d018      	beq.n	8005a66 <RCCEx_PLLSAI2_Config+0x86>
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d825      	bhi.n	8005a84 <RCCEx_PLLSAI2_Config+0xa4>
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d002      	beq.n	8005a42 <RCCEx_PLLSAI2_Config+0x62>
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d009      	beq.n	8005a54 <RCCEx_PLLSAI2_Config+0x74>
 8005a40:	e020      	b.n	8005a84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a42:	4b54      	ldr	r3, [pc, #336]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11d      	bne.n	8005a8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a52:	e01a      	b.n	8005a8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a54:	4b4f      	ldr	r3, [pc, #316]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d116      	bne.n	8005a8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a64:	e013      	b.n	8005a8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a66:	4b4b      	ldr	r3, [pc, #300]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10f      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a72:	4b48      	ldr	r3, [pc, #288]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a82:	e006      	b.n	8005a92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      break;
 8005a88:	e004      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6819      	ldr	r1, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	4938      	ldr	r1, [pc, #224]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d166      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005abc:	4b35      	ldr	r3, [pc, #212]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a34      	ldr	r2, [pc, #208]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fd fdea 	bl	80036a0 <HAL_GetTick>
 8005acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ace:	e009      	b.n	8005ae4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ad0:	f7fd fde6 	bl	80036a0 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d902      	bls.n	8005ae4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ae2:	e005      	b.n	8005af0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ef      	bne.n	8005ad0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d149      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d110      	bne.n	8005b1e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005afc:	4b25      	ldr	r3, [pc, #148]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6892      	ldr	r2, [r2, #8]
 8005b0c:	0211      	lsls	r1, r2, #8
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68d2      	ldr	r2, [r2, #12]
 8005b12:	06d2      	lsls	r2, r2, #27
 8005b14:	430a      	orrs	r2, r1
 8005b16:	491f      	ldr	r1, [pc, #124]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	614b      	str	r3, [r1, #20]
 8005b1c:	e011      	b.n	8005b42 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6892      	ldr	r2, [r2, #8]
 8005b2e:	0211      	lsls	r1, r2, #8
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6912      	ldr	r2, [r2, #16]
 8005b34:	0852      	lsrs	r2, r2, #1
 8005b36:	3a01      	subs	r2, #1
 8005b38:	0652      	lsls	r2, r2, #25
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	4915      	ldr	r1, [pc, #84]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b42:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a13      	ldr	r2, [pc, #76]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7fd fda7 	bl	80036a0 <HAL_GetTick>
 8005b52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b54:	e009      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b56:	f7fd fda3 	bl	80036a0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d902      	bls.n	8005b6a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	73fb      	strb	r3, [r7, #15]
          break;
 8005b68:	e005      	b.n	8005b76 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0ef      	beq.n	8005b56 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b7c:	4b05      	ldr	r3, [pc, #20]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	4903      	ldr	r1, [pc, #12]	@ (8005b94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000

08005b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e095      	b.n	8005cd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d108      	bne.n	8005bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bba:	d009      	beq.n	8005bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	61da      	str	r2, [r3, #28]
 8005bc2:	e005      	b.n	8005bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fd fb16 	bl	800321c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c10:	d902      	bls.n	8005c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e002      	b.n	8005c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c26:	d007      	beq.n	8005c38 <HAL_SPI_Init+0xa0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7a:	ea42 0103 	orr.w	r1, r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	f003 0204 	and.w	r2, r3, #4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005cb4:	ea42 0103 	orr.w	r1, r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e01a      	b.n	8005d26 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fd fb23 	bl	8003354 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b088      	sub	sp, #32
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d3e:	f7fd fcaf 	bl	80036a0 <HAL_GetTick>
 8005d42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
 8005d56:	e15c      	b.n	8006012 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Transmit+0x36>
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e154      	b.n	8006012 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_Transmit+0x48>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e14d      	b.n	8006012 <HAL_SPI_Transmit+0x2e4>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2203      	movs	r2, #3
 8005d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc8:	d10f      	bne.n	8005dea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df4:	2b40      	cmp	r3, #64	@ 0x40
 8005df6:	d007      	beq.n	8005e08 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e10:	d952      	bls.n	8005eb8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0xf2>
 8005e1a:	8b7b      	ldrh	r3, [r7, #26]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d145      	bne.n	8005eac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	1c9a      	adds	r2, r3, #2
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e44:	e032      	b.n	8005eac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d112      	bne.n	8005e7a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	881a      	ldrh	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e78:	e018      	b.n	8005eac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7a:	f7fd fc11 	bl	80036a0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d803      	bhi.n	8005e92 <HAL_SPI_Transmit+0x164>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d102      	bne.n	8005e98 <HAL_SPI_Transmit+0x16a>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e0b2      	b.n	8006012 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1c7      	bne.n	8005e46 <HAL_SPI_Transmit+0x118>
 8005eb6:	e083      	b.n	8005fc0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_SPI_Transmit+0x198>
 8005ec0:	8b7b      	ldrh	r3, [r7, #26]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d177      	bne.n	8005fb6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d912      	bls.n	8005ef6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b02      	subs	r3, #2
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ef4:	e05f      	b.n	8005fb6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f1c:	e04b      	b.n	8005fb6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d12b      	bne.n	8005f84 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d912      	bls.n	8005f5c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b02      	subs	r3, #2
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f5a:	e02c      	b.n	8005fb6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f82:	e018      	b.n	8005fb6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f84:	f7fd fb8c 	bl	80036a0 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d803      	bhi.n	8005f9c <HAL_SPI_Transmit+0x26e>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d102      	bne.n	8005fa2 <HAL_SPI_Transmit+0x274>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e02d      	b.n	8006012 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ae      	bne.n	8005f1e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fac1 	bl	800654c <SPI_EndRxTxTransaction>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006010:	2300      	movs	r3, #0
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006036:	2302      	movs	r3, #2
 8006038:	e0d4      	b.n	80061e4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_SPI_Transmit_DMA+0x2a>
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0cc      	b.n	80061e4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_SPI_Transmit_DMA+0x3c>
 8006054:	2302      	movs	r3, #2
 8006056:	e0c5      	b.n	80061e4 <HAL_SPI_Transmit_DMA+0x1c8>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2203      	movs	r2, #3
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060aa:	d10f      	bne.n	80060cc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d0:	4a46      	ldr	r2, [pc, #280]	@ (80061ec <HAL_SPI_Transmit_DMA+0x1d0>)
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d8:	4a45      	ldr	r2, [pc, #276]	@ (80061f0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80060da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e0:	4a44      	ldr	r2, [pc, #272]	@ (80061f4 <HAL_SPI_Transmit_DMA+0x1d8>)
 80060e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	2200      	movs	r2, #0
 80060ea:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060fa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006104:	d82d      	bhi.n	8006162 <HAL_SPI_Transmit_DMA+0x146>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006110:	d127      	bne.n	8006162 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006116:	b29b      	uxth	r3, r3
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10f      	bne.n	8006140 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800612e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006134:	b29b      	uxth	r3, r3
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800613e:	e010      	b.n	8006162 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800614e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006154:	b29b      	uxth	r3, r3
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	b29b      	uxth	r3, r3
 800615a:	3301      	adds	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	4619      	mov	r1, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006178:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800617a:	f7fd fd1d 	bl	8003bb8 <HAL_DMA_Start_IT>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006188:	f043 0210 	orr.w	r2, r3, #16
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e023      	b.n	80061e4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a6:	2b40      	cmp	r3, #64	@ 0x40
 80061a8:	d007      	beq.n	80061ba <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061b8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0220 	orr.w	r2, r2, #32
 80061d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0202 	orr.w	r2, r2, #2
 80061e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	080062b3 	.word	0x080062b3
 80061f0:	0800620d 	.word	0x0800620d
 80061f4:	080062cf 	.word	0x080062cf

080061f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800621a:	f7fd fa41 	bl	80036a0 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b20      	cmp	r3, #32
 800622c:	d03b      	beq.n	80062a6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0220 	bic.w	r2, r2, #32
 800623c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0202 	bic.w	r2, r2, #2
 800624c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	2164      	movs	r1, #100	@ 0x64
 8006252:	6978      	ldr	r0, [r7, #20]
 8006254:	f000 f97a 	bl	800654c <SPI_EndRxTxTransaction>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2200      	movs	r2, #0
 800628c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800629e:	6978      	ldr	r0, [r7, #20]
 80062a0:	f7fb fd86 	bl	8001db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80062a4:	e002      	b.n	80062ac <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f7fb fdb8 	bl	8001e1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ff99 	bl	80061f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0203 	bic.w	r2, r2, #3
 80062ea:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f0:	f043 0210 	orr.w	r2, r3, #16
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7fb fd55 	bl	8001db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006320:	f7fd f9be 	bl	80036a0 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4413      	add	r3, r2
 800632e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006330:	f7fd f9b6 	bl	80036a0 <HAL_GetTick>
 8006334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006336:	4b39      	ldr	r3, [pc, #228]	@ (800641c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	015b      	lsls	r3, r3, #5
 800633c:	0d1b      	lsrs	r3, r3, #20
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	fb02 f303 	mul.w	r3, r2, r3
 8006344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006346:	e054      	b.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d050      	beq.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006350:	f7fd f9a6 	bl	80036a0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	429a      	cmp	r2, r3
 800635e:	d902      	bls.n	8006366 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d13d      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800637e:	d111      	bne.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006388:	d004      	beq.n	8006394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006392:	d107      	bne.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ac:	d10f      	bne.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e017      	b.n	8006412 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4013      	ands	r3, r2
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	bf0c      	ite	eq
 8006402:	2301      	moveq	r3, #1
 8006404:	2300      	movne	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	429a      	cmp	r2, r3
 800640e:	d19b      	bne.n	8006348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3720      	adds	r7, #32
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000020 	.word	0x20000020

08006420 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006432:	f7fd f935 	bl	80036a0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	4413      	add	r3, r2
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006442:	f7fd f92d 	bl	80036a0 <HAL_GetTick>
 8006446:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006450:	4b3d      	ldr	r3, [pc, #244]	@ (8006548 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	00da      	lsls	r2, r3, #3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	0d1b      	lsrs	r3, r3, #20
 8006460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006468:	e060      	b.n	800652c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006470:	d107      	bne.n	8006482 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006480:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006488:	d050      	beq.n	800652c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800648a:	f7fd f909 	bl	80036a0 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006496:	429a      	cmp	r2, r3
 8006498:	d902      	bls.n	80064a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13d      	bne.n	800651c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b8:	d111      	bne.n	80064de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c2:	d004      	beq.n	80064ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064cc:	d107      	bne.n	80064de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e6:	d10f      	bne.n	8006508 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006506:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e010      	b.n	800653e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	3b01      	subs	r3, #1
 800652a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4013      	ands	r3, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d196      	bne.n	800646a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3728      	adds	r7, #40	@ 0x28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000020 	.word	0x20000020

0800654c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff ff5b 	bl	8006420 <SPI_WaitFifoStateUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e027      	b.n	80065d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	2180      	movs	r1, #128	@ 0x80
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff fec0 	bl	8006310 <SPI_WaitFlagStateUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e014      	b.n	80065d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff ff34 	bl	8006420 <SPI_WaitFifoStateUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e000      	b.n	80065d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e049      	b.n	800667e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fc fece 	bl	80033a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f000 fa50 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_TIM_PWM_Start+0x24>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	bf14      	ite	ne
 80066a4:	2301      	movne	r3, #1
 80066a6:	2300      	moveq	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e03c      	b.n	8006726 <HAL_TIM_PWM_Start+0x9e>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d109      	bne.n	80066c6 <HAL_TIM_PWM_Start+0x3e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	e02f      	b.n	8006726 <HAL_TIM_PWM_Start+0x9e>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d109      	bne.n	80066e0 <HAL_TIM_PWM_Start+0x58>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e022      	b.n	8006726 <HAL_TIM_PWM_Start+0x9e>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b0c      	cmp	r3, #12
 80066e4:	d109      	bne.n	80066fa <HAL_TIM_PWM_Start+0x72>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	bf14      	ite	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	2300      	moveq	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	e015      	b.n	8006726 <HAL_TIM_PWM_Start+0x9e>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d109      	bne.n	8006714 <HAL_TIM_PWM_Start+0x8c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	bf14      	ite	ne
 800670c:	2301      	movne	r3, #1
 800670e:	2300      	moveq	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e008      	b.n	8006726 <HAL_TIM_PWM_Start+0x9e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e09c      	b.n	8006868 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0xb6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800673c:	e023      	b.n	8006786 <HAL_TIM_PWM_Start+0xfe>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b04      	cmp	r3, #4
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0xc6>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800674c:	e01b      	b.n	8006786 <HAL_TIM_PWM_Start+0xfe>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d104      	bne.n	800675e <HAL_TIM_PWM_Start+0xd6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800675c:	e013      	b.n	8006786 <HAL_TIM_PWM_Start+0xfe>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b0c      	cmp	r3, #12
 8006762:	d104      	bne.n	800676e <HAL_TIM_PWM_Start+0xe6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800676c:	e00b      	b.n	8006786 <HAL_TIM_PWM_Start+0xfe>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b10      	cmp	r3, #16
 8006772:	d104      	bne.n	800677e <HAL_TIM_PWM_Start+0xf6>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677c:	e003      	b.n	8006786 <HAL_TIM_PWM_Start+0xfe>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2201      	movs	r2, #1
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fd10 	bl	80071b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a35      	ldr	r2, [pc, #212]	@ (8006870 <HAL_TIM_PWM_Start+0x1e8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x13e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a34      	ldr	r2, [pc, #208]	@ (8006874 <HAL_TIM_PWM_Start+0x1ec>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x13e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a32      	ldr	r2, [pc, #200]	@ (8006878 <HAL_TIM_PWM_Start+0x1f0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x13e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a31      	ldr	r2, [pc, #196]	@ (800687c <HAL_TIM_PWM_Start+0x1f4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x13e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006880 <HAL_TIM_PWM_Start+0x1f8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d101      	bne.n	80067ca <HAL_TIM_PWM_Start+0x142>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <HAL_TIM_PWM_Start+0x144>
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a22      	ldr	r2, [pc, #136]	@ (8006870 <HAL_TIM_PWM_Start+0x1e8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01d      	beq.n	8006826 <HAL_TIM_PWM_Start+0x19e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f2:	d018      	beq.n	8006826 <HAL_TIM_PWM_Start+0x19e>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a22      	ldr	r2, [pc, #136]	@ (8006884 <HAL_TIM_PWM_Start+0x1fc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_TIM_PWM_Start+0x19e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a21      	ldr	r2, [pc, #132]	@ (8006888 <HAL_TIM_PWM_Start+0x200>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_TIM_PWM_Start+0x19e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1f      	ldr	r2, [pc, #124]	@ (800688c <HAL_TIM_PWM_Start+0x204>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_TIM_PWM_Start+0x19e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a17      	ldr	r2, [pc, #92]	@ (8006874 <HAL_TIM_PWM_Start+0x1ec>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_TIM_PWM_Start+0x19e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <HAL_TIM_PWM_Start+0x1f0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d115      	bne.n	8006852 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	4b18      	ldr	r3, [pc, #96]	@ (8006890 <HAL_TIM_PWM_Start+0x208>)
 800682e:	4013      	ands	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b06      	cmp	r3, #6
 8006836:	d015      	beq.n	8006864 <HAL_TIM_PWM_Start+0x1dc>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683e:	d011      	beq.n	8006864 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006850:	e008      	b.n	8006864 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e000      	b.n	8006866 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006864:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40014000 	.word	0x40014000
 800687c:	40014400 	.word	0x40014400
 8006880:	40014800 	.word	0x40014800
 8006884:	40000400 	.word	0x40000400
 8006888:	40000800 	.word	0x40000800
 800688c:	40000c00 	.word	0x40000c00
 8006890:	00010007 	.word	0x00010007

08006894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e0ff      	b.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b14      	cmp	r3, #20
 80068be:	f200 80f0 	bhi.w	8006aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068c2:	a201      	add	r2, pc, #4	@ (adr r2, 80068c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006aa3 	.word	0x08006aa3
 80068d0:	08006aa3 	.word	0x08006aa3
 80068d4:	08006aa3 	.word	0x08006aa3
 80068d8:	0800695d 	.word	0x0800695d
 80068dc:	08006aa3 	.word	0x08006aa3
 80068e0:	08006aa3 	.word	0x08006aa3
 80068e4:	08006aa3 	.word	0x08006aa3
 80068e8:	0800699f 	.word	0x0800699f
 80068ec:	08006aa3 	.word	0x08006aa3
 80068f0:	08006aa3 	.word	0x08006aa3
 80068f4:	08006aa3 	.word	0x08006aa3
 80068f8:	080069df 	.word	0x080069df
 80068fc:	08006aa3 	.word	0x08006aa3
 8006900:	08006aa3 	.word	0x08006aa3
 8006904:	08006aa3 	.word	0x08006aa3
 8006908:	08006a21 	.word	0x08006a21
 800690c:	08006aa3 	.word	0x08006aa3
 8006910:	08006aa3 	.word	0x08006aa3
 8006914:	08006aa3 	.word	0x08006aa3
 8006918:	08006a61 	.word	0x08006a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f970 	bl	8006c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0208 	orr.w	r2, r2, #8
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0204 	bic.w	r2, r2, #4
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	619a      	str	r2, [r3, #24]
      break;
 800695a:	e0a5      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 f9e0 	bl	8006d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
      break;
 800699c:	e084      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fa49 	bl	8006e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0208 	orr.w	r2, r2, #8
 80069b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0204 	bic.w	r2, r2, #4
 80069c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	61da      	str	r2, [r3, #28]
      break;
 80069dc:	e064      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fab1 	bl	8006f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	021a      	lsls	r2, r3, #8
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	61da      	str	r2, [r3, #28]
      break;
 8006a1e:	e043      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fafa 	bl	8007020 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0204 	bic.w	r2, r2, #4
 8006a4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a5e:	e023      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68b9      	ldr	r1, [r7, #8]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fb3e 	bl	80070e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	021a      	lsls	r2, r3, #8
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006aa0:	e002      	b.n	8006aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a46      	ldr	r2, [pc, #280]	@ (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a43      	ldr	r2, [pc, #268]	@ (8006bec <TIM_Base_SetConfig+0x130>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a42      	ldr	r2, [pc, #264]	@ (8006bf0 <TIM_Base_SetConfig+0x134>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a41      	ldr	r2, [pc, #260]	@ (8006bf4 <TIM_Base_SetConfig+0x138>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	@ (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a35      	ldr	r2, [pc, #212]	@ (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01f      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1c:	d01b      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a32      	ldr	r2, [pc, #200]	@ (8006bec <TIM_Base_SetConfig+0x130>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d017      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a31      	ldr	r2, [pc, #196]	@ (8006bf0 <TIM_Base_SetConfig+0x134>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a30      	ldr	r2, [pc, #192]	@ (8006bf4 <TIM_Base_SetConfig+0x138>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	@ (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2e      	ldr	r2, [pc, #184]	@ (8006bfc <TIM_Base_SetConfig+0x140>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2d      	ldr	r2, [pc, #180]	@ (8006c00 <TIM_Base_SetConfig+0x144>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	@ (8006c04 <TIM_Base_SetConfig+0x148>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a16      	ldr	r2, [pc, #88]	@ (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00f      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a18      	ldr	r2, [pc, #96]	@ (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00b      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <TIM_Base_SetConfig+0x140>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a16      	ldr	r2, [pc, #88]	@ (8006c00 <TIM_Base_SetConfig+0x144>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <TIM_Base_SetConfig+0x148>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d103      	bne.n	8006bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d105      	bne.n	8006bda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f023 0201 	bic.w	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	611a      	str	r2, [r3, #16]
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40013400 	.word	0x40013400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0201 	bic.w	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 0302 	bic.w	r3, r3, #2
 8006c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a2c      	ldr	r2, [pc, #176]	@ (8006d14 <TIM_OC1_SetConfig+0x10c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00f      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006d18 <TIM_OC1_SetConfig+0x110>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2a      	ldr	r2, [pc, #168]	@ (8006d1c <TIM_OC1_SetConfig+0x114>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a29      	ldr	r2, [pc, #164]	@ (8006d20 <TIM_OC1_SetConfig+0x118>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC1_SetConfig+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a28      	ldr	r2, [pc, #160]	@ (8006d24 <TIM_OC1_SetConfig+0x11c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10c      	bne.n	8006ca2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0308 	bic.w	r3, r3, #8
 8006c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <TIM_OC1_SetConfig+0x10c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1a      	ldr	r2, [pc, #104]	@ (8006d18 <TIM_OC1_SetConfig+0x110>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <TIM_OC1_SetConfig+0x114>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a18      	ldr	r2, [pc, #96]	@ (8006d20 <TIM_OC1_SetConfig+0x118>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_OC1_SetConfig+0xc2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a17      	ldr	r2, [pc, #92]	@ (8006d24 <TIM_OC1_SetConfig+0x11c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d111      	bne.n	8006cee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	40012c00 	.word	0x40012c00
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f023 0210 	bic.w	r2, r3, #16
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0320 	bic.w	r3, r3, #32
 8006d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a28      	ldr	r2, [pc, #160]	@ (8006e28 <TIM_OC2_SetConfig+0x100>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_OC2_SetConfig+0x6c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a27      	ldr	r2, [pc, #156]	@ (8006e2c <TIM_OC2_SetConfig+0x104>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d10d      	bne.n	8006db0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e28 <TIM_OC2_SetConfig+0x100>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00f      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <TIM_OC2_SetConfig+0x104>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00b      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <TIM_OC2_SetConfig+0x108>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1a      	ldr	r2, [pc, #104]	@ (8006e34 <TIM_OC2_SetConfig+0x10c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC2_SetConfig+0xb0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a19      	ldr	r2, [pc, #100]	@ (8006e38 <TIM_OC2_SetConfig+0x110>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d113      	bne.n	8006e00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800

08006e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a27      	ldr	r2, [pc, #156]	@ (8006f38 <TIM_OC3_SetConfig+0xfc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC3_SetConfig+0x6a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a26      	ldr	r2, [pc, #152]	@ (8006f3c <TIM_OC3_SetConfig+0x100>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10d      	bne.n	8006ec2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f38 <TIM_OC3_SetConfig+0xfc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f3c <TIM_OC3_SetConfig+0x100>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8006f40 <TIM_OC3_SetConfig+0x104>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a19      	ldr	r2, [pc, #100]	@ (8006f44 <TIM_OC3_SetConfig+0x108>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC3_SetConfig+0xae>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a18      	ldr	r2, [pc, #96]	@ (8006f48 <TIM_OC3_SetConfig+0x10c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d113      	bne.n	8006f12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40013400 	.word	0x40013400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	021b      	lsls	r3, r3, #8
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a18      	ldr	r2, [pc, #96]	@ (800700c <TIM_OC4_SetConfig+0xc0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00f      	beq.n	8006fd0 <TIM_OC4_SetConfig+0x84>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a17      	ldr	r2, [pc, #92]	@ (8007010 <TIM_OC4_SetConfig+0xc4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_OC4_SetConfig+0x84>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a16      	ldr	r2, [pc, #88]	@ (8007014 <TIM_OC4_SetConfig+0xc8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_OC4_SetConfig+0x84>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a15      	ldr	r2, [pc, #84]	@ (8007018 <TIM_OC4_SetConfig+0xcc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC4_SetConfig+0x84>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a14      	ldr	r2, [pc, #80]	@ (800701c <TIM_OC4_SetConfig+0xd0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d109      	bne.n	8006fe4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	019b      	lsls	r3, r3, #6
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40013400 	.word	0x40013400
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800

08007020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800704e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007064:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a17      	ldr	r2, [pc, #92]	@ (80070d4 <TIM_OC5_SetConfig+0xb4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00f      	beq.n	800709a <TIM_OC5_SetConfig+0x7a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a16      	ldr	r2, [pc, #88]	@ (80070d8 <TIM_OC5_SetConfig+0xb8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00b      	beq.n	800709a <TIM_OC5_SetConfig+0x7a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a15      	ldr	r2, [pc, #84]	@ (80070dc <TIM_OC5_SetConfig+0xbc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <TIM_OC5_SetConfig+0x7a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a14      	ldr	r2, [pc, #80]	@ (80070e0 <TIM_OC5_SetConfig+0xc0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_OC5_SetConfig+0x7a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a13      	ldr	r2, [pc, #76]	@ (80070e4 <TIM_OC5_SetConfig+0xc4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d109      	bne.n	80070ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	621a      	str	r2, [r3, #32]
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40013400 	.word	0x40013400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40014400 	.word	0x40014400
 80070e4:	40014800 	.word	0x40014800

080070e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800712e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	051b      	lsls	r3, r3, #20
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <TIM_OC6_SetConfig+0xb8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00f      	beq.n	8007164 <TIM_OC6_SetConfig+0x7c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a17      	ldr	r2, [pc, #92]	@ (80071a4 <TIM_OC6_SetConfig+0xbc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_OC6_SetConfig+0x7c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a16      	ldr	r2, [pc, #88]	@ (80071a8 <TIM_OC6_SetConfig+0xc0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_OC6_SetConfig+0x7c>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <TIM_OC6_SetConfig+0xc4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_OC6_SetConfig+0x7c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a14      	ldr	r2, [pc, #80]	@ (80071b0 <TIM_OC6_SetConfig+0xc8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d109      	bne.n	8007178 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800716a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800

080071b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	2201      	movs	r2, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e068      	b.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2e      	ldr	r2, [pc, #184]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d004      	beq.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2d      	ldr	r2, [pc, #180]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d108      	bne.n	800725e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1e      	ldr	r2, [pc, #120]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728a:	d018      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1b      	ldr	r2, [pc, #108]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1a      	ldr	r2, [pc, #104]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a18      	ldr	r2, [pc, #96]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a13      	ldr	r2, [pc, #76]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a14      	ldr	r2, [pc, #80]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d10c      	bne.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40012c00 	.word	0x40012c00
 80072fc:	40013400 	.word	0x40013400
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40014000 	.word	0x40014000

08007310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007328:	2302      	movs	r3, #2
 800732a:	e065      	b.n	80073f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a16      	ldr	r2, [pc, #88]	@ (8007404 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d115      	bne.n	80073e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c4:	051b      	lsls	r3, r3, #20
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	40012c00 	.word	0x40012c00
 8007408:	40013400 	.word	0x40013400

0800740c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e040      	b.n	80074a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d106      	bne.n	8007434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fb fe8c 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2224      	movs	r2, #36	@ 0x24
 8007438:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0201 	bic.w	r2, r2, #1
 8007448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fe52 	bl	80080fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb97 	bl	8007b8c <UART_SetConfig>
 800745e:	4603      	mov	r3, r0
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e01b      	b.n	80074a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fed1 	bl	8008240 <UART_CheckIdleState>
 800749e:	4603      	mov	r3, r0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	@ 0x28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d137      	bne.n	8007530 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_UART_Receive_IT+0x24>
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e030      	b.n	8007532 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a18      	ldr	r2, [pc, #96]	@ (800753c <HAL_UART_Receive_IT+0x94>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d01f      	beq.n	8007520 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d018      	beq.n	8007520 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	613b      	str	r3, [r7, #16]
   return(result);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007502:	627b      	str	r3, [r7, #36]	@ 0x24
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	623b      	str	r3, [r7, #32]
 800750e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	69f9      	ldr	r1, [r7, #28]
 8007512:	6a3a      	ldr	r2, [r7, #32]
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	61bb      	str	r3, [r7, #24]
   return(result);
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e6      	bne.n	80074ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	461a      	mov	r2, r3
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 ffa0 	bl	800846c <UART_Start_Receive_IT>
 800752c:	4603      	mov	r3, r0
 800752e:	e000      	b.n	8007532 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007530:	2302      	movs	r3, #2
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	@ 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40008000 	.word	0x40008000

08007540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b0ba      	sub	sp, #232	@ 0xe8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800756a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800756e:	4013      	ands	r3, r2
 8007570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d115      	bne.n	80075a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00f      	beq.n	80075a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d009      	beq.n	80075a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 82ca 	beq.w	8007b32 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
      }
      return;
 80075a6:	e2c4      	b.n	8007b32 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80075a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8117 	beq.w	80077e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80075c2:	4b85      	ldr	r3, [pc, #532]	@ (80077d8 <HAL_UART_IRQHandler+0x298>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 810a 	beq.w	80077e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d011      	beq.n	80075fc <HAL_UART_IRQHandler+0xbc>
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2201      	movs	r2, #1
 80075ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075f2:	f043 0201 	orr.w	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <HAL_UART_IRQHandler+0xec>
 8007608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2202      	movs	r2, #2
 800761a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007622:	f043 0204 	orr.w	r2, r3, #4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d011      	beq.n	800765c <HAL_UART_IRQHandler+0x11c>
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2204      	movs	r2, #4
 800764a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007652:	f043 0202 	orr.w	r2, r3, #2
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766c:	f003 0320 	and.w	r3, r3, #32
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007678:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2208      	movs	r2, #8
 8007686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800768e:	f043 0208 	orr.w	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800769c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d012      	beq.n	80076ca <HAL_UART_IRQHandler+0x18a>
 80076a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00c      	beq.n	80076ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c0:	f043 0220 	orr.w	r2, r3, #32
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8230 	beq.w	8007b36 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076da:	f003 0320 	and.w	r3, r3, #32
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007704:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007712:	2b40      	cmp	r3, #64	@ 0x40
 8007714:	d005      	beq.n	8007722 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800771a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800771e:	2b00      	cmp	r3, #0
 8007720:	d04f      	beq.n	80077c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 ff68 	bl	80085f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b40      	cmp	r3, #64	@ 0x40
 8007734:	d141      	bne.n	80077ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800774c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3308      	adds	r3, #8
 800775e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007762:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800776e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800777a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1d9      	bne.n	8007736 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007786:	2b00      	cmp	r3, #0
 8007788:	d013      	beq.n	80077b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800778e:	4a13      	ldr	r2, [pc, #76]	@ (80077dc <HAL_UART_IRQHandler+0x29c>)
 8007790:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007796:	4618      	mov	r0, r3
 8007798:	f7fc faac 	bl	8003cf4 <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d017      	beq.n	80077d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	e00f      	b.n	80077d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9d4 	bl	8007b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	e00b      	b.n	80077d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9d0 	bl	8007b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e007      	b.n	80077d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9cc 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80077d0:	e1b1      	b.n	8007b36 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	bf00      	nop
    return;
 80077d4:	e1af      	b.n	8007b36 <HAL_UART_IRQHandler+0x5f6>
 80077d6:	bf00      	nop
 80077d8:	04000120 	.word	0x04000120
 80077dc:	080086c1 	.word	0x080086c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	f040 816a 	bne.w	8007abe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8163 	beq.w	8007abe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 815c 	beq.w	8007abe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2210      	movs	r2, #16
 800780c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007818:	2b40      	cmp	r3, #64	@ 0x40
 800781a:	f040 80d4 	bne.w	80079c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800782a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80ad 	beq.w	800798e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800783a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800783e:	429a      	cmp	r2, r3
 8007840:	f080 80a5 	bcs.w	800798e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800784a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0320 	and.w	r3, r3, #32
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 8086 	bne.w	800796c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007874:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800787c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800788a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800788e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007896:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1da      	bne.n	8007860 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3308      	adds	r3, #8
 80078b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e1      	bne.n	80078aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3308      	adds	r3, #8
 80078ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800790a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800790c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007910:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e3      	bne.n	80078e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800793a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800793c:	f023 0310 	bic.w	r3, r3, #16
 8007940:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800794e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007950:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800795c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e4      	bne.n	800792c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007966:	4618      	mov	r0, r3
 8007968:	f7fc f986 	bl	8003c78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800797e:	b29b      	uxth	r3, r3
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	b29b      	uxth	r3, r3
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f8f4 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800798c:	e0d5      	b.n	8007b3a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007998:	429a      	cmp	r2, r3
 800799a:	f040 80ce 	bne.w	8007b3a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	f040 80c5 	bne.w	8007b3a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8d8 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
      return;
 80079c4:	e0b9      	b.n	8007b3a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80ab 	beq.w	8007b3e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80079e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80a6 	beq.w	8007b3e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e4      	bne.n	80079f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	623b      	str	r3, [r7, #32]
   return(result);
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3308      	adds	r3, #8
 8007a48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e3      	bne.n	8007a28 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f023 0310 	bic.w	r3, r3, #16
 8007a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	69b9      	ldr	r1, [r7, #24]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e4      	bne.n	8007a74 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f85c 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007abc:	e03f      	b.n	8007b3e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x5a8>
 8007aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ffe9 	bl	8008ab8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae6:	e02d      	b.n	8007b44 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00e      	beq.n	8007b12 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01c      	beq.n	8007b42 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
    }
    return;
 8007b10:	e017      	b.n	8007b42 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d012      	beq.n	8007b44 <HAL_UART_IRQHandler+0x604>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fdde 	bl	80086ec <UART_EndTransmit_IT>
    return;
 8007b30:	e008      	b.n	8007b44 <HAL_UART_IRQHandler+0x604>
      return;
 8007b32:	bf00      	nop
 8007b34:	e006      	b.n	8007b44 <HAL_UART_IRQHandler+0x604>
    return;
 8007b36:	bf00      	nop
 8007b38:	e004      	b.n	8007b44 <HAL_UART_IRQHandler+0x604>
      return;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <HAL_UART_IRQHandler+0x604>
      return;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <HAL_UART_IRQHandler+0x604>
    return;
 8007b42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b44:	37e8      	adds	r7, #232	@ 0xe8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b90:	b08a      	sub	sp, #40	@ 0x28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4ba4      	ldr	r3, [pc, #656]	@ (8007e4c <UART_SetConfig+0x2c0>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a99      	ldr	r2, [pc, #612]	@ (8007e50 <UART_SetConfig+0x2c4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a90      	ldr	r2, [pc, #576]	@ (8007e54 <UART_SetConfig+0x2c8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d126      	bne.n	8007c64 <UART_SetConfig+0xd8>
 8007c16:	4b90      	ldr	r3, [pc, #576]	@ (8007e58 <UART_SetConfig+0x2cc>)
 8007c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d81b      	bhi.n	8007c5c <UART_SetConfig+0xd0>
 8007c24:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <UART_SetConfig+0xa0>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c42:	e116      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007c44:	2302      	movs	r3, #2
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c4a:	e112      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c52:	e10e      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c5a:	e10a      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c62:	e106      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a7c      	ldr	r2, [pc, #496]	@ (8007e5c <UART_SetConfig+0x2d0>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d138      	bne.n	8007ce0 <UART_SetConfig+0x154>
 8007c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007e58 <UART_SetConfig+0x2cc>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c74:	f003 030c 	and.w	r3, r3, #12
 8007c78:	2b0c      	cmp	r3, #12
 8007c7a:	d82d      	bhi.n	8007cd8 <UART_SetConfig+0x14c>
 8007c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <UART_SetConfig+0xf8>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007cb9 	.word	0x08007cb9
 8007c88:	08007cd9 	.word	0x08007cd9
 8007c8c:	08007cd9 	.word	0x08007cd9
 8007c90:	08007cd9 	.word	0x08007cd9
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007cd9 	.word	0x08007cd9
 8007c9c:	08007cd9 	.word	0x08007cd9
 8007ca0:	08007cd9 	.word	0x08007cd9
 8007ca4:	08007cc1 	.word	0x08007cc1
 8007ca8:	08007cd9 	.word	0x08007cd9
 8007cac:	08007cd9 	.word	0x08007cd9
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cbe:	e0d8      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cc6:	e0d4      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cce:	e0d0      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cd6:	e0cc      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cde:	e0c8      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8007e60 <UART_SetConfig+0x2d4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d125      	bne.n	8007d36 <UART_SetConfig+0x1aa>
 8007cea:	4b5b      	ldr	r3, [pc, #364]	@ (8007e58 <UART_SetConfig+0x2cc>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cf4:	2b30      	cmp	r3, #48	@ 0x30
 8007cf6:	d016      	beq.n	8007d26 <UART_SetConfig+0x19a>
 8007cf8:	2b30      	cmp	r3, #48	@ 0x30
 8007cfa:	d818      	bhi.n	8007d2e <UART_SetConfig+0x1a2>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d00a      	beq.n	8007d16 <UART_SetConfig+0x18a>
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d814      	bhi.n	8007d2e <UART_SetConfig+0x1a2>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <UART_SetConfig+0x182>
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d008      	beq.n	8007d1e <UART_SetConfig+0x192>
 8007d0c:	e00f      	b.n	8007d2e <UART_SetConfig+0x1a2>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d14:	e0ad      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d16:	2302      	movs	r3, #2
 8007d18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d1c:	e0a9      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d1e:	2304      	movs	r3, #4
 8007d20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d24:	e0a5      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d26:	2308      	movs	r3, #8
 8007d28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d2c:	e0a1      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d2e:	2310      	movs	r3, #16
 8007d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d34:	e09d      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8007e64 <UART_SetConfig+0x2d8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d125      	bne.n	8007d8c <UART_SetConfig+0x200>
 8007d40:	4b45      	ldr	r3, [pc, #276]	@ (8007e58 <UART_SetConfig+0x2cc>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d4c:	d016      	beq.n	8007d7c <UART_SetConfig+0x1f0>
 8007d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d50:	d818      	bhi.n	8007d84 <UART_SetConfig+0x1f8>
 8007d52:	2b80      	cmp	r3, #128	@ 0x80
 8007d54:	d00a      	beq.n	8007d6c <UART_SetConfig+0x1e0>
 8007d56:	2b80      	cmp	r3, #128	@ 0x80
 8007d58:	d814      	bhi.n	8007d84 <UART_SetConfig+0x1f8>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <UART_SetConfig+0x1d8>
 8007d5e:	2b40      	cmp	r3, #64	@ 0x40
 8007d60:	d008      	beq.n	8007d74 <UART_SetConfig+0x1e8>
 8007d62:	e00f      	b.n	8007d84 <UART_SetConfig+0x1f8>
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d6a:	e082      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d72:	e07e      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d74:	2304      	movs	r3, #4
 8007d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d7a:	e07a      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d7c:	2308      	movs	r3, #8
 8007d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d82:	e076      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d84:	2310      	movs	r3, #16
 8007d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d8a:	e072      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a35      	ldr	r2, [pc, #212]	@ (8007e68 <UART_SetConfig+0x2dc>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d12a      	bne.n	8007dec <UART_SetConfig+0x260>
 8007d96:	4b30      	ldr	r3, [pc, #192]	@ (8007e58 <UART_SetConfig+0x2cc>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007da4:	d01a      	beq.n	8007ddc <UART_SetConfig+0x250>
 8007da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007daa:	d81b      	bhi.n	8007de4 <UART_SetConfig+0x258>
 8007dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db0:	d00c      	beq.n	8007dcc <UART_SetConfig+0x240>
 8007db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db6:	d815      	bhi.n	8007de4 <UART_SetConfig+0x258>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <UART_SetConfig+0x238>
 8007dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc0:	d008      	beq.n	8007dd4 <UART_SetConfig+0x248>
 8007dc2:	e00f      	b.n	8007de4 <UART_SetConfig+0x258>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dca:	e052      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dd2:	e04e      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dda:	e04a      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007de2:	e046      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dea:	e042      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a17      	ldr	r2, [pc, #92]	@ (8007e50 <UART_SetConfig+0x2c4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d13a      	bne.n	8007e6c <UART_SetConfig+0x2e0>
 8007df6:	4b18      	ldr	r3, [pc, #96]	@ (8007e58 <UART_SetConfig+0x2cc>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e04:	d01a      	beq.n	8007e3c <UART_SetConfig+0x2b0>
 8007e06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e0a:	d81b      	bhi.n	8007e44 <UART_SetConfig+0x2b8>
 8007e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e10:	d00c      	beq.n	8007e2c <UART_SetConfig+0x2a0>
 8007e12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e16:	d815      	bhi.n	8007e44 <UART_SetConfig+0x2b8>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <UART_SetConfig+0x298>
 8007e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e20:	d008      	beq.n	8007e34 <UART_SetConfig+0x2a8>
 8007e22:	e00f      	b.n	8007e44 <UART_SetConfig+0x2b8>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e2a:	e022      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e32:	e01e      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e3a:	e01a      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e42:	e016      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e4a:	e012      	b.n	8007e72 <UART_SetConfig+0x2e6>
 8007e4c:	efff69f3 	.word	0xefff69f3
 8007e50:	40008000 	.word	0x40008000
 8007e54:	40013800 	.word	0x40013800
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40004400 	.word	0x40004400
 8007e60:	40004800 	.word	0x40004800
 8007e64:	40004c00 	.word	0x40004c00
 8007e68:	40005000 	.word	0x40005000
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a9f      	ldr	r2, [pc, #636]	@ (80080f4 <UART_SetConfig+0x568>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d17a      	bne.n	8007f72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d824      	bhi.n	8007ece <UART_SetConfig+0x342>
 8007e84:	a201      	add	r2, pc, #4	@ (adr r2, 8007e8c <UART_SetConfig+0x300>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007ecf 	.word	0x08007ecf
 8007e94:	08007eb9 	.word	0x08007eb9
 8007e98:	08007ecf 	.word	0x08007ecf
 8007e9c:	08007ebf 	.word	0x08007ebf
 8007ea0:	08007ecf 	.word	0x08007ecf
 8007ea4:	08007ecf 	.word	0x08007ecf
 8007ea8:	08007ecf 	.word	0x08007ecf
 8007eac:	08007ec7 	.word	0x08007ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb0:	f7fd f91c 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8007eb4:	61f8      	str	r0, [r7, #28]
        break;
 8007eb6:	e010      	b.n	8007eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb8:	4b8f      	ldr	r3, [pc, #572]	@ (80080f8 <UART_SetConfig+0x56c>)
 8007eba:	61fb      	str	r3, [r7, #28]
        break;
 8007ebc:	e00d      	b.n	8007eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ebe:	f7fd f87d 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8007ec2:	61f8      	str	r0, [r7, #28]
        break;
 8007ec4:	e009      	b.n	8007eda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eca:	61fb      	str	r3, [r7, #28]
        break;
 8007ecc:	e005      	b.n	8007eda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ed8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80fb 	beq.w	80080d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	4413      	add	r3, r2
 8007eec:	69fa      	ldr	r2, [r7, #28]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d305      	bcc.n	8007efe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ef8:	69fa      	ldr	r2, [r7, #28]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d903      	bls.n	8007f06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f04:	e0e8      	b.n	80080d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	461c      	mov	r4, r3
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	022b      	lsls	r3, r5, #8
 8007f18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f1c:	0222      	lsls	r2, r4, #8
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	6849      	ldr	r1, [r1, #4]
 8007f22:	0849      	lsrs	r1, r1, #1
 8007f24:	2000      	movs	r0, #0
 8007f26:	4688      	mov	r8, r1
 8007f28:	4681      	mov	r9, r0
 8007f2a:	eb12 0a08 	adds.w	sl, r2, r8
 8007f2e:	eb43 0b09 	adc.w	fp, r3, r9
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	603b      	str	r3, [r7, #0]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f40:	4650      	mov	r0, sl
 8007f42:	4659      	mov	r1, fp
 8007f44:	f7f8 f952 	bl	80001ec <__aeabi_uldivmod>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f56:	d308      	bcc.n	8007f6a <UART_SetConfig+0x3de>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5e:	d204      	bcs.n	8007f6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	60da      	str	r2, [r3, #12]
 8007f68:	e0b6      	b.n	80080d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f70:	e0b2      	b.n	80080d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f7a:	d15e      	bne.n	800803a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d828      	bhi.n	8007fd6 <UART_SetConfig+0x44a>
 8007f84:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <UART_SetConfig+0x400>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fb9 	.word	0x08007fb9
 8007f94:	08007fc1 	.word	0x08007fc1
 8007f98:	08007fd7 	.word	0x08007fd7
 8007f9c:	08007fc7 	.word	0x08007fc7
 8007fa0:	08007fd7 	.word	0x08007fd7
 8007fa4:	08007fd7 	.word	0x08007fd7
 8007fa8:	08007fd7 	.word	0x08007fd7
 8007fac:	08007fcf 	.word	0x08007fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb0:	f7fd f89c 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8007fb4:	61f8      	str	r0, [r7, #28]
        break;
 8007fb6:	e014      	b.n	8007fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb8:	f7fd f8ae 	bl	8005118 <HAL_RCC_GetPCLK2Freq>
 8007fbc:	61f8      	str	r0, [r7, #28]
        break;
 8007fbe:	e010      	b.n	8007fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80080f8 <UART_SetConfig+0x56c>)
 8007fc2:	61fb      	str	r3, [r7, #28]
        break;
 8007fc4:	e00d      	b.n	8007fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc6:	f7fc fff9 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8007fca:	61f8      	str	r0, [r7, #28]
        break;
 8007fcc:	e009      	b.n	8007fe2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fd2:	61fb      	str	r3, [r7, #28]
        break;
 8007fd4:	e005      	b.n	8007fe2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007fe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d077      	beq.n	80080d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	005a      	lsls	r2, r3, #1
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	441a      	add	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b0f      	cmp	r3, #15
 8008002:	d916      	bls.n	8008032 <UART_SetConfig+0x4a6>
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800800a:	d212      	bcs.n	8008032 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	b29b      	uxth	r3, r3
 8008010:	f023 030f 	bic.w	r3, r3, #15
 8008014:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	085b      	lsrs	r3, r3, #1
 800801a:	b29b      	uxth	r3, r3
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	b29a      	uxth	r2, r3
 8008022:	8afb      	ldrh	r3, [r7, #22]
 8008024:	4313      	orrs	r3, r2
 8008026:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	8afa      	ldrh	r2, [r7, #22]
 800802e:	60da      	str	r2, [r3, #12]
 8008030:	e052      	b.n	80080d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008038:	e04e      	b.n	80080d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800803a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800803e:	2b08      	cmp	r3, #8
 8008040:	d827      	bhi.n	8008092 <UART_SetConfig+0x506>
 8008042:	a201      	add	r2, pc, #4	@ (adr r2, 8008048 <UART_SetConfig+0x4bc>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	0800806d 	.word	0x0800806d
 800804c:	08008075 	.word	0x08008075
 8008050:	0800807d 	.word	0x0800807d
 8008054:	08008093 	.word	0x08008093
 8008058:	08008083 	.word	0x08008083
 800805c:	08008093 	.word	0x08008093
 8008060:	08008093 	.word	0x08008093
 8008064:	08008093 	.word	0x08008093
 8008068:	0800808b 	.word	0x0800808b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800806c:	f7fd f83e 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8008070:	61f8      	str	r0, [r7, #28]
        break;
 8008072:	e014      	b.n	800809e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008074:	f7fd f850 	bl	8005118 <HAL_RCC_GetPCLK2Freq>
 8008078:	61f8      	str	r0, [r7, #28]
        break;
 800807a:	e010      	b.n	800809e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800807c:	4b1e      	ldr	r3, [pc, #120]	@ (80080f8 <UART_SetConfig+0x56c>)
 800807e:	61fb      	str	r3, [r7, #28]
        break;
 8008080:	e00d      	b.n	800809e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008082:	f7fc ff9b 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8008086:	61f8      	str	r0, [r7, #28]
        break;
 8008088:	e009      	b.n	800809e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800808e:	61fb      	str	r3, [r7, #28]
        break;
 8008090:	e005      	b.n	800809e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800809c:	bf00      	nop
    }

    if (pclk != 0U)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d019      	beq.n	80080d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	085a      	lsrs	r2, r3, #1
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	441a      	add	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b0f      	cmp	r3, #15
 80080bc:	d909      	bls.n	80080d2 <UART_SetConfig+0x546>
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c4:	d205      	bcs.n	80080d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60da      	str	r2, [r3, #12]
 80080d0:	e002      	b.n	80080d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80080e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3728      	adds	r7, #40	@ 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f2:	bf00      	nop
 80080f4:	40008000 	.word	0x40008000
 80080f8:	00f42400 	.word	0x00f42400

080080fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01a      	beq.n	8008212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081fa:	d10a      	bne.n	8008212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b098      	sub	sp, #96	@ 0x60
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008250:	f7fb fa26 	bl	80036a0 <HAL_GetTick>
 8008254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b08      	cmp	r3, #8
 8008262:	d12e      	bne.n	80082c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826c:	2200      	movs	r2, #0
 800826e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f88c 	bl	8008390 <UART_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d021      	beq.n	80082c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800828c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008292:	653b      	str	r3, [r7, #80]	@ 0x50
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800829c:	647b      	str	r3, [r7, #68]	@ 0x44
 800829e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e6      	bne.n	800827e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e062      	b.n	8008388 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d149      	bne.n	8008364 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d8:	2200      	movs	r2, #0
 80082da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f856 	bl	8008390 <UART_WaitOnFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d03c      	beq.n	8008364 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	623b      	str	r3, [r7, #32]
   return(result);
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008308:	633b      	str	r3, [r7, #48]	@ 0x30
 800830a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800830e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e6      	bne.n	80082ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	60fb      	str	r3, [r7, #12]
   return(result);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800833c:	61fa      	str	r2, [r7, #28]
 800833e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	69b9      	ldr	r1, [r7, #24]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	617b      	str	r3, [r7, #20]
   return(result);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e5      	bne.n	800831c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e011      	b.n	8008388 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3758      	adds	r7, #88	@ 0x58
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	4613      	mov	r3, r2
 800839e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a0:	e04f      	b.n	8008442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d04b      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083aa:	f7fb f979 	bl	80036a0 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d302      	bcc.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e04e      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d037      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b80      	cmp	r3, #128	@ 0x80
 80083d6:	d034      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b40      	cmp	r3, #64	@ 0x40
 80083dc:	d031      	beq.n	8008442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d110      	bne.n	800840e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2208      	movs	r2, #8
 80083f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f8ff 	bl	80085f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2208      	movs	r2, #8
 80083fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e029      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800841c:	d111      	bne.n	8008442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f8e5 	bl	80085f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e00f      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	4013      	ands	r3, r2
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	429a      	cmp	r2, r3
 800845e:	d0a0      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800846c:	b480      	push	{r7}
 800846e:	b097      	sub	sp, #92	@ 0x5c
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	88fa      	ldrh	r2, [r7, #6]
 8008484:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849e:	d10e      	bne.n	80084be <UART_Start_Receive_IT+0x52>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <UART_Start_Receive_IT+0x48>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80084ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084b2:	e02d      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	22ff      	movs	r2, #255	@ 0xff
 80084b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084bc:	e028      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10d      	bne.n	80084e2 <UART_Start_Receive_IT+0x76>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <UART_Start_Receive_IT+0x6c>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	22ff      	movs	r2, #255	@ 0xff
 80084d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084d6:	e01b      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	227f      	movs	r2, #127	@ 0x7f
 80084dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084e0:	e016      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ea:	d10d      	bne.n	8008508 <UART_Start_Receive_IT+0x9c>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <UART_Start_Receive_IT+0x92>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	227f      	movs	r2, #127	@ 0x7f
 80084f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80084fc:	e008      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	223f      	movs	r2, #63	@ 0x3f
 8008502:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008506:	e003      	b.n	8008510 <UART_Start_Receive_IT+0xa4>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2222      	movs	r2, #34	@ 0x22
 800851c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	657b      	str	r3, [r7, #84]	@ 0x54
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008540:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008542:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800854e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e5      	bne.n	8008520 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855c:	d107      	bne.n	800856e <UART_Start_Receive_IT+0x102>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4a21      	ldr	r2, [pc, #132]	@ (80085f0 <UART_Start_Receive_IT+0x184>)
 800856a:	669a      	str	r2, [r3, #104]	@ 0x68
 800856c:	e002      	b.n	8008574 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4a20      	ldr	r2, [pc, #128]	@ (80085f4 <UART_Start_Receive_IT+0x188>)
 8008572:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d019      	beq.n	80085b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
 800859c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80085a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80085a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e6      	bne.n	800857c <UART_Start_Receive_IT+0x110>
 80085ae:	e018      	b.n	80085e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	613b      	str	r3, [r7, #16]
   return(result);
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f043 0320 	orr.w	r3, r3, #32
 80085c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085ce:	623b      	str	r3, [r7, #32]
 80085d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	69f9      	ldr	r1, [r7, #28]
 80085d4:	6a3a      	ldr	r2, [r7, #32]
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	61bb      	str	r3, [r7, #24]
   return(result);
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	375c      	adds	r7, #92	@ 0x5c
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	080088fd 	.word	0x080088fd
 80085f4:	08008741 	.word	0x08008741

080085f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b095      	sub	sp, #84	@ 0x54
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800861e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008620:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e6      	bne.n	8008600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	61fb      	str	r3, [r7, #28]
   return(result);
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e5      	bne.n	8008632 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800866a:	2b01      	cmp	r3, #1
 800866c:	d118      	bne.n	80086a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	60bb      	str	r3, [r7, #8]
   return(result);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f023 0310 	bic.w	r3, r3, #16
 8008682:	647b      	str	r3, [r7, #68]	@ 0x44
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6979      	ldr	r1, [r7, #20]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	613b      	str	r3, [r7, #16]
   return(result);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e6      	bne.n	800866e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80086b4:	bf00      	nop
 80086b6:	3754      	adds	r7, #84	@ 0x54
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fa3e 	bl	8007b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	60bb      	str	r3, [r7, #8]
   return(result);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	61bb      	str	r3, [r7, #24]
 8008714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6979      	ldr	r1, [r7, #20]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	613b      	str	r3, [r7, #16]
   return(result);
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e6      	bne.n	80086f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fa0a 	bl	8007b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008738:	bf00      	nop
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b09c      	sub	sp, #112	@ 0x70
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800874e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008758:	2b22      	cmp	r3, #34	@ 0x22
 800875a:	f040 80be 	bne.w	80088da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008764:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008768:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800876c:	b2d9      	uxtb	r1, r3
 800876e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008772:	b2da      	uxtb	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008778:	400a      	ands	r2, r1
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f040 80a3 	bne.w	80088ee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80087fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80087fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008800:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a34      	ldr	r2, [pc, #208]	@ (80088f8 <UART_RxISR_8BIT+0x1b8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d01f      	beq.n	800886c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d018      	beq.n	800886c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	623b      	str	r3, [r7, #32]
   return(result);
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800884e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008858:	633b      	str	r3, [r7, #48]	@ 0x30
 800885a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800885e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008870:	2b01      	cmp	r3, #1
 8008872:	d12e      	bne.n	80088d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	60fb      	str	r3, [r7, #12]
   return(result);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0310 	bic.w	r3, r3, #16
 800888e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	461a      	mov	r2, r3
 8008896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	69b9      	ldr	r1, [r7, #24]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	617b      	str	r3, [r7, #20]
   return(result);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e6      	bne.n	800887a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d103      	bne.n	80088c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2210      	movs	r2, #16
 80088c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff f952 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d0:	e00d      	b.n	80088ee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7fa f8f0 	bl	8002ab8 <HAL_UART_RxCpltCallback>
}
 80088d8:	e009      	b.n	80088ee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	8b1b      	ldrh	r3, [r3, #24]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0208 	orr.w	r2, r2, #8
 80088ea:	b292      	uxth	r2, r2
 80088ec:	831a      	strh	r2, [r3, #24]
}
 80088ee:	bf00      	nop
 80088f0:	3770      	adds	r7, #112	@ 0x70
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	40008000 	.word	0x40008000

080088fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b09c      	sub	sp, #112	@ 0x70
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800890a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008914:	2b22      	cmp	r3, #34	@ 0x22
 8008916:	f040 80be 	bne.w	8008a96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008920:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008928:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800892a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800892e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008932:	4013      	ands	r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008938:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800893e:	1c9a      	adds	r2, r3, #2
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	f040 80a3 	bne.w	8008aaa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008978:	667b      	str	r3, [r7, #100]	@ 0x64
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008982:	657b      	str	r3, [r7, #84]	@ 0x54
 8008984:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008988:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e6      	bne.n	8008964 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80089b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e5      	bne.n	8008996 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a34      	ldr	r2, [pc, #208]	@ (8008ab4 <UART_RxISR_16BIT+0x1b8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d01f      	beq.n	8008a28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d12e      	bne.n	8008a8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f023 0310 	bic.w	r3, r3, #16
 8008a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6979      	ldr	r1, [r7, #20]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	613b      	str	r3, [r7, #16]
   return(result);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e6      	bne.n	8008a36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f003 0310 	and.w	r3, r3, #16
 8008a72:	2b10      	cmp	r3, #16
 8008a74:	d103      	bne.n	8008a7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2210      	movs	r2, #16
 8008a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff f874 	bl	8007b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a8c:	e00d      	b.n	8008aaa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fa f812 	bl	8002ab8 <HAL_UART_RxCpltCallback>
}
 8008a94:	e009      	b.n	8008aaa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	8b1b      	ldrh	r3, [r3, #24]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0208 	orr.w	r2, r2, #8
 8008aa6:	b292      	uxth	r2, r2
 8008aa8:	831a      	strh	r2, [r3, #24]
}
 8008aaa:	bf00      	nop
 8008aac:	3770      	adds	r7, #112	@ 0x70
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40008000 	.word	0x40008000

08008ab8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <malloc>:
 8008acc:	4b02      	ldr	r3, [pc, #8]	@ (8008ad8 <malloc+0xc>)
 8008ace:	4601      	mov	r1, r0
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	f000 b82d 	b.w	8008b30 <_malloc_r>
 8008ad6:	bf00      	nop
 8008ad8:	2000002c 	.word	0x2000002c

08008adc <free>:
 8008adc:	4b02      	ldr	r3, [pc, #8]	@ (8008ae8 <free+0xc>)
 8008ade:	4601      	mov	r1, r0
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	f000 b90b 	b.w	8008cfc <_free_r>
 8008ae6:	bf00      	nop
 8008ae8:	2000002c 	.word	0x2000002c

08008aec <sbrk_aligned>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4e0f      	ldr	r6, [pc, #60]	@ (8008b2c <sbrk_aligned+0x40>)
 8008af0:	460c      	mov	r4, r1
 8008af2:	6831      	ldr	r1, [r6, #0]
 8008af4:	4605      	mov	r5, r0
 8008af6:	b911      	cbnz	r1, 8008afe <sbrk_aligned+0x12>
 8008af8:	f000 f8c4 	bl	8008c84 <_sbrk_r>
 8008afc:	6030      	str	r0, [r6, #0]
 8008afe:	4621      	mov	r1, r4
 8008b00:	4628      	mov	r0, r5
 8008b02:	f000 f8bf 	bl	8008c84 <_sbrk_r>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d103      	bne.n	8008b12 <sbrk_aligned+0x26>
 8008b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b0e:	4620      	mov	r0, r4
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	1cc4      	adds	r4, r0, #3
 8008b14:	f024 0403 	bic.w	r4, r4, #3
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d0f8      	beq.n	8008b0e <sbrk_aligned+0x22>
 8008b1c:	1a21      	subs	r1, r4, r0
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 f8b0 	bl	8008c84 <_sbrk_r>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1f2      	bne.n	8008b0e <sbrk_aligned+0x22>
 8008b28:	e7ef      	b.n	8008b0a <sbrk_aligned+0x1e>
 8008b2a:	bf00      	nop
 8008b2c:	20000284 	.word	0x20000284

08008b30 <_malloc_r>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	1ccd      	adds	r5, r1, #3
 8008b36:	f025 0503 	bic.w	r5, r5, #3
 8008b3a:	3508      	adds	r5, #8
 8008b3c:	2d0c      	cmp	r5, #12
 8008b3e:	bf38      	it	cc
 8008b40:	250c      	movcc	r5, #12
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	4606      	mov	r6, r0
 8008b46:	db01      	blt.n	8008b4c <_malloc_r+0x1c>
 8008b48:	42a9      	cmp	r1, r5
 8008b4a:	d904      	bls.n	8008b56 <_malloc_r+0x26>
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	2000      	movs	r0, #0
 8008b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c2c <_malloc_r+0xfc>
 8008b5a:	f000 f869 	bl	8008c30 <__malloc_lock>
 8008b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b62:	461c      	mov	r4, r3
 8008b64:	bb44      	cbnz	r4, 8008bb8 <_malloc_r+0x88>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7ff ffbf 	bl	8008aec <sbrk_aligned>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	4604      	mov	r4, r0
 8008b72:	d158      	bne.n	8008c26 <_malloc_r+0xf6>
 8008b74:	f8d8 4000 	ldr.w	r4, [r8]
 8008b78:	4627      	mov	r7, r4
 8008b7a:	2f00      	cmp	r7, #0
 8008b7c:	d143      	bne.n	8008c06 <_malloc_r+0xd6>
 8008b7e:	2c00      	cmp	r4, #0
 8008b80:	d04b      	beq.n	8008c1a <_malloc_r+0xea>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	4639      	mov	r1, r7
 8008b86:	4630      	mov	r0, r6
 8008b88:	eb04 0903 	add.w	r9, r4, r3
 8008b8c:	f000 f87a 	bl	8008c84 <_sbrk_r>
 8008b90:	4581      	cmp	r9, r0
 8008b92:	d142      	bne.n	8008c1a <_malloc_r+0xea>
 8008b94:	6821      	ldr	r1, [r4, #0]
 8008b96:	1a6d      	subs	r5, r5, r1
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ffa6 	bl	8008aec <sbrk_aligned>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d03a      	beq.n	8008c1a <_malloc_r+0xea>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	442b      	add	r3, r5
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	f8d8 3000 	ldr.w	r3, [r8]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	bb62      	cbnz	r2, 8008c0c <_malloc_r+0xdc>
 8008bb2:	f8c8 7000 	str.w	r7, [r8]
 8008bb6:	e00f      	b.n	8008bd8 <_malloc_r+0xa8>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	1b52      	subs	r2, r2, r5
 8008bbc:	d420      	bmi.n	8008c00 <_malloc_r+0xd0>
 8008bbe:	2a0b      	cmp	r2, #11
 8008bc0:	d917      	bls.n	8008bf2 <_malloc_r+0xc2>
 8008bc2:	1961      	adds	r1, r4, r5
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	6025      	str	r5, [r4, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	6059      	strne	r1, [r3, #4]
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	bf08      	it	eq
 8008bd0:	f8c8 1000 	streq.w	r1, [r8]
 8008bd4:	5162      	str	r2, [r4, r5]
 8008bd6:	604b      	str	r3, [r1, #4]
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 f82f 	bl	8008c3c <__malloc_unlock>
 8008bde:	f104 000b 	add.w	r0, r4, #11
 8008be2:	1d23      	adds	r3, r4, #4
 8008be4:	f020 0007 	bic.w	r0, r0, #7
 8008be8:	1ac2      	subs	r2, r0, r3
 8008bea:	bf1c      	itt	ne
 8008bec:	1a1b      	subne	r3, r3, r0
 8008bee:	50a3      	strne	r3, [r4, r2]
 8008bf0:	e7af      	b.n	8008b52 <_malloc_r+0x22>
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	bf0c      	ite	eq
 8008bf8:	f8c8 2000 	streq.w	r2, [r8]
 8008bfc:	605a      	strne	r2, [r3, #4]
 8008bfe:	e7eb      	b.n	8008bd8 <_malloc_r+0xa8>
 8008c00:	4623      	mov	r3, r4
 8008c02:	6864      	ldr	r4, [r4, #4]
 8008c04:	e7ae      	b.n	8008b64 <_malloc_r+0x34>
 8008c06:	463c      	mov	r4, r7
 8008c08:	687f      	ldr	r7, [r7, #4]
 8008c0a:	e7b6      	b.n	8008b7a <_malloc_r+0x4a>
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d1fb      	bne.n	8008c0c <_malloc_r+0xdc>
 8008c14:	2300      	movs	r3, #0
 8008c16:	6053      	str	r3, [r2, #4]
 8008c18:	e7de      	b.n	8008bd8 <_malloc_r+0xa8>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 f80c 	bl	8008c3c <__malloc_unlock>
 8008c24:	e794      	b.n	8008b50 <_malloc_r+0x20>
 8008c26:	6005      	str	r5, [r0, #0]
 8008c28:	e7d6      	b.n	8008bd8 <_malloc_r+0xa8>
 8008c2a:	bf00      	nop
 8008c2c:	20000288 	.word	0x20000288

08008c30 <__malloc_lock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	@ (8008c38 <__malloc_lock+0x8>)
 8008c32:	f000 b861 	b.w	8008cf8 <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	200003c8 	.word	0x200003c8

08008c3c <__malloc_unlock>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	@ (8008c44 <__malloc_unlock+0x8>)
 8008c3e:	f000 b85c 	b.w	8008cfa <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	200003c8 	.word	0x200003c8

08008c48 <memset>:
 8008c48:	4402      	add	r2, r0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d100      	bne.n	8008c52 <memset+0xa>
 8008c50:	4770      	bx	lr
 8008c52:	f803 1b01 	strb.w	r1, [r3], #1
 8008c56:	e7f9      	b.n	8008c4c <memset+0x4>

08008c58 <strstr>:
 8008c58:	780a      	ldrb	r2, [r1, #0]
 8008c5a:	b570      	push	{r4, r5, r6, lr}
 8008c5c:	b96a      	cbnz	r2, 8008c7a <strstr+0x22>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d109      	bne.n	8008c78 <strstr+0x20>
 8008c64:	460c      	mov	r4, r1
 8008c66:	4605      	mov	r5, r0
 8008c68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0f6      	beq.n	8008c5e <strstr+0x6>
 8008c70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008c74:	429e      	cmp	r6, r3
 8008c76:	d0f7      	beq.n	8008c68 <strstr+0x10>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	7803      	ldrb	r3, [r0, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1ef      	bne.n	8008c60 <strstr+0x8>
 8008c80:	4618      	mov	r0, r3
 8008c82:	e7ec      	b.n	8008c5e <strstr+0x6>

08008c84 <_sbrk_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d06      	ldr	r5, [pc, #24]	@ (8008ca0 <_sbrk_r+0x1c>)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	602b      	str	r3, [r5, #0]
 8008c90:	f7fa fc2c 	bl	80034ec <_sbrk>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_sbrk_r+0x1a>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_sbrk_r+0x1a>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	200003c4 	.word	0x200003c4

08008ca4 <__errno>:
 8008ca4:	4b01      	ldr	r3, [pc, #4]	@ (8008cac <__errno+0x8>)
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	2000002c 	.word	0x2000002c

08008cb0 <__libc_init_array>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ce8 <__libc_init_array+0x38>)
 8008cb4:	4c0d      	ldr	r4, [pc, #52]	@ (8008cec <__libc_init_array+0x3c>)
 8008cb6:	1b64      	subs	r4, r4, r5
 8008cb8:	10a4      	asrs	r4, r4, #2
 8008cba:	2600      	movs	r6, #0
 8008cbc:	42a6      	cmp	r6, r4
 8008cbe:	d109      	bne.n	8008cd4 <__libc_init_array+0x24>
 8008cc0:	4d0b      	ldr	r5, [pc, #44]	@ (8008cf0 <__libc_init_array+0x40>)
 8008cc2:	4c0c      	ldr	r4, [pc, #48]	@ (8008cf4 <__libc_init_array+0x44>)
 8008cc4:	f000 f864 	bl	8008d90 <_init>
 8008cc8:	1b64      	subs	r4, r4, r5
 8008cca:	10a4      	asrs	r4, r4, #2
 8008ccc:	2600      	movs	r6, #0
 8008cce:	42a6      	cmp	r6, r4
 8008cd0:	d105      	bne.n	8008cde <__libc_init_array+0x2e>
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd8:	4798      	blx	r3
 8008cda:	3601      	adds	r6, #1
 8008cdc:	e7ee      	b.n	8008cbc <__libc_init_array+0xc>
 8008cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce2:	4798      	blx	r3
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	e7f2      	b.n	8008cce <__libc_init_array+0x1e>
 8008ce8:	08009c44 	.word	0x08009c44
 8008cec:	08009c44 	.word	0x08009c44
 8008cf0:	08009c44 	.word	0x08009c44
 8008cf4:	08009c48 	.word	0x08009c48

08008cf8 <__retarget_lock_acquire_recursive>:
 8008cf8:	4770      	bx	lr

08008cfa <__retarget_lock_release_recursive>:
 8008cfa:	4770      	bx	lr

08008cfc <_free_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4605      	mov	r5, r0
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d041      	beq.n	8008d88 <_free_r+0x8c>
 8008d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d08:	1f0c      	subs	r4, r1, #4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfb8      	it	lt
 8008d0e:	18e4      	addlt	r4, r4, r3
 8008d10:	f7ff ff8e 	bl	8008c30 <__malloc_lock>
 8008d14:	4a1d      	ldr	r2, [pc, #116]	@ (8008d8c <_free_r+0x90>)
 8008d16:	6813      	ldr	r3, [r2, #0]
 8008d18:	b933      	cbnz	r3, 8008d28 <_free_r+0x2c>
 8008d1a:	6063      	str	r3, [r4, #4]
 8008d1c:	6014      	str	r4, [r2, #0]
 8008d1e:	4628      	mov	r0, r5
 8008d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d24:	f7ff bf8a 	b.w	8008c3c <__malloc_unlock>
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d908      	bls.n	8008d3e <_free_r+0x42>
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	1821      	adds	r1, r4, r0
 8008d30:	428b      	cmp	r3, r1
 8008d32:	bf01      	itttt	eq
 8008d34:	6819      	ldreq	r1, [r3, #0]
 8008d36:	685b      	ldreq	r3, [r3, #4]
 8008d38:	1809      	addeq	r1, r1, r0
 8008d3a:	6021      	streq	r1, [r4, #0]
 8008d3c:	e7ed      	b.n	8008d1a <_free_r+0x1e>
 8008d3e:	461a      	mov	r2, r3
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	b10b      	cbz	r3, 8008d48 <_free_r+0x4c>
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d9fa      	bls.n	8008d3e <_free_r+0x42>
 8008d48:	6811      	ldr	r1, [r2, #0]
 8008d4a:	1850      	adds	r0, r2, r1
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d10b      	bne.n	8008d68 <_free_r+0x6c>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	4401      	add	r1, r0
 8008d54:	1850      	adds	r0, r2, r1
 8008d56:	4283      	cmp	r3, r0
 8008d58:	6011      	str	r1, [r2, #0]
 8008d5a:	d1e0      	bne.n	8008d1e <_free_r+0x22>
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	6053      	str	r3, [r2, #4]
 8008d62:	4408      	add	r0, r1
 8008d64:	6010      	str	r0, [r2, #0]
 8008d66:	e7da      	b.n	8008d1e <_free_r+0x22>
 8008d68:	d902      	bls.n	8008d70 <_free_r+0x74>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	e7d6      	b.n	8008d1e <_free_r+0x22>
 8008d70:	6820      	ldr	r0, [r4, #0]
 8008d72:	1821      	adds	r1, r4, r0
 8008d74:	428b      	cmp	r3, r1
 8008d76:	bf04      	itt	eq
 8008d78:	6819      	ldreq	r1, [r3, #0]
 8008d7a:	685b      	ldreq	r3, [r3, #4]
 8008d7c:	6063      	str	r3, [r4, #4]
 8008d7e:	bf04      	itt	eq
 8008d80:	1809      	addeq	r1, r1, r0
 8008d82:	6021      	streq	r1, [r4, #0]
 8008d84:	6054      	str	r4, [r2, #4]
 8008d86:	e7ca      	b.n	8008d1e <_free_r+0x22>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000288 	.word	0x20000288

08008d90 <_init>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr

08008d9c <_fini>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	bf00      	nop
 8008da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da2:	bc08      	pop	{r3}
 8008da4:	469e      	mov	lr, r3
 8008da6:	4770      	bx	lr
