
MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08007ba4  08007ba4  00008ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a2c  08008a2c  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a2c  08008a2c  00009a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a34  08008a34  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a34  08008a34  00009a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a38  08008a38  00009a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008a3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000078  08008ab4  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08008ab4  0000a37c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103f8  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  0001a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  0001d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002983e  00000000  00000000  0001e395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011107  00000000  00000000  00047bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad98  00000000  00000000  00058cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca8  00000000  00000000  00153ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00157760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007b8c 	.word	0x08007b8c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08007b8c 	.word	0x08007b8c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <drawPixel>:
extern uint8_t _xstart;
extern uint8_t _ystart;
extern uint8_t spi_ready;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
 8000522:	460b      	mov	r3, r1
 8000524:	80bb      	strh	r3, [r7, #4]
 8000526:	4613      	mov	r3, r2
 8000528:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	88b9      	ldrh	r1, [r7, #4]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fe6f 	bl	8002214 <ST7735_DrawPixel>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b085      	sub	sp, #20
 8000544:	af02      	add	r7, sp, #8
 8000546:	4604      	mov	r4, r0
 8000548:	4608      	mov	r0, r1
 800054a:	4611      	mov	r1, r2
 800054c:	461a      	mov	r2, r3
 800054e:	4623      	mov	r3, r4
 8000550:	80fb      	strh	r3, [r7, #6]
 8000552:	4603      	mov	r3, r0
 8000554:	80bb      	strh	r3, [r7, #4]
 8000556:	460b      	mov	r3, r1
 8000558:	807b      	strh	r3, [r7, #2]
 800055a:	4613      	mov	r3, r2
 800055c:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800055e:	88f8      	ldrh	r0, [r7, #6]
 8000560:	88b9      	ldrh	r1, [r7, #4]
 8000562:	887a      	ldrh	r2, [r7, #2]
 8000564:	883c      	ldrh	r4, [r7, #0]
 8000566:	8b3b      	ldrh	r3, [r7, #24]
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	4623      	mov	r3, r4
 800056c:	f001 fffc 	bl	8002568 <ST7735_FillRectangle>
	while (!spi_ready ){};
 8000570:	bf00      	nop
 8000572:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <fillRect+0x44>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0fb      	beq.n	8000572 <fillRect+0x32>


}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	20000000 	.word	0x20000000

08000588 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
 8000592:	460b      	mov	r3, r1
 8000594:	80bb      	strh	r3, [r7, #4]
 8000596:	4613      	mov	r3, r2
 8000598:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800059a:	887a      	ldrh	r2, [r7, #2]
 800059c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80005a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffb7 	bl	8000518 <drawPixel>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b089      	sub	sp, #36	@ 0x24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4604      	mov	r4, r0
 80005ba:	4608      	mov	r0, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	461a      	mov	r2, r3
 80005c0:	4623      	mov	r3, r4
 80005c2:	80fb      	strh	r3, [r7, #6]
 80005c4:	4603      	mov	r3, r0
 80005c6:	80bb      	strh	r3, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
 80005cc:	4613      	mov	r3, r2
 80005ce:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80005d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005de:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005e2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	1acb      	subs	r3, r1, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	429a      	cmp	r2, r3
 80005f4:	bfcc      	ite	gt
 80005f6:	2301      	movgt	r3, #1
 80005f8:	2300      	movle	r3, #0
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80005fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00b      	beq.n	800061e <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	833b      	strh	r3, [r7, #24]
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	8b3b      	ldrh	r3, [r7, #24]
 8000610:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	82fb      	strh	r3, [r7, #22]
 8000616:	883b      	ldrh	r3, [r7, #0]
 8000618:	807b      	strh	r3, [r7, #2]
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 800061e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000626:	429a      	cmp	r2, r3
 8000628:	dd0b      	ble.n	8000642 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	82bb      	strh	r3, [r7, #20]
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	8abb      	ldrh	r3, [r7, #20]
 8000634:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	827b      	strh	r3, [r7, #18]
 800063a:	883b      	ldrh	r3, [r7, #0]
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	8a7b      	ldrh	r3, [r7, #18]
 8000640:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000642:	887a      	ldrh	r2, [r7, #2]
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
 800064a:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800064c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000650:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	bfb8      	it	lt
 800065a:	425b      	neglt	r3, r3
 800065c:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 800065e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000662:	0fda      	lsrs	r2, r3, #31
 8000664:	4413      	add	r3, r2
 8000666:	105b      	asrs	r3, r3, #1
 8000668:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800066a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800066e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000672:	429a      	cmp	r2, r3
 8000674:	da02      	bge.n	800067c <writeLine+0xca>
        ystep = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	83bb      	strh	r3, [r7, #28]
 800067a:	e031      	b.n	80006e0 <writeLine+0x12e>
    } else {
        ystep = -1;
 800067c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000680:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000682:	e02d      	b.n	80006e0 <writeLine+0x12e>
        if (steep) {
 8000684:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <writeLine+0xec>
            writePixel(y0, x0, color);
 800068c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800068e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff76 	bl	8000588 <writePixel>
 800069c:	e007      	b.n	80006ae <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 800069e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff6d 	bl	8000588 <writePixel>
        }
        err -= dy;
 80006ae:	8bfa      	ldrh	r2, [r7, #30]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80006b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da09      	bge.n	80006d4 <writeLine+0x122>
            y0 += ystep;
 80006c0:	88ba      	ldrh	r2, [r7, #4]
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80006ca:	8bfa      	ldrh	r2, [r7, #30]
 80006cc:	8a3b      	ldrh	r3, [r7, #16]
 80006ce:	4413      	add	r3, r2
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 80006d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	3301      	adds	r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	80fb      	strh	r3, [r7, #6]
 80006e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	ddcb      	ble.n	8000684 <writeLine+0xd2>
        }
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3724      	adds	r7, #36	@ 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}

080006f6 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af02      	add	r7, sp, #8
 80006fc:	4604      	mov	r4, r0
 80006fe:	4608      	mov	r0, r1
 8000700:	4611      	mov	r1, r2
 8000702:	461a      	mov	r2, r3
 8000704:	4623      	mov	r3, r4
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	4603      	mov	r3, r0
 800070a:	80bb      	strh	r3, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
 8000710:	4613      	mov	r3, r2
 8000712:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8000714:	88ba      	ldrh	r2, [r7, #4]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	4413      	add	r3, r2
 800071a:	b29b      	uxth	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b29b      	uxth	r3, r3
 8000720:	b21c      	sxth	r4, r3
 8000722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000726:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800072a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800072e:	883b      	ldrh	r3, [r7, #0]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	4623      	mov	r3, r4
 8000734:	f7ff ff3d 	bl	80005b2 <writeLine>
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af02      	add	r7, sp, #8
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4623      	mov	r3, r4
 8000750:	80fb      	strh	r3, [r7, #6]
 8000752:	4603      	mov	r3, r0
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	4613      	mov	r3, r2
 800075c:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	4413      	add	r3, r2
 8000764:	b29b      	uxth	r3, r3
 8000766:	3b01      	subs	r3, #1
 8000768:	b29b      	uxth	r3, r3
 800076a:	b21a      	sxth	r2, r3
 800076c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000770:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000774:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	4623      	mov	r3, r4
 800077e:	f7ff ff18 	bl	80005b2 <writeLine>
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}

0800078a <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800078a:	b590      	push	{r4, r7, lr}
 800078c:	b087      	sub	sp, #28
 800078e:	af02      	add	r7, sp, #8
 8000790:	4604      	mov	r4, r0
 8000792:	4608      	mov	r0, r1
 8000794:	4611      	mov	r1, r2
 8000796:	461a      	mov	r2, r3
 8000798:	4623      	mov	r3, r4
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4603      	mov	r3, r0
 800079e:	80bb      	strh	r3, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
 80007a4:	4613      	mov	r3, r2
 80007a6:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80007a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d11a      	bne.n	80007ea <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80007b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dd05      	ble.n	80007cc <drawLine+0x42>
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	81bb      	strh	r3, [r7, #12]
 80007c4:	883b      	ldrh	r3, [r7, #0]
 80007c6:	80bb      	strh	r3, [r7, #4]
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80007cc:	883a      	ldrh	r2, [r7, #0]
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b21a      	sxth	r2, r3
 80007da:	8c3b      	ldrh	r3, [r7, #32]
 80007dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007e4:	f7ff ff87 	bl	80006f6 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80007e8:	e02d      	b.n	8000846 <drawLine+0xbc>
    } else if(y0 == y1){
 80007ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d11a      	bne.n	800082c <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80007f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dd05      	ble.n	800080e <drawLine+0x84>
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	81fb      	strh	r3, [r7, #14]
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800080e:	887a      	ldrh	r2, [r7, #2]
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	b29b      	uxth	r3, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	8c3b      	ldrh	r3, [r7, #32]
 800081e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000822:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000826:	f7ff ff8b 	bl	8000740 <drawFastHLine>
}
 800082a:	e00c      	b.n	8000846 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800082c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000830:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000834:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800083c:	8c3b      	ldrh	r3, [r7, #32]
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	4623      	mov	r3, r4
 8000842:	f7ff feb6 	bl	80005b2 <writeLine>
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}

0800084e <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800084e:	b590      	push	{r4, r7, lr}
 8000850:	b087      	sub	sp, #28
 8000852:	af00      	add	r7, sp, #0
 8000854:	4604      	mov	r4, r0
 8000856:	4608      	mov	r0, r1
 8000858:	4611      	mov	r1, r2
 800085a:	461a      	mov	r2, r3
 800085c:	4623      	mov	r3, r4
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	4603      	mov	r3, r0
 8000862:	80bb      	strh	r3, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	807b      	strh	r3, [r7, #2]
 8000868:	4613      	mov	r3, r2
 800086a:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	f1c3 0301 	rsb	r3, r3, #1
 8000872:	b29b      	uxth	r3, r3
 8000874:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	461a      	mov	r2, r3
 800087e:	03d2      	lsls	r2, r2, #15
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000890:	88ba      	ldrh	r2, [r7, #4]
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4413      	add	r3, r2
 8000896:	b29b      	uxth	r3, r3
 8000898:	b219      	sxth	r1, r3
 800089a:	883a      	ldrh	r2, [r7, #0]
 800089c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe71 	bl	8000588 <writePixel>
    writePixel(x0  , y0-r, color);
 80008a6:	88ba      	ldrh	r2, [r7, #4]
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b219      	sxth	r1, r3
 80008b0:	883a      	ldrh	r2, [r7, #0]
 80008b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe66 	bl	8000588 <writePixel>
    writePixel(x0+r, y0  , color);
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	4413      	add	r3, r2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	883a      	ldrh	r2, [r7, #0]
 80008c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe5b 	bl	8000588 <writePixel>
    writePixel(x0-r, y0  , color);
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b21b      	sxth	r3, r3
 80008dc:	883a      	ldrh	r2, [r7, #0]
 80008de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe50 	bl	8000588 <writePixel>

    while (x<y) {
 80008e8:	e091      	b.n	8000a0e <drawCircle+0x1c0>
        if (f >= 0) {
 80008ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	db0e      	blt.n	8000910 <drawCircle+0xc2>
            y--;
 80008f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80008fe:	8a7b      	ldrh	r3, [r7, #18]
 8000900:	3302      	adds	r3, #2
 8000902:	b29b      	uxth	r3, r3
 8000904:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000906:	8afa      	ldrh	r2, [r7, #22]
 8000908:	8a7b      	ldrh	r3, [r7, #18]
 800090a:	4413      	add	r3, r2
 800090c:	b29b      	uxth	r3, r3
 800090e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000910:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000914:	b29b      	uxth	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	3302      	adds	r3, #2
 8000920:	b29b      	uxth	r3, r3
 8000922:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000924:	8afa      	ldrh	r2, [r7, #22]
 8000926:	8abb      	ldrh	r3, [r7, #20]
 8000928:	4413      	add	r3, r2
 800092a:	b29b      	uxth	r3, r3
 800092c:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 800092e:	88fa      	ldrh	r2, [r7, #6]
 8000930:	8a3b      	ldrh	r3, [r7, #16]
 8000932:	4413      	add	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	b218      	sxth	r0, r3
 8000938:	88ba      	ldrh	r2, [r7, #4]
 800093a:	89fb      	ldrh	r3, [r7, #14]
 800093c:	4413      	add	r3, r2
 800093e:	b29b      	uxth	r3, r3
 8000940:	b21b      	sxth	r3, r3
 8000942:	883a      	ldrh	r2, [r7, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f7ff fe1f 	bl	8000588 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 800094a:	88fa      	ldrh	r2, [r7, #6]
 800094c:	8a3b      	ldrh	r3, [r7, #16]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b218      	sxth	r0, r3
 8000954:	88ba      	ldrh	r2, [r7, #4]
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	4413      	add	r3, r2
 800095a:	b29b      	uxth	r3, r3
 800095c:	b21b      	sxth	r3, r3
 800095e:	883a      	ldrh	r2, [r7, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f7ff fe11 	bl	8000588 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	8a3b      	ldrh	r3, [r7, #16]
 800096a:	4413      	add	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b218      	sxth	r0, r3
 8000970:	88ba      	ldrh	r2, [r7, #4]
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b29b      	uxth	r3, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	883a      	ldrh	r2, [r7, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f7ff fe03 	bl	8000588 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000982:	88fa      	ldrh	r2, [r7, #6]
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	b218      	sxth	r0, r3
 800098c:	88ba      	ldrh	r2, [r7, #4]
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29b      	uxth	r3, r3
 8000994:	b21b      	sxth	r3, r3
 8000996:	883a      	ldrh	r2, [r7, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f7ff fdf5 	bl	8000588 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 800099e:	88fa      	ldrh	r2, [r7, #6]
 80009a0:	89fb      	ldrh	r3, [r7, #14]
 80009a2:	4413      	add	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b218      	sxth	r0, r3
 80009a8:	88ba      	ldrh	r2, [r7, #4]
 80009aa:	8a3b      	ldrh	r3, [r7, #16]
 80009ac:	4413      	add	r3, r2
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	883a      	ldrh	r2, [r7, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f7ff fde7 	bl	8000588 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b218      	sxth	r0, r3
 80009c4:	88ba      	ldrh	r2, [r7, #4]
 80009c6:	8a3b      	ldrh	r3, [r7, #16]
 80009c8:	4413      	add	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	883a      	ldrh	r2, [r7, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fdd9 	bl	8000588 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b218      	sxth	r0, r3
 80009e0:	88ba      	ldrh	r2, [r7, #4]
 80009e2:	8a3b      	ldrh	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	883a      	ldrh	r2, [r7, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff fdcb 	bl	8000588 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80009f2:	88fa      	ldrh	r2, [r7, #6]
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b218      	sxth	r0, r3
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	8a3b      	ldrh	r3, [r7, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	883a      	ldrh	r2, [r7, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f7ff fdbd 	bl	8000588 <writePixel>
    while (x<y) {
 8000a0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	f6ff af67 	blt.w	80008ea <drawCircle+0x9c>
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}

08000a26 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8000a26:	b590      	push	{r4, r7, lr}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	461a      	mov	r2, r3
 8000a34:	4623      	mov	r3, r4
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4603      	mov	r3, r0
 8000a3a:	80bb      	strh	r3, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
 8000a40:	4613      	mov	r3, r2
 8000a42:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	f1c3 0301 	rsb	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	461a      	mov	r2, r3
 8000a56:	03d2      	lsls	r2, r2, #15
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000a68:	e0a5      	b.n	8000bb6 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000a6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0e      	blt.n	8000a90 <drawCircleHelper+0x6a>
            y--;
 8000a72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	3302      	adds	r3, #2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a86:	8afa      	ldrh	r2, [r7, #22]
 8000a88:	8a7b      	ldrh	r3, [r7, #18]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a9c:	8abb      	ldrh	r3, [r7, #20]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000aa4:	8afa      	ldrh	r2, [r7, #22]
 8000aa6:	8abb      	ldrh	r3, [r7, #20]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01b      	beq.n	8000af0 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	8a3b      	ldrh	r3, [r7, #16]
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b218      	sxth	r0, r3
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fd5a 	bl	8000588 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b218      	sxth	r0, r3
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	8a3b      	ldrh	r3, [r7, #16]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fd4c 	bl	8000588 <writePixel>
        }
        if (cornername & 0x2) {
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01b      	beq.n	8000b32 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000afa:	88fa      	ldrh	r2, [r7, #6]
 8000afc:	8a3b      	ldrh	r3, [r7, #16]
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b218      	sxth	r0, r3
 8000b04:	88ba      	ldrh	r2, [r7, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fd39 	bl	8000588 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b218      	sxth	r0, r3
 8000b20:	88ba      	ldrh	r2, [r7, #4]
 8000b22:	8a3b      	ldrh	r3, [r7, #16]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f7ff fd2b 	bl	8000588 <writePixel>
        }
        if (cornername & 0x8) {
 8000b32:	787b      	ldrb	r3, [r7, #1]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01b      	beq.n	8000b74 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	88ba      	ldrh	r2, [r7, #4]
 8000b48:	8a3b      	ldrh	r3, [r7, #16]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fd18 	bl	8000588 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000b58:	88fa      	ldrh	r2, [r7, #6]
 8000b5a:	8a3b      	ldrh	r3, [r7, #16]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b218      	sxth	r0, r3
 8000b62:	88ba      	ldrh	r2, [r7, #4]
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff fd0a 	bl	8000588 <writePixel>
        }
        if (cornername & 0x1) {
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01b      	beq.n	8000bb6 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b218      	sxth	r0, r3
 8000b88:	88ba      	ldrh	r2, [r7, #4]
 8000b8a:	8a3b      	ldrh	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b94:	4619      	mov	r1, r3
 8000b96:	f7ff fcf7 	bl	8000588 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000b9a:	88fa      	ldrh	r2, [r7, #6]
 8000b9c:	8a3b      	ldrh	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b218      	sxth	r0, r3
 8000ba4:	88ba      	ldrh	r2, [r7, #4]
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fce9 	bl	8000588 <writePixel>
    while (x<y) {
 8000bb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	f6ff af53 	blt.w	8000a6a <drawCircleHelper+0x44>
        }
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	4611      	mov	r1, r2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4623      	mov	r3, r4
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	4603      	mov	r3, r0
 8000be2:	80bb      	strh	r3, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	807b      	strh	r3, [r7, #2]
 8000be8:	4613      	mov	r3, r2
 8000bea:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	f1c3 0301 	rsb	r3, r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	03d2      	lsls	r2, r2, #15
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000c10:	8a3b      	ldrh	r3, [r7, #16]
 8000c12:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000c18:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	853b      	strh	r3, [r7, #40]	@ 0x28

    while(x < y) {
 8000c24:	e095      	b.n	8000d52 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0e      	blt.n	8000c4c <fillCircleHelper+0x7e>
            y--;
 8000c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000c3a:	8a7b      	ldrh	r3, [r7, #18]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000c42:	8afa      	ldrh	r2, [r7, #22]
 8000c44:	8a7b      	ldrh	r3, [r7, #18]
 8000c46:	4413      	add	r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000c4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000c58:	8abb      	ldrh	r3, [r7, #20]
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000c60:	8afa      	ldrh	r2, [r7, #22]
 8000c62:	8abb      	ldrh	r3, [r7, #20]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000c6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	db31      	blt.n	8000cda <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000c76:	787b      	ldrb	r3, [r7, #1]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d013      	beq.n	8000ca8 <fillCircleHelper+0xda>
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	8a3b      	ldrh	r3, [r7, #16]
 8000c84:	4413      	add	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b218      	sxth	r0, r3
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b219      	sxth	r1, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000ca4:	f7ff fd27 	bl	80006f6 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d013      	beq.n	8000cda <fillCircleHelper+0x10c>
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	8a3b      	ldrh	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b218      	sxth	r0, r3
 8000cbc:	88ba      	ldrh	r2, [r7, #4]
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b219      	sxth	r1, r3
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cd6:	f7ff fd0e 	bl	80006f6 <drawFastVLine>
        }
        if(y != py) {
 8000cda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d033      	beq.n	8000d4e <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <fillCircleHelper+0x14a>
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b218      	sxth	r0, r3
 8000cfa:	88ba      	ldrh	r2, [r7, #4]
 8000cfc:	89bb      	ldrh	r3, [r7, #12]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b219      	sxth	r1, r3
 8000d04:	89bb      	ldrh	r3, [r7, #12]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d14:	f7ff fcef 	bl	80006f6 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d013      	beq.n	8000d4a <fillCircleHelper+0x17c>
 8000d22:	88fa      	ldrh	r2, [r7, #6]
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b218      	sxth	r0, r3
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b219      	sxth	r1, r3
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d3e:	4413      	add	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d46:	f7ff fcd6 	bl	80006f6 <drawFastVLine>
            py = y;
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000d4e:	8a3b      	ldrh	r3, [r7, #16]
 8000d50:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000d52:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	f6ff af63 	blt.w	8000c26 <fillCircleHelper+0x58>
    }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}

08000d6a <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af02      	add	r7, sp, #8
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	4623      	mov	r3, r4
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	80bb      	strh	r3, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000d88:	88ba      	ldrh	r2, [r7, #4]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	b219      	sxth	r1, r3
 8000d92:	887b      	ldrh	r3, [r7, #2]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000da4:	f7ff fca7 	bl	80006f6 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000da8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000db0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000db4:	883b      	ldrh	r3, [r7, #0]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f7ff ff06 	bl	8000bce <fillCircleHelper>
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}

08000dca <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000dca:	b590      	push	{r4, r7, lr}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4623      	mov	r3, r4
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4603      	mov	r3, r0
 8000dde:	80bb      	strh	r3, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
 8000de4:	4613      	mov	r3, r2
 8000de6:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000de8:	8b3b      	ldrh	r3, [r7, #24]
 8000dea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000df2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000df6:	f7ff fca3 	bl	8000740 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000dfa:	88ba      	ldrh	r2, [r7, #4]
 8000dfc:	883b      	ldrh	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b219      	sxth	r1, r3
 8000e08:	8b3b      	ldrh	r3, [r7, #24]
 8000e0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e12:	f7ff fc95 	bl	8000740 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000e16:	8b3b      	ldrh	r3, [r7, #24]
 8000e18:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000e24:	f7ff fc67 	bl	80006f6 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b218      	sxth	r0, r3
 8000e36:	8b3b      	ldrh	r3, [r7, #24]
 8000e38:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e3c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e40:	f7ff fc59 	bl	80006f6 <drawFastVLine>
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	807b      	strh	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000e6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	bfa8      	it	ge
 8000e76:	4613      	movge	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	0fda      	lsrs	r2, r3, #31
 8000e7c:	4413      	add	r3, r2
 8000e7e:	105b      	asrs	r3, r3, #1
 8000e80:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dd01      	ble.n	8000e92 <drawRoundRect+0x46>
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000e92:	88fa      	ldrh	r2, [r7, #6]
 8000e94:	8c3b      	ldrh	r3, [r7, #32]
 8000e96:	4413      	add	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b218      	sxth	r0, r3
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000eac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000eb0:	f7ff fc46 	bl	8000740 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	8c3b      	ldrh	r3, [r7, #32]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b218      	sxth	r0, r3
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b219      	sxth	r1, r3
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	8c3b      	ldrh	r3, [r7, #32]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000edc:	f7ff fc30 	bl	8000740 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	8c3b      	ldrh	r3, [r7, #32]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b219      	sxth	r1, r3
 8000eea:	883a      	ldrh	r2, [r7, #0]
 8000eec:	8c3b      	ldrh	r3, [r7, #32]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000efe:	f7ff fbfa 	bl	80006f6 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4413      	add	r3, r2
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b218      	sxth	r0, r3
 8000f10:	88ba      	ldrh	r2, [r7, #4]
 8000f12:	8c3b      	ldrh	r3, [r7, #32]
 8000f14:	4413      	add	r3, r2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b219      	sxth	r1, r3
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	8c3b      	ldrh	r3, [r7, #32]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f2a:	f7ff fbe4 	bl	80006f6 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	8c3b      	ldrh	r3, [r7, #32]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b218      	sxth	r0, r3
 8000f38:	88ba      	ldrh	r2, [r7, #4]
 8000f3a:	8c3b      	ldrh	r3, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b219      	sxth	r1, r3
 8000f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f7ff fd6b 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	4413      	add	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	8c3b      	ldrh	r3, [r7, #32]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b218      	sxth	r0, r3
 8000f64:	88ba      	ldrh	r2, [r7, #4]
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b219      	sxth	r1, r3
 8000f6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2302      	movs	r3, #2
 8000f78:	f7ff fd55 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	4413      	add	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	8c3b      	ldrh	r3, [r7, #32]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b218      	sxth	r0, r3
 8000f90:	88ba      	ldrh	r2, [r7, #4]
 8000f92:	883b      	ldrh	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	8c3b      	ldrh	r3, [r7, #32]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b219      	sxth	r1, r3
 8000fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2304      	movs	r3, #4
 8000fae:	f7ff fd3a 	bl	8000a26 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b218      	sxth	r0, r3
 8000fbc:	88ba      	ldrh	r2, [r7, #4]
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	8c3b      	ldrh	r3, [r7, #32]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b219      	sxth	r1, r3
 8000fd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2308      	movs	r3, #8
 8000fda:	f7ff fd24 	bl	8000a26 <drawCircleHelper>
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b087      	sub	sp, #28
 8000fea:	af02      	add	r7, sp, #8
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	80bb      	strh	r3, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001004:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001008:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800100c:	4293      	cmp	r3, r2
 800100e:	bfa8      	it	ge
 8001010:	4613      	movge	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	0fda      	lsrs	r2, r3, #31
 8001016:	4413      	add	r3, r2
 8001018:	105b      	asrs	r3, r3, #1
 800101a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800101c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	429a      	cmp	r2, r3
 8001026:	dd01      	ble.n	800102c <fillRoundRect+0x46>
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	8c3b      	ldrh	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	b29b      	uxth	r3, r3
 8001034:	b218      	sxth	r0, r3
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	8c3b      	ldrh	r3, [r7, #32]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21a      	sxth	r2, r3
 8001044:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001048:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800104c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f7ff fa75 	bl	8000540 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4413      	add	r3, r2
 800105c:	b29a      	uxth	r2, r3
 800105e:	8c3b      	ldrh	r3, [r7, #32]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	b218      	sxth	r0, r3
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	8c3b      	ldrh	r3, [r7, #32]
 800106e:	4413      	add	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	b219      	sxth	r1, r3
 8001074:	883a      	ldrh	r2, [r7, #0]
 8001076:	8c3b      	ldrh	r3, [r7, #32]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21b      	sxth	r3, r3
 8001086:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800108a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800108c:	9201      	str	r2, [sp, #4]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	4622      	mov	r2, r4
 8001094:	f7ff fd9b 	bl	8000bce <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	8c3b      	ldrh	r3, [r7, #32]
 800109c:	4413      	add	r3, r2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b218      	sxth	r0, r3
 80010a2:	88ba      	ldrh	r2, [r7, #4]
 80010a4:	8c3b      	ldrh	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	b219      	sxth	r1, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	8c3b      	ldrh	r3, [r7, #32]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21b      	sxth	r3, r3
 80010be:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80010c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	4622      	mov	r2, r4
 80010cc:	f7ff fd7f 	bl	8000bce <fillCircleHelper>
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}

080010d8 <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	4611      	mov	r1, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	4603      	mov	r3, r0
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 80010f6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80010fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001102:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001106:	8c3b      	ldrh	r3, [r7, #32]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4623      	mov	r3, r4
 800110c:	f7ff fb3d 	bl	800078a <drawLine>
    drawLine(x1, y1, x2, y2, color);
 8001110:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8001114:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001118:	f9b7 1000 	ldrsh.w	r1, [r7]
 800111c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4623      	mov	r3, r4
 8001126:	f7ff fb30 	bl	800078a <drawLine>
    drawLine(x2, y2, x0, y0, color);
 800112a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800112e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001132:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001136:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff fb23 	bl	800078a <drawLine>
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b08f      	sub	sp, #60	@ 0x3c
 8001150:	af00      	add	r7, sp, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800116a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001172:	429a      	cmp	r2, r3
 8001174:	dd0b      	ble.n	800118e <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800117a:	883b      	ldrh	r3, [r7, #0]
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001180:	803b      	strh	r3, [r7, #0]
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800118c:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 800118e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001192:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001196:	429a      	cmp	r2, r3
 8001198:	dd0f      	ble.n	80011ba <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800119a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800119e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80011a0:	883b      	ldrh	r3, [r7, #0]
 80011a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80011a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011a8:	803b      	strh	r3, [r7, #0]
 80011aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80011ae:	843b      	strh	r3, [r7, #32]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 80011ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dd0b      	ble.n	80011de <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	83fb      	strh	r3, [r7, #30]
 80011ca:	883b      	ldrh	r3, [r7, #0]
 80011cc:	80bb      	strh	r3, [r7, #4]
 80011ce:	8bfb      	ldrh	r3, [r7, #30]
 80011d0:	803b      	strh	r3, [r7, #0]
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	83bb      	strh	r3, [r7, #28]
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	8bbb      	ldrh	r3, [r7, #28]
 80011dc:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80011de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d137      	bne.n	800125a <fillTriangle+0x10e>
        a = b = x0;
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80011ee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80011f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 80011f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80011fa:	429a      	cmp	r2, r3
 80011fc:	da02      	bge.n	8001204 <fillTriangle+0xb8>
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001202:	e007      	b.n	8001214 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8001204:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001208:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800120c:	429a      	cmp	r2, r3
 800120e:	dd01      	ble.n	8001214 <fillTriangle+0xc8>
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 8001214:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8001218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800121c:	429a      	cmp	r2, r3
 800121e:	da03      	bge.n	8001228 <fillTriangle+0xdc>
 8001220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001224:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001226:	e008      	b.n	800123a <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8001228:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800122c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001230:	429a      	cmp	r2, r3
 8001232:	dd02      	ble.n	800123a <fillTriangle+0xee>
 8001234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001238:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y0, b-a+1, color);
 800123a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800123c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800124c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001250:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001254:	f7ff fa74 	bl	8000740 <drawFastHLine>
        return;
 8001258:	e0d4      	b.n	8001404 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001264:	883a      	ldrh	r2, [r7, #0]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800126e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29b      	uxth	r3, r3
 8001278:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800127a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001286:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001292:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8001296:	883b      	ldrh	r3, [r7, #0]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80012a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d102      	bne.n	80012b8 <fillTriangle+0x16c>
 80012b2:	883b      	ldrh	r3, [r7, #0]
 80012b4:	863b      	strh	r3, [r7, #48]	@ 0x30
 80012b6:	e003      	b.n	80012c0 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 80012b8:	883b      	ldrh	r3, [r7, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++) {
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80012c4:	e03e      	b.n	8001344 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 80012c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 80012da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 80012ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012f4:	4413      	add	r3, r2
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80012f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012fe:	4413      	add	r3, r2
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001302:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8001306:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800130a:	429a      	cmp	r2, r3
 800130c:	dd05      	ble.n	800131a <fillTriangle+0x1ce>
 800130e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001314:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 800131a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800131c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800132c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001330:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001334:	f7ff fa04 	bl	8000740 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8001338:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800133c:	b29b      	uxth	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001344:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001348:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800134c:	429a      	cmp	r2, r3
 800134e:	ddba      	ble.n	80012c6 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8001350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001354:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8001358:	f9b7 2000 	ldrsh.w	r2, [r7]
 800135c:	1a8a      	subs	r2, r1, r2
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001368:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800136c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001370:	1a8a      	subs	r2, r1, r2
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++) {
 8001378:	e03e      	b.n	80013f8 <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800137a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800137e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001380:	fb92 f3f3 	sdiv	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	4413      	add	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 800138e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001394:	fb92 f3f3 	sdiv	r3, r2, r3
 8001398:	b29a      	uxth	r2, r3
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 80013a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013a8:	4413      	add	r3, r2
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80013ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013b2:	4413      	add	r3, r2
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80013b6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80013ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80013be:	429a      	cmp	r2, r3
 80013c0:	dd05      	ble.n	80013ce <fillTriangle+0x282>
 80013c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013c4:	81fb      	strh	r3, [r7, #14]
 80013c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80013c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
        drawFastHLine(a, y, b-a+1, color);
 80013ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80013d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013e0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80013e4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80013e8:	f7ff f9aa 	bl	8000740 <drawFastHLine>
    for(; y<=y2; y++) {
 80013ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80013f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80013fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001400:	429a      	cmp	r2, r3
 8001402:	ddba      	ble.n	800137a <fillTriangle+0x22e>
    }
}
 8001404:	373c      	adds	r7, #60	@ 0x3c
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
	...

0800140c <fillScreen>:

void fillScreen(uint16_t color) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <fillScreen+0x2c>)
 8001418:	f9b3 2000 	ldrsh.w	r2, [r3]
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <fillScreen+0x30>)
 800141e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	460b      	mov	r3, r1
 8001428:	2100      	movs	r1, #0
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff f888 	bl	8000540 <fillRect>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000094 	.word	0x20000094
 800143c:	20000096 	.word	0x20000096

08001440 <testLines>:



void testLines(uint16_t color)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 800144a:	4b7c      	ldr	r3, [pc, #496]	@ (800163c <testLines+0x1fc>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	617b      	str	r3, [r7, #20]
                  h = _height;
 8001452:	4b7b      	ldr	r3, [pc, #492]	@ (8001640 <testLines+0x200>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ffd6 	bl	800140c <fillScreen>

    x1 = y1 = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	3b01      	subs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e00f      	b.n	8001494 <testLines+0x54>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	b218      	sxth	r0, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	b219      	sxth	r1, r3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	b21a      	sxth	r2, r3
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	b21c      	sxth	r4, r3
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	f7ff f97e 	bl	800078a <drawLine>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3306      	adds	r3, #6
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbeb      	blt.n	8001474 <testLines+0x34>
    x2    = w - 1;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3b01      	subs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	e00f      	b.n	80014c8 <testLines+0x88>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	b218      	sxth	r0, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	b219      	sxth	r1, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	b21c      	sxth	r4, r3
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	f7ff f964 	bl	800078a <drawLine>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	3306      	adds	r3, #6
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbeb      	blt.n	80014a8 <testLines+0x68>

    fillScreen(BLACK);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ff9b 	bl	800140c <fillScreen>

    x1    = w - 1;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e00f      	b.n	800150c <testLines+0xcc>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	b218      	sxth	r0, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	b21c      	sxth	r4, r3
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4623      	mov	r3, r4
 8001502:	f7ff f942 	bl	800078a <drawLine>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3306      	adds	r3, #6
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbeb      	blt.n	80014ec <testLines+0xac>
    x2    = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e00f      	b.n	800153e <testLines+0xfe>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	b218      	sxth	r0, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	b219      	sxth	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	b21a      	sxth	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	b21c      	sxth	r4, r3
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4623      	mov	r3, r4
 8001534:	f7ff f929 	bl	800078a <drawLine>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	3306      	adds	r3, #6
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbeb      	blt.n	800151e <testLines+0xde>

    fillScreen(BLACK);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ff60 	bl	800140c <fillScreen>

    x1    = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	3b01      	subs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e00f      	b.n	8001580 <testLines+0x140>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	b218      	sxth	r0, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	b219      	sxth	r1, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	b21a      	sxth	r2, r3
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	b21c      	sxth	r4, r3
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	f7ff f908 	bl	800078a <drawLine>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3306      	adds	r3, #6
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbeb      	blt.n	8001560 <testLines+0x120>
    x2    = w - 1;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3b01      	subs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	e00f      	b.n	80015b4 <testLines+0x174>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	b218      	sxth	r0, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	b219      	sxth	r1, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	b21c      	sxth	r4, r3
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	f7ff f8ee 	bl	800078a <drawLine>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3306      	adds	r3, #6
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbeb      	blt.n	8001594 <testLines+0x154>

    fillScreen(BLACK);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff ff25 	bl	800140c <fillScreen>

    x1    = w - 1;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e00f      	b.n	80015f8 <testLines+0x1b8>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	b218      	sxth	r0, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	b219      	sxth	r1, r3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	b21c      	sxth	r4, r3
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4623      	mov	r3, r4
 80015ee:	f7ff f8cc 	bl	800078a <drawLine>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3306      	adds	r3, #6
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbeb      	blt.n	80015d8 <testLines+0x198>
    x2    = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	e00f      	b.n	800162a <testLines+0x1ea>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	b218      	sxth	r0, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	b219      	sxth	r1, r3
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	b21a      	sxth	r2, r3
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	b21c      	sxth	r4, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4623      	mov	r3, r4
 8001620:	f7ff f8b3 	bl	800078a <drawLine>
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	3306      	adds	r3, #6
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbeb      	blt.n	800160a <testLines+0x1ca>

}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	@ 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	20000094 	.word	0x20000094
 8001640:	20000096 	.word	0x20000096

08001644 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	80fb      	strh	r3, [r7, #6]
 8001650:	4613      	mov	r3, r2
 8001652:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <testFastLines+0x78>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <testFastLines+0x7c>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fed1 	bl	800140c <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	e00a      	b.n	8001686 <testFastLines+0x42>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	b219      	sxth	r1, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	b21a      	sxth	r2, r3
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff f860 	bl	8000740 <drawFastHLine>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3305      	adds	r3, #5
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf0      	blt.n	8001670 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e00a      	b.n	80016aa <testFastLines+0x66>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	b218      	sxth	r0, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	b21a      	sxth	r2, r3
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	2100      	movs	r1, #0
 80016a0:	f7ff f829 	bl	80006f6 <drawFastVLine>
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3305      	adds	r3, #5
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf0      	blt.n	8001694 <testFastLines+0x50>
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000094 	.word	0x20000094
 80016c0:	20000096 	.word	0x20000096

080016c4 <testRects>:

void testRects(uint16_t color)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b08b      	sub	sp, #44	@ 0x2c
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <testRects+0x9c>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	0fda      	lsrs	r2, r3, #31
 80016d6:	4413      	add	r3, r2
 80016d8:	105b      	asrs	r3, r3, #1
 80016da:	b21b      	sxth	r3, r3
 80016dc:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <testRects+0xa0>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	0fda      	lsrs	r2, r3, #31
 80016e6:	4413      	add	r3, r2
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fe8c 	bl	800140c <fillScreen>
    n     = min(_width, _height);
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <testRects+0xa0>)
 80016f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <testRects+0x9c>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	4293      	cmp	r3, r2
 8001702:	bfa8      	it	ge
 8001704:	4613      	movge	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e01e      	b.n	800174e <testRects+0x8a>
        i2 = i / 2;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	0fda      	lsrs	r2, r3, #31
 8001714:	4413      	add	r3, r2
 8001716:	105b      	asrs	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	b29b      	uxth	r3, r3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	b218      	sxth	r0, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	b29b      	uxth	r3, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	b219      	sxth	r1, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b21a      	sxth	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	b21c      	sxth	r4, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4623      	mov	r3, r4
 8001744:	f7ff fb41 	bl	8000dca <drawRect>
    for (i = 2; i < n; i += 6) {
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3306      	adds	r3, #6
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbdc      	blt.n	8001710 <testRects+0x4c>
    }

}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3724      	adds	r7, #36	@ 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000094 	.word	0x20000094
 8001764:	20000096 	.word	0x20000096

08001768 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	@ 0x2c
 800176c:	af02      	add	r7, sp, #8
 800176e:	4603      	mov	r3, r0
 8001770:	460a      	mov	r2, r1
 8001772:	80fb      	strh	r3, [r7, #6]
 8001774:	4613      	mov	r3, r2
 8001776:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <testFilledRects+0xd4>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	0fda      	lsrs	r2, r3, #31
 8001780:	4413      	add	r3, r2
 8001782:	105b      	asrs	r3, r3, #1
 8001784:	b21b      	sxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <testFilledRects+0xd8>)
 800178c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001790:	0fda      	lsrs	r2, r3, #31
 8001792:	4413      	add	r3, r2
 8001794:	105b      	asrs	r3, r3, #1
 8001796:	b21b      	sxth	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fe35 	bl	800140c <fillScreen>
    n = min(_width, _height);
 80017a2:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <testFilledRects+0xd8>)
 80017a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <testFilledRects+0xd4>)
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	bfa8      	it	ge
 80017b2:	4613      	movge	r3, r2
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	e035      	b.n	800182a <testFilledRects+0xc2>
        i2    = i / 2;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	0fda      	lsrs	r2, r3, #31
 80017c2:	4413      	add	r3, r2
 80017c4:	105b      	asrs	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b219      	sxth	r1, r3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	b21c      	sxth	r4, r3
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	f7fe fea5 	bl	8000540 <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b218      	sxth	r0, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	b29b      	uxth	r3, r3
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29b      	uxth	r3, r3
 8001810:	b219      	sxth	r1, r3
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	b21a      	sxth	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	b21c      	sxth	r4, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4623      	mov	r3, r4
 8001820:	f7ff fad3 	bl	8000dca <drawRect>
    for (i = n; i > 0; i -= 6) {
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	3b06      	subs	r3, #6
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	dcc6      	bgt.n	80017be <testFilledRects+0x56>
    }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000094 	.word	0x20000094
 8001840:	20000096 	.word	0x20000096

08001844 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <testFilledCircles+0x74>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <testFilledCircles+0x78>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fdce 	bl	800140c <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e017      	b.n	80018a6 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e00c      	b.n	8001896 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	b218      	sxth	r0, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	b219      	sxth	r1, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	b21a      	sxth	r2, r3
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	f7ff fa6e 	bl	8000d6a <fillCircle>
        for (y = radius; y < h; y += r2) {
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbee      	blt.n	800187c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbe3      	blt.n	8001876 <testFilledCircles+0x32>
        }
    }

}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000094 	.word	0x20000094
 80018bc:	20000096 	.word	0x20000096

080018c0 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <testCircles+0x7c>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	461a      	mov	r2, r3
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4413      	add	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <testCircles+0x80>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	461a      	mov	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e017      	b.n	8001928 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	e00c      	b.n	8001918 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	b218      	sxth	r0, r3
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	b219      	sxth	r1, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	b21a      	sxth	r2, r3
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	f7fe ff9f 	bl	800084e <drawCircle>
        for (y = 0; y < h; y += r2) {
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbee      	blt.n	80018fe <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbe3      	blt.n	80018f8 <testCircles+0x38>
        }
    }

}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3720      	adds	r7, #32
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000094 	.word	0x20000094
 8001940:	20000096 	.word	0x20000096

08001944 <testTriangles>:

void testTriangles()
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800194a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <testTriangles+0xc0>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	0fda      	lsrs	r2, r3, #31
 8001952:	4413      	add	r3, r2
 8001954:	105b      	asrs	r3, r3, #1
 8001956:	b21b      	sxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <testTriangles+0xc4>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	4413      	add	r3, r2
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	b21b      	sxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fd4c 	bl	800140c <fillScreen>
    n     = min(cx, cy);
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4293      	cmp	r3, r2
 800197a:	bfa8      	it	ge
 800197c:	4613      	movge	r3, r2
 800197e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e035      	b.n	80019f2 <testTriangles+0xae>
        drawTriangle(
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
        drawTriangle(
 8001996:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
        drawTriangle(
 80019a4:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
        drawTriangle(
 80019b2:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b29b      	uxth	r3, r3
        drawTriangle(
 80019c0:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	b291      	uxth	r1, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	b292      	uxth	r2, r2
 80019ca:	440a      	add	r2, r1
 80019cc:	b292      	uxth	r2, r2
        drawTriangle(
 80019ce:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	10c9      	asrs	r1, r1, #3
 80019d4:	b289      	uxth	r1, r1
        drawTriangle(
 80019d6:	f001 011f 	and.w	r1, r1, #31
 80019da:	b289      	uxth	r1, r1
 80019dc:	9102      	str	r1, [sp, #8]
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4633      	mov	r3, r6
 80019e4:	462a      	mov	r2, r5
 80019e6:	4621      	mov	r1, r4
 80019e8:	f7ff fb76 	bl	80010d8 <drawTriangle>
    for (i = 0; i < n; i += 5) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3305      	adds	r3, #5
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbc5      	blt.n	8001986 <testTriangles+0x42>
    }

}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a04:	20000094 	.word	0x20000094
 8001a08:	20000096 	.word	0x20000096

08001a0c <testFilledTriangles>:

void testFilledTriangles() {
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8001a12:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <testFilledTriangles+0x158>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	0fda      	lsrs	r2, r3, #31
 8001a1a:	4413      	add	r3, r2
 8001a1c:	105b      	asrs	r3, r3, #1
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <testFilledTriangles+0x15c>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	4413      	add	r3, r2
 8001a2e:	105b      	asrs	r3, r3, #1
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fce8 	bl	800140c <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bfa8      	it	ge
 8001a44:	4613      	movge	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e083      	b.n	8001b52 <testFilledTriangles+0x146>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	b21c      	sxth	r4, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b21d      	sxth	r5, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21e      	sxth	r6, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	fa0f fc83 	sxth.w	ip, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	b291      	uxth	r1, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	440a      	add	r2, r1
 8001a92:	b292      	uxth	r2, r2
 8001a94:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	b209      	sxth	r1, r1
 8001a9a:	00c9      	lsls	r1, r1, #3
 8001a9c:	b209      	sxth	r1, r1
 8001a9e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8001aa2:	b208      	sxth	r0, r1
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	10c9      	asrs	r1, r1, #3
 8001aa8:	b209      	sxth	r1, r1
 8001aaa:	f001 011f 	and.w	r1, r1, #31
 8001aae:	b209      	sxth	r1, r1
 8001ab0:	4301      	orrs	r1, r0
 8001ab2:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ab4:	b289      	uxth	r1, r1
 8001ab6:	9102      	str	r1, [sp, #8]
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4663      	mov	r3, ip
 8001abe:	4632      	mov	r2, r6
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fb42 	bl	800114c <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	b21c      	sxth	r4, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b21d      	sxth	r5, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21e      	sxth	r6, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	fa0f fc83 	sxth.w	ip, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b299      	uxth	r1, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	440b      	add	r3, r1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	b218      	sxth	r0, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4303      	orrs	r3, r0
 8001b36:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	9101      	str	r1, [sp, #4]
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	4663      	mov	r3, ip
 8001b42:	4632      	mov	r2, r6
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fac6 	bl	80010d8 <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3b05      	subs	r3, #5
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	f73f af78 	bgt.w	8001a4a <testFilledTriangles+0x3e>
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b64:	20000094 	.word	0x20000094
 8001b68:	20000096 	.word	0x20000096

08001b6c <testRoundRects>:

void testRoundRects() {
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <testRoundRects+0xd4>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	0fda      	lsrs	r2, r3, #31
 8001b7a:	4413      	add	r3, r2
 8001b7c:	105b      	asrs	r3, r3, #1
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001b84:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <testRoundRects+0xd8>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	0fda      	lsrs	r2, r3, #31
 8001b8c:	4413      	add	r3, r2
 8001b8e:	105b      	asrs	r3, r3, #1
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7ff fc38 	bl	800140c <fillScreen>
    w     = min(_width, _height);
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <testRoundRects+0xd8>)
 8001b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <testRoundRects+0xd4>)
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bfa8      	it	ge
 8001bac:	4613      	movge	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	60fb      	str	r3, [r7, #12]
    red = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8001bb6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e032      	b.n	8001c2e <testRoundRects+0xc2>
        i2 = i / 2;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	0fda      	lsrs	r2, r3, #31
 8001bcc:	4413      	add	r3, r2
 8001bce:	105b      	asrs	r3, r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
        red += step;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b218      	sxth	r0, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b219      	sxth	r1, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	b21c      	sxth	r4, r3
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	b21d      	sxth	r5, r3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da00      	bge.n	8001c06 <testRoundRects+0x9a>
 8001c04:	3307      	adds	r3, #7
 8001c06:	10db      	asrs	r3, r3, #3
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c16:	f023 0307 	bic.w	r3, r3, #7
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f7ff f912 	bl	8000e4c <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3306      	adds	r3, #6
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbc8      	blt.n	8001bc8 <testRoundRects+0x5c>
    }

}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c40:	20000094 	.word	0x20000094
 8001c44:	20000096 	.word	0x20000096

08001c48 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001c4e:	4b36      	ldr	r3, [pc, #216]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	0fda      	lsrs	r2, r3, #31
 8001c56:	4413      	add	r3, r2
 8001c58:	105b      	asrs	r3, r3, #1
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	0fda      	lsrs	r2, r3, #31
 8001c68:	4413      	add	r3, r2
 8001c6a:	105b      	asrs	r3, r3, #1
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fbca 	bl	800140c <fillScreen>
    green = 256;
 8001c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7c:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001c80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c84:	4b28      	ldr	r3, [pc, #160]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfa8      	it	ge
 8001c8e:	4613      	movge	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c9c:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <testFilledRoundRects+0xe4>)
 8001ca0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <testFilledRoundRects+0xe0>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	4293      	cmp	r3, r2
 8001cac:	bfa8      	it	ge
 8001cae:	4613      	movge	r3, r2
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e030      	b.n	8001d18 <testFilledRoundRects+0xd0>
        i2 = i / 2;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	0fda      	lsrs	r2, r3, #31
 8001cba:	4413      	add	r3, r2
 8001cbc:	105b      	asrs	r3, r3, #1
 8001cbe:	603b      	str	r3, [r7, #0]
        green -= step;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b218      	sxth	r0, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b219      	sxth	r1, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	b21c      	sxth	r4, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	b21d      	sxth	r5, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da00      	bge.n	8001cf4 <testFilledRoundRects+0xac>
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	10db      	asrs	r3, r3, #3
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8001d04:	b292      	uxth	r2, r2
 8001d06:	9201      	str	r2, [sp, #4]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	f7ff f96a 	bl	8000fe6 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3b06      	subs	r3, #6
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b14      	cmp	r3, #20
 8001d1c:	dccb      	bgt.n	8001cb6 <testFilledRoundRects+0x6e>
    }

}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdb0      	pop	{r4, r5, r7, pc}
 8001d28:	20000094 	.word	0x20000094
 8001d2c:	20000096 	.word	0x20000096

08001d30 <testFillScreen>:
void testFillScreen()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fb69 	bl	800140c <fillScreen>
    fillScreen(RED);
 8001d3a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001d3e:	f7ff fb65 	bl	800140c <fillScreen>
    fillScreen(GREEN);
 8001d42:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001d46:	f7ff fb61 	bl	800140c <fillScreen>
    fillScreen(BLUE);
 8001d4a:	201f      	movs	r0, #31
 8001d4c:	f7ff fb5e 	bl	800140c <fillScreen>
    fillScreen(BLACK);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fb5b 	bl	800140c <fillScreen>
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <testAll>:

void testAll (void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
	testFillScreen();
 8001d5e:	f7ff ffe7 	bl	8001d30 <testFillScreen>
	testLines(CYAN);
 8001d62:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001d66:	f7ff fb6b 	bl	8001440 <testLines>
	testFastLines(RED, BLUE);
 8001d6a:	211f      	movs	r1, #31
 8001d6c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001d70:	f7ff fc68 	bl	8001644 <testFastLines>
	testRects(GREEN);
 8001d74:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001d78:	f7ff fca4 	bl	80016c4 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001d7c:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001d80:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001d84:	f7ff fcf0 	bl	8001768 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001d88:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f7ff fd59 	bl	8001844 <testFilledCircles>
	testCircles(10, WHITE);
 8001d92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d96:	200a      	movs	r0, #10
 8001d98:	f7ff fd92 	bl	80018c0 <testCircles>
	testTriangles();
 8001d9c:	f7ff fdd2 	bl	8001944 <testTriangles>
	testFilledTriangles();
 8001da0:	f7ff fe34 	bl	8001a0c <testFilledTriangles>
	testRoundRects();
 8001da4:	f7ff fee2 	bl	8001b6c <testRoundRects>
	testFilledRoundRects();
 8001da8:	f7ff ff4e 	bl	8001c48 <testFilledRoundRects>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_SPI_ErrorCallback>:
//	         spi_ready = 1;  // if you're using a flagc
//	         //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
//	     }
// }

 void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d11c      	bne.n	8001dfe <HAL_SPI_ErrorCallback+0x4e>
         // Clean up DMA state on error
         if (dma_buffer != NULL) {
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_SPI_ErrorCallback+0x32>
             free(dma_buffer);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f005 fd81 	bl	80078d8 <free>
             dma_buffer = NULL;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_SPI_ErrorCallback+0x5c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_SPI_ErrorCallback+0x60>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
         }
         ST7735_Unselect();
 8001de2:	f000 f87d 	bl	8001ee0 <ST7735_Unselect>
         spi_ready = 1;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_SPI_ErrorCallback+0x64>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
         dma_active = 0;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_SPI_ErrorCallback+0x68>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]

         // Optional: Reset SPI peripheral if needed
         HAL_SPI_DeInit(&ST7735_SPI_PORT);
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001df4:	f003 fd8b 	bl	800590e <HAL_SPI_DeInit>
         HAL_SPI_Init(&ST7735_SPI_PORT);
 8001df8:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <HAL_SPI_ErrorCallback+0x58>)
 8001dfa:	f003 fce5 	bl	80057c8 <HAL_SPI_Init>
     }
 }
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000130 	.word	0x20000130
 8001e0c:	200000a0 	.word	0x200000a0
 8001e10:	200000a4 	.word	0x200000a4
 8001e14:	20000000 	.word	0x20000000
 8001e18:	2000009d 	.word	0x2000009d

08001e1c <HAL_SPI_TxCpltCallback>:

 void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
     if (hspi->Instance == ST7735_SPI_PORT.Instance) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_SPI_TxCpltCallback+0x4c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d116      	bne.n	8001e5e <HAL_SPI_TxCpltCallback+0x42>
         // Free the previous DMA buffer if it exists
         if (dma_buffer != NULL) {
 8001e30:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_SPI_TxCpltCallback+0x32>
             free(dma_buffer);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 fd4b 	bl	80078d8 <free>
             dma_buffer = NULL;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_SPI_TxCpltCallback+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
             dma_buffer_size = 0;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_SPI_TxCpltCallback+0x54>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
         }

         ST7735_Unselect();
 8001e4e:	f000 f847 	bl	8001ee0 <ST7735_Unselect>
         spi_ready = 1;      // SPI is now ready
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_SPI_TxCpltCallback+0x58>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
         dma_active = 0;     // DMA is no longer active
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_SPI_TxCpltCallback+0x5c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
     }
 }
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000130 	.word	0x20000130
 8001e6c:	200000a0 	.word	0x200000a0
 8001e70:	200000a4 	.word	0x200000a4
 8001e74:	20000000 	.word	0x20000000
 8001e78:	2000009d 	.word	0x2000009d

08001e7c <ST7735_WaitForDMA>:
//          dma_busy = 0;
//          // Optionally trigger next transfer here
//      }
//  }

 void ST7735_WaitForDMA(void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
     uint32_t timeout = 1000;  // Reasonable timeout
 8001e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e86:	607b      	str	r3, [r7, #4]
     while(dma_active && timeout--) {
 8001e88:	e000      	b.n	8001e8c <ST7735_WaitForDMA+0x10>
         __NOP();  // Wait or yield to RTOS if you're using one
 8001e8a:	bf00      	nop
     while(dma_active && timeout--) {
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <ST7735_WaitForDMA+0x44>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <ST7735_WaitForDMA+0x24>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f4      	bne.n	8001e8a <ST7735_WaitForDMA+0xe>
     }
     if (timeout == 0) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <ST7735_WaitForDMA+0x36>
         // Handle timeout error
         dma_active = 0;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <ST7735_WaitForDMA+0x44>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
         spi_ready = 1;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <ST7735_WaitForDMA+0x48>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
     }
 }
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	2000009d 	.word	0x2000009d
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <ST7735_Select>:


void ST7735_Select()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);//to select the LCD and start the communication CS=0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ed2:	4802      	ldr	r0, [pc, #8]	@ (8001edc <ST7735_Select+0x14>)
 8001ed4:	f002 f8ca 	bl	800406c <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	48000c00 	.word	0x48000c00

08001ee0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);//to deselect the LCD set CS=1
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eea:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <ST7735_Unselect+0x14>)
 8001eec:	f002 f8be 	bl	800406c <HAL_GPIO_WritePin>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	48000c00 	.word	0x48000c00

08001ef8 <ST7735_Reset>:

void ST7735_Reset()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);//first reset =0
 8001efc:	2200      	movs	r2, #0
 8001efe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f02:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <ST7735_Reset+0x28>)
 8001f04:	f002 f8b2 	bl	800406c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f08:	2005      	movs	r0, #5
 8001f0a:	f001 f9ed 	bl	80032e8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);//reset=1
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <ST7735_Reset+0x28>)
 8001f16:	f002 f8a9 	bl	800406c <HAL_GPIO_WritePin>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	48000c00 	.word	0x48000c00

08001f24 <ST7735_WriteCommand>:
//    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);//to send data DC=1
//    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,HAL_MAX_DELAY);
//	//HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
//
//}
void ST7735_WriteCommand(uint8_t cmd) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8001f2e:	f7ff ffa5 	bl	8001e7c <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f38:	4806      	ldr	r0, [pc, #24]	@ (8001f54 <ST7735_WriteCommand+0x30>)
 8001f3a:	f002 f897 	bl	800406c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, 1, HAL_MAX_DELAY);
 8001f3e:	1df9      	adds	r1, r7, #7
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	2201      	movs	r2, #1
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <ST7735_WriteCommand+0x34>)
 8001f48:	f003 fd09 	bl	800595e <HAL_SPI_Transmit>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	48001400 	.word	0x48001400
 8001f58:	20000130 	.word	0x20000130

08001f5c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    ST7735_WaitForDMA();  // Wait for any DMA to complete
 8001f66:	f7ff ff89 	bl	8001e7c <ST7735_WaitForDMA>

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f70:	4807      	ldr	r0, [pc, #28]	@ (8001f90 <ST7735_WriteData+0x34>)
 8001f72:	f002 f87b 	bl	800406c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <ST7735_WriteData+0x38>)
 8001f82:	f003 fcec 	bl	800595e <HAL_SPI_Transmit>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	48001400 	.word	0x48001400
 8001f94:	20000130 	.word	0x20000130

08001f98 <DisplayInit>:

void DisplayInit(const uint8_t *addr)//the pointer that points to the series of commands which has the list of commands,arguments total, arguments,optional delay
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;//the number of command is stored in numCommand and the pointer is incremented
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 8001faa:	e034      	b.n	8002016 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;//cmd stores the command and pointer is updated
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);//the command is sent via SPI_DMA
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ffb3 	bl	8001f24 <ST7735_WriteCommand>

        numArgs = *addr++;//the pointer stores the number of arguments and increments
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;//if the delay is calculated by taking AND of number of argument and delay
 8001fc8:	7abb      	ldrb	r3, [r7, #10]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;//if delay is same the num argument and the invert of DELAY AND will give zero
 8001fd2:	7abb      	ldrb	r3, [r7, #10]
 8001fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {//if it is more then 1 write the arguments
 8001fda:	7abb      	ldrb	r3, [r7, #10]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);//send the buffer and buffer's size
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffb9 	bl	8001f5c <ST7735_WriteData>
            addr += numArgs;//adder pointer is added by numArgs
 8001fea:	7abb      	ldrb	r3, [r7, #10]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001ff2:	89bb      	ldrh	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <DisplayInit+0x7e>
            ms = *addr++;//the pointer is pointed in ms then incremented
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;//if the ms is 25 update it to 500
 8002002:	89bb      	ldrh	r3, [r7, #12]
 8002004:	2bff      	cmp	r3, #255	@ 0xff
 8002006:	d102      	bne.n	800200e <DisplayInit+0x76>
 8002008:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800200c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800200e:	89bb      	ldrh	r3, [r7, #12]
 8002010:	4618      	mov	r0, r3
 8002012:	f001 f969 	bl	80032e8 <HAL_Delay>
    while(numCommands--) {// the while loop will follow with command is decremented until total commands is zero
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	73fa      	strb	r2, [r7, #15]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1c5      	bne.n	8001fac <DisplayInit+0x14>
        }
    }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	4603      	mov	r3, r0
 8002040:	71bb      	strb	r3, [r7, #6]
 8002042:	460b      	mov	r3, r1
 8002044:	717b      	strb	r3, [r7, #5]
 8002046:	4613      	mov	r3, r2
 8002048:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);//column address
 800204a:	202a      	movs	r0, #42	@ 0x2a
 800204c:	f7ff ff6a 	bl	8001f24 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002050:	2300      	movs	r3, #0
 8002052:	733b      	strb	r3, [r7, #12]
 8002054:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <ST7735_SetAddressWindow+0x88>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4413      	add	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	737b      	strb	r3, [r7, #13]
 8002060:	2300      	movs	r3, #0
 8002062:	73bb      	strb	r3, [r7, #14]
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <ST7735_SetAddressWindow+0x88>)
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	797b      	ldrb	r3, [r7, #5]
 800206a:	4413      	add	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	2104      	movs	r1, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff70 	bl	8001f5c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);// row address
 800207c:	202b      	movs	r0, #43	@ 0x2b
 800207e:	f7ff ff51 	bl	8001f24 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <ST7735_SetAddressWindow+0x8c>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	4413      	add	r3, r2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <ST7735_SetAddressWindow+0x8c>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	793b      	ldrb	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2104      	movs	r1, #4
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5b 	bl	8001f5c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80020a6:	202c      	movs	r0, #44	@ 0x2c
 80020a8:	f7ff ff3c 	bl	8001f24 <ST7735_WriteCommand>
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	2000009b 	.word	0x2000009b
 80020b8:	2000009c 	.word	0x2000009c

080020bc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80020c6:	f7ff feff 	bl	8001ec8 <ST7735_Select>
    ST7735_Reset();
 80020ca:	f7ff ff15 	bl	8001ef8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80020ce:	480c      	ldr	r0, [pc, #48]	@ (8002100 <ST7735_Init+0x44>)
 80020d0:	f7ff ff62 	bl	8001f98 <DisplayInit>
    DisplayInit(init_cmds2);
 80020d4:	480b      	ldr	r0, [pc, #44]	@ (8002104 <ST7735_Init+0x48>)
 80020d6:	f7ff ff5f 	bl	8001f98 <DisplayInit>
    DisplayInit(init_cmds3);
 80020da:	480b      	ldr	r0, [pc, #44]	@ (8002108 <ST7735_Init+0x4c>)
 80020dc:	f7ff ff5c 	bl	8001f98 <DisplayInit>
//    The color order (RGB vs BGR).
#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <ST7735_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <ST7735_Init+0x54>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f810 	bl	8002114 <ST7735_SetRotation>
    ST7735_Unselect();
 80020f4:	f7ff fef4 	bl	8001ee0 <ST7735_Unselect>

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08007c14 	.word	0x08007c14
 8002104:	08007c4c 	.word	0x08007c4c
 8002108:	08007c5c 	.word	0x08007c5c
 800210c:	20000099 	.word	0x20000099
 8002110:	2000009a 	.word	0x2000009a

08002114 <ST7735_SetRotation>:
//
//2: upside-down portrait (rotated 180°)
//
//3: landscape (rotated 270°)
void ST7735_SetRotation(uint8_t m)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b33      	ldr	r3, [pc, #204]	@ (80021f8 <ST7735_SetRotation+0xe4>)
 800212c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800212e:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <ST7735_SetRotation+0xe4>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d84e      	bhi.n	80021d4 <ST7735_SetRotation+0xc0>
 8002136:	a201      	add	r2, pc, #4	@ (adr r2, 800213c <ST7735_SetRotation+0x28>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800216f 	.word	0x0800216f
 8002144:	08002191 	.word	0x08002191
 8002148:	080021b3 	.word	0x080021b3
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;//selecting the right madctl bit
 800214c:	23c0      	movs	r3, #192	@ 0xc0
 800214e:	73fb      	strb	r3, [r7, #15]
      //ST7735_MADCTL_MX → mirror X (flip left-right)
//      ST7735_MADCTL_MY → mirror Y (flip top-bottom)
//      ST7735_MADCTL_MV → swap X and Y (transpose image axes)
//      ST7735_MADCTL_BGR / RGB → color order (Blue-Green-Red or Red-Green-Blue)
      _height = ST7735_HEIGHT;
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <ST7735_SetRotation+0xe8>)
 8002152:	22a0      	movs	r2, #160	@ 0xa0
 8002154:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002156:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <ST7735_SetRotation+0xec>)
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <ST7735_SetRotation+0xf0>)
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <ST7735_SetRotation+0xf4>)
 8002162:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <ST7735_SetRotation+0xf8>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <ST7735_SetRotation+0xfc>)
 800216a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800216c:	e032      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800216e:	23a0      	movs	r3, #160	@ 0xa0
 8002170:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8002172:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <ST7735_SetRotation+0xec>)
 8002174:	22a0      	movs	r2, #160	@ 0xa0
 8002176:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002178:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <ST7735_SetRotation+0xe8>)
 800217a:	2280      	movs	r2, #128	@ 0x80
 800217c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <ST7735_SetRotation+0xf0>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <ST7735_SetRotation+0xfc>)
 8002184:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <ST7735_SetRotation+0xf8>)
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <ST7735_SetRotation+0xf4>)
 800218c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800218e:	e021      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <ST7735_SetRotation+0xe8>)
 8002196:	22a0      	movs	r2, #160	@ 0xa0
 8002198:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800219a:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <ST7735_SetRotation+0xec>)
 800219c:	2280      	movs	r2, #128	@ 0x80
 800219e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80021a0:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <ST7735_SetRotation+0xf0>)
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <ST7735_SetRotation+0xf4>)
 80021a6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <ST7735_SetRotation+0xf8>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <ST7735_SetRotation+0xfc>)
 80021ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021b0:	e010      	b.n	80021d4 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80021b2:	2360      	movs	r3, #96	@ 0x60
 80021b4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80021b6:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <ST7735_SetRotation+0xec>)
 80021b8:	22a0      	movs	r2, #160	@ 0xa0
 80021ba:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <ST7735_SetRotation+0xe8>)
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <ST7735_SetRotation+0xf0>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <ST7735_SetRotation+0xfc>)
 80021c8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <ST7735_SetRotation+0xf8>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <ST7735_SetRotation+0xf4>)
 80021d0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021d2:	bf00      	nop
  }
  ST7735_Select();
 80021d4:	f7ff fe78 	bl	8001ec8 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80021d8:	2036      	movs	r0, #54	@ 0x36
 80021da:	f7ff fea3 	bl	8001f24 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80021de:	f107 030f 	add.w	r3, r7, #15
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff feb9 	bl	8001f5c <ST7735_WriteData>
  ST7735_Unselect();
 80021ea:	f7ff fe79 	bl	8001ee0 <ST7735_Unselect>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000098 	.word	0x20000098
 80021fc:	20000096 	.word	0x20000096
 8002200:	20000094 	.word	0x20000094
 8002204:	20000099 	.word	0x20000099
 8002208:	2000009b 	.word	0x2000009b
 800220c:	2000009a 	.word	0x2000009a
 8002210:	2000009c 	.word	0x2000009c

08002214 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	460b      	mov	r3, r1
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <ST7735_DrawPixel+0x74>)
 800222a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800222e:	4293      	cmp	r3, r2
 8002230:	da26      	bge.n	8002280 <ST7735_DrawPixel+0x6c>
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <ST7735_DrawPixel+0x78>)
 8002236:	f9b2 2000 	ldrsh.w	r2, [r2]
 800223a:	4293      	cmp	r3, r2
 800223c:	da20      	bge.n	8002280 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800223e:	f7ff fe43 	bl	8001ec8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	b2d9      	uxtb	r1, r3
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f7ff fee7 	bl	800202c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	733b      	strb	r3, [r7, #12]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2102      	movs	r1, #2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe71 	bl	8001f5c <ST7735_WriteData>

    ST7735_Unselect();
 800227a:	f7ff fe31 	bl	8001ee0 <ST7735_Unselect>
 800227e:	e000      	b.n	8002282 <ST7735_DrawPixel+0x6e>
        return;
 8002280:	bf00      	nop
}
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000094 	.word	0x20000094
 800228c:	20000096 	.word	0x20000096

08002290 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002290:	b082      	sub	sp, #8
 8002292:	b590      	push	{r4, r7, lr}
 8002294:	b089      	sub	sp, #36	@ 0x24
 8002296:	af00      	add	r7, sp, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
 800229e:	460b      	mov	r3, r1
 80022a0:	80bb      	strh	r3, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	b2d8      	uxtb	r0, r3
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	b2d9      	uxtb	r1, r3
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80022b6:	4413      	add	r3, r2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b2dc      	uxtb	r4, r3
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022c6:	4413      	add	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4622      	mov	r2, r4
 80022d0:	f7ff feac 	bl	800202c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e043      	b.n	8002362 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80022da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	3b20      	subs	r3, #32
 80022e0:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	440b      	add	r3, r1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	e029      	b.n	8002350 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800230c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	743b      	strb	r3, [r7, #16]
 8002316:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002318:	b2db      	uxtb	r3, r3
 800231a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe1a 	bl	8001f5c <ST7735_WriteData>
 8002328:	e00f      	b.n	800234a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800232a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	733b      	strb	r3, [r7, #12]
 8002336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800233a:	b2db      	uxtb	r3, r3
 800233c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2102      	movs	r1, #2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fe09 	bl	8001f5c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002354:	461a      	mov	r2, r3
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4293      	cmp	r3, r2
 800235a:	d3cf      	bcc.n	80022fc <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002366:	461a      	mov	r2, r3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4293      	cmp	r3, r2
 800236c:	d3b5      	bcc.n	80022da <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3724      	adds	r7, #36	@ 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800237a:	b002      	add	sp, #8
 800237c:	4770      	bx	lr
	...

08002380 <ST7735_WriteString>:
//        str++;
//    }
//
//    ST7735_Unselect();
//}
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002380:	b082      	sub	sp, #8
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af04      	add	r7, sp, #16
 8002388:	603a      	str	r2, [r7, #0]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	4603      	mov	r3, r0
 800238e:	80fb      	strh	r3, [r7, #6]
 8002390:	460b      	mov	r3, r1
 8002392:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002394:	f7ff fd98 	bl	8001ec8 <ST7735_Select>

    while (*str) {
 8002398:	e04a      	b.n	8002430 <ST7735_WriteString+0xb0>
        if (*str == '\r') {
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b0d      	cmp	r3, #13
 80023a0:	d103      	bne.n	80023aa <ST7735_WriteString+0x2a>
            str++;  // skip carriage return
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	603b      	str	r3, [r7, #0]
            continue;
 80023a8:	e042      	b.n	8002430 <ST7735_WriteString+0xb0>
        }

        if (*str == '\n') {
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b0a      	cmp	r3, #10
 80023b0:	d112      	bne.n	80023d8 <ST7735_WriteString+0x58>
            x = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023b6:	7d7b      	ldrb	r3, [r7, #21]
 80023b8:	461a      	mov	r2, r3
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80023c0:	88bb      	ldrh	r3, [r7, #4]
 80023c2:	7d7a      	ldrb	r2, [r7, #21]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a23      	ldr	r2, [pc, #140]	@ (8002454 <ST7735_WriteString+0xd4>)
 80023c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	da34      	bge.n	800243a <ST7735_WriteString+0xba>
                break;  // no more space on screen
            }
            str++;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
            continue;
 80023d6:	e02b      	b.n	8002430 <ST7735_WriteString+0xb0>
        }

        if (x + font.width >= _width) {
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	7d3a      	ldrb	r2, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1e      	ldr	r2, [pc, #120]	@ (8002458 <ST7735_WriteString+0xd8>)
 80023e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	db0e      	blt.n	8002406 <ST7735_WriteString+0x86>
            x = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80023ec:	7d7b      	ldrb	r3, [r7, #21]
 80023ee:	461a      	mov	r2, r3
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	7d7a      	ldrb	r2, [r7, #21]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <ST7735_WriteString+0xd4>)
 80023fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002402:	4293      	cmp	r3, r2
 8002404:	da1b      	bge.n	800243e <ST7735_WriteString+0xbe>
                break;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	88b9      	ldrh	r1, [r7, #4]
 800240c:	88f8      	ldrh	r0, [r7, #6]
 800240e:	8c3b      	ldrh	r3, [r7, #32]
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	8bbb      	ldrh	r3, [r7, #28]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f7ff ff38 	bl	8002290 <ST7735_WriteChar>
        x += font.width;
 8002420:	7d3b      	ldrb	r3, [r7, #20]
 8002422:	461a      	mov	r2, r3
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4413      	add	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
        str++;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	603b      	str	r3, [r7, #0]
    while (*str) {
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1b0      	bne.n	800239a <ST7735_WriteString+0x1a>
 8002438:	e002      	b.n	8002440 <ST7735_WriteString+0xc0>
                break;  // no more space on screen
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <ST7735_WriteString+0xc0>
                break;
 800243e:	bf00      	nop
    }

    ST7735_Unselect();
 8002440:	f7ff fd4e 	bl	8001ee0 <ST7735_Unselect>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800244e:	b002      	add	sp, #8
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000096 	.word	0x20000096
 8002458:	20000094 	.word	0x20000094

0800245c <ST7735_WriteStringWithSeparators>:
void ST7735_WriteStringWithSeparators(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800245c:	b082      	sub	sp, #8
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af04      	add	r7, sp, #16
 8002464:	603a      	str	r2, [r7, #0]
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	4603      	mov	r3, r0
 800246a:	80fb      	strh	r3, [r7, #6]
 800246c:	460b      	mov	r3, r1
 800246e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();//X COLUMN,Y ROWS
 8002470:	f7ff fd2a 	bl	8001ec8 <ST7735_Select>
//11 pixels wide(column) 18 pixels height(row)
    while (*str) {
 8002474:	e061      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        if (*str == '\r') {
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b0d      	cmp	r3, #13
 800247c:	d103      	bne.n	8002486 <ST7735_WriteStringWithSeparators+0x2a>
            str++;  // skip carriage return
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	603b      	str	r3, [r7, #0]
            continue;
 8002484:	e059      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        }
        if (*str == '\n') {
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b0a      	cmp	r3, #10
 800248c:	d112      	bne.n	80024b4 <ST7735_WriteStringWithSeparators+0x58>
            x = 20;
 800248e:	2314      	movs	r3, #20
 8002490:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002492:	7d7b      	ldrb	r3, [r7, #21]
 8002494:	461a      	mov	r2, r3
 8002496:	88bb      	ldrh	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 800249c:	88bb      	ldrh	r3, [r7, #4]
 800249e:	7d7a      	ldrb	r2, [r7, #21]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <ST7735_WriteStringWithSeparators+0x104>)
 80024a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024a8:	4293      	cmp	r3, r2
 80024aa:	da4b      	bge.n	8002544 <ST7735_WriteStringWithSeparators+0xe8>
                break;
            }
            str++;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	603b      	str	r3, [r7, #0]
            continue;
 80024b2:	e042      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        }
        if (*str == '/') {  // treat / as newline
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80024ba:	d112      	bne.n	80024e2 <ST7735_WriteStringWithSeparators+0x86>
            x = 20;
 80024bc:	2314      	movs	r3, #20
 80024be:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80024c0:	7d7b      	ldrb	r3, [r7, #21]
 80024c2:	461a      	mov	r2, r3
 80024c4:	88bb      	ldrh	r3, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	7d7a      	ldrb	r2, [r7, #21]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <ST7735_WriteStringWithSeparators+0x104>)
 80024d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	da36      	bge.n	8002548 <ST7735_WriteStringWithSeparators+0xec>
                break;
            }
            str++;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	603b      	str	r3, [r7, #0]
            continue;
 80024e0:	e02b      	b.n	800253a <ST7735_WriteStringWithSeparators+0xde>
        }

        if (x + font.width >= _width) {
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	7d3a      	ldrb	r2, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <ST7735_WriteStringWithSeparators+0x108>)
 80024ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	db0e      	blt.n	8002510 <ST7735_WriteStringWithSeparators+0xb4>
            x = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	80fb      	strh	r3, [r7, #6]
            y += (font.height);
 80024f6:	7d7b      	ldrb	r3, [r7, #21]
 80024f8:	461a      	mov	r2, r3
 80024fa:	88bb      	ldrh	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= _height) {
 8002500:	88bb      	ldrh	r3, [r7, #4]
 8002502:	7d7a      	ldrb	r2, [r7, #21]
 8002504:	4413      	add	r3, r2
 8002506:	4a16      	ldr	r2, [pc, #88]	@ (8002560 <ST7735_WriteStringWithSeparators+0x104>)
 8002508:	f9b2 2000 	ldrsh.w	r2, [r2]
 800250c:	4293      	cmp	r3, r2
 800250e:	da1d      	bge.n	800254c <ST7735_WriteStringWithSeparators+0xf0>
                break;
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	88b9      	ldrh	r1, [r7, #4]
 8002516:	88f8      	ldrh	r0, [r7, #6]
 8002518:	8c3b      	ldrh	r3, [r7, #32]
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	8bbb      	ldrh	r3, [r7, #28]
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f7ff feb3 	bl	8002290 <ST7735_WriteChar>
        x += font.width;
 800252a:	7d3b      	ldrb	r3, [r7, #20]
 800252c:	461a      	mov	r2, r3
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4413      	add	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
        str++;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	603b      	str	r3, [r7, #0]
    while (*str) {
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d199      	bne.n	8002476 <ST7735_WriteStringWithSeparators+0x1a>
 8002542:	e004      	b.n	800254e <ST7735_WriteStringWithSeparators+0xf2>
                break;
 8002544:	bf00      	nop
 8002546:	e002      	b.n	800254e <ST7735_WriteStringWithSeparators+0xf2>
                break;
 8002548:	bf00      	nop
 800254a:	e000      	b.n	800254e <ST7735_WriteStringWithSeparators+0xf2>
                break;
 800254c:	bf00      	nop
    }

    ST7735_Unselect();
 800254e:	f7ff fcc7 	bl	8001ee0 <ST7735_Unselect>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800255c:	b002      	add	sp, #8
 800255e:	4770      	bx	lr
 8002560:	20000096 	.word	0x20000096
 8002564:	20000094 	.word	0x20000094

08002568 <ST7735_FillRectangle>:

// Assume you have ST7735 width and height defined globally
// #define ST7735_WIDTH 128
// #define ST7735_HEIGHT 160
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	4603      	mov	r3, r0
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]
 8002582:	4613      	mov	r3, r2
 8002584:	803b      	strh	r3, [r7, #0]
    // Boundary checks
    if ((x >= _width) || (y >= _height)) return;
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4a54      	ldr	r2, [pc, #336]	@ (80026dc <ST7735_FillRectangle+0x174>)
 800258a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800258e:	4293      	cmp	r3, r2
 8002590:	f280 80a0 	bge.w	80026d4 <ST7735_FillRectangle+0x16c>
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <ST7735_FillRectangle+0x178>)
 8002598:	f9b2 2000 	ldrsh.w	r2, [r2]
 800259c:	4293      	cmp	r3, r2
 800259e:	f280 8099 	bge.w	80026d4 <ST7735_FillRectangle+0x16c>
    if ((x + w - 1) >= _width) w = _width - x;
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a4c      	ldr	r2, [pc, #304]	@ (80026dc <ST7735_FillRectangle+0x174>)
 80025aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	dd06      	ble.n	80025c0 <ST7735_FillRectangle+0x58>
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <ST7735_FillRectangle+0x174>)
 80025b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height) h = _height - y;
 80025c0:	88ba      	ldrh	r2, [r7, #4]
 80025c2:	883b      	ldrh	r3, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a46      	ldr	r2, [pc, #280]	@ (80026e0 <ST7735_FillRectangle+0x178>)
 80025c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	dd06      	ble.n	80025de <ST7735_FillRectangle+0x76>
 80025d0:	4b43      	ldr	r3, [pc, #268]	@ (80026e0 <ST7735_FillRectangle+0x178>)
 80025d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	88bb      	ldrh	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	803b      	strh	r3, [r7, #0]

    // Wait for any previous DMA to complete
    ST7735_WaitForDMA();
 80025de:	f7ff fc4d 	bl	8001e7c <ST7735_WaitForDMA>

    ST7735_Select();
 80025e2:	f7ff fc71 	bl	8001ec8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	b2d8      	uxtb	r0, r3
 80025ea:	88bb      	ldrh	r3, [r7, #4]
 80025ec:	b2d9      	uxtb	r1, r3
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b2dc      	uxtb	r4, r3
 80025fe:	88bb      	ldrh	r3, [r7, #4]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	883b      	ldrh	r3, [r7, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4622      	mov	r2, r4
 8002610:	f7ff fd0c 	bl	800202c <ST7735_SetAddressWindow>

    uint32_t size = w * h;
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	883a      	ldrh	r2, [r7, #0]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	613b      	str	r3, [r7, #16]
    uint8_t *buffer = malloc(size * 2);  // 2 bytes per pixel (RGB565)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f005 f950 	bl	80078c8 <malloc>
 8002628:	4603      	mov	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]

    if (buffer == NULL) {
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <ST7735_FillRectangle+0xd0>
        ST7735_Unselect();
 8002632:	f7ff fc55 	bl	8001ee0 <ST7735_Unselect>
        return;
 8002636:	e04e      	b.n	80026d6 <ST7735_FillRectangle+0x16e>
    }

    // Fill buffer with color
    uint8_t high = color >> 8;
 8002638:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29b      	uxth	r3, r3
 800263e:	72fb      	strb	r3, [r7, #11]
    uint8_t low = color & 0xFF;
 8002640:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002642:	72bb      	strb	r3, [r7, #10]
    for (uint32_t i = 0; i < size; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e00f      	b.n	800266a <ST7735_FillRectangle+0x102>
        buffer[i * 2] = high;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4413      	add	r3, r2
 8002652:	7afa      	ldrb	r2, [r7, #11]
 8002654:	701a      	strb	r2, [r3, #0]
        buffer[i * 2 + 1] = low;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3301      	adds	r3, #1
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	7aba      	ldrb	r2, [r7, #10]
 8002662:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3eb      	bcc.n	800264a <ST7735_FillRectangle+0xe2>
    }


    // Set DMA state before starting transfer
    spi_ready = 0;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <ST7735_FillRectangle+0x17c>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
    dma_active = 1;
 8002678:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <ST7735_FillRectangle+0x180>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
    dma_buffer = buffer;
 800267e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ec <ST7735_FillRectangle+0x184>)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6013      	str	r3, [r2, #0]
    dma_buffer_size = size * 2;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <ST7735_FillRectangle+0x188>)
 800268a:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002692:	4818      	ldr	r0, [pc, #96]	@ (80026f4 <ST7735_FillRectangle+0x18c>)
 8002694:	f001 fcea 	bl	800406c <HAL_GPIO_WritePin>

    if (HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buffer, size * 2) != HAL_OK) {
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	b29b      	uxth	r3, r3
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	4814      	ldr	r0, [pc, #80]	@ (80026f8 <ST7735_FillRectangle+0x190>)
 80026a6:	f003 fad1 	bl	8005c4c <HAL_SPI_Transmit_DMA>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <ST7735_FillRectangle+0x16e>
        // If DMA start fails, clean up
        free(buffer);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f005 f911 	bl	80078d8 <free>
        dma_buffer = NULL;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <ST7735_FillRectangle+0x184>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
        dma_buffer_size = 0;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <ST7735_FillRectangle+0x188>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
        spi_ready = 1;
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <ST7735_FillRectangle+0x17c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
        dma_active = 0;
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <ST7735_FillRectangle+0x180>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
        ST7735_Unselect();
 80026ce:	f7ff fc07 	bl	8001ee0 <ST7735_Unselect>
 80026d2:	e000      	b.n	80026d6 <ST7735_FillRectangle+0x16e>
    if ((x >= _width) || (y >= _height)) return;
 80026d4:	bf00      	nop
    }
}
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	20000094 	.word	0x20000094
 80026e0:	20000096 	.word	0x20000096
 80026e4:	20000000 	.word	0x20000000
 80026e8:	2000009d 	.word	0x2000009d
 80026ec:	200000a0 	.word	0x200000a0
 80026f0:	200000a4 	.word	0x200000a4
 80026f4:	48001400 	.word	0x48001400
 80026f8:	20000130 	.word	0x20000130

080026fc <draw_bulb_on>:
    "LED TOGGLE",
};


// Draw a simple light bulb ON
void draw_bulb_on(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af02      	add	r7, sp, #8
	fillScreen(BLACK);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe82 	bl	800140c <fillScreen>
    fillCircle(64, 40, 20, YELLOW);         // Bulb head
 8002708:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800270c:	2214      	movs	r2, #20
 800270e:	2128      	movs	r1, #40	@ 0x28
 8002710:	2040      	movs	r0, #64	@ 0x40
 8002712:	f7fe fb2a 	bl	8000d6a <fillCircle>
    ST7735_FillRectangle(60, 60, 8, 15, GRAY);          // Bulb base
 8002716:	f248 4310 	movw	r3, #33808	@ 0x8410
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	230f      	movs	r3, #15
 800271e:	2208      	movs	r2, #8
 8002720:	213c      	movs	r1, #60	@ 0x3c
 8002722:	203c      	movs	r0, #60	@ 0x3c
 8002724:	f7ff ff20 	bl	8002568 <ST7735_FillRectangle>
    drawLine(64, 75, 64, 100, ORANGE);      // Glow line
 8002728:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2364      	movs	r3, #100	@ 0x64
 8002730:	2240      	movs	r2, #64	@ 0x40
 8002732:	214b      	movs	r1, #75	@ 0x4b
 8002734:	2040      	movs	r0, #64	@ 0x40
 8002736:	f7fe f828 	bl	800078a <drawLine>
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <draw_bulb_off>:
void draw_bulb_off(void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af02      	add	r7, sp, #8
    fillScreen(BLACK);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fe60 	bl	800140c <fillScreen>
    fillCircle(64, 40, 20, GRAY);         // Bulb head
 800274c:	f248 4310 	movw	r3, #33808	@ 0x8410
 8002750:	2214      	movs	r2, #20
 8002752:	2128      	movs	r1, #40	@ 0x28
 8002754:	2040      	movs	r0, #64	@ 0x40
 8002756:	f7fe fb08 	bl	8000d6a <fillCircle>
    ST7735_FillRectangle(60, 60, 8, 15, WHITE);          // Bulb base
 800275a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	230f      	movs	r3, #15
 8002762:	2208      	movs	r2, #8
 8002764:	213c      	movs	r1, #60	@ 0x3c
 8002766:	203c      	movs	r0, #60	@ 0x3c
 8002768:	f7ff fefe 	bl	8002568 <ST7735_FillRectangle>
    drawLine(64, 75, 64, 100, ORANGE);      // Glow line
 800276c:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2364      	movs	r3, #100	@ 0x64
 8002774:	2240      	movs	r2, #64	@ 0x40
 8002776:	214b      	movs	r1, #75	@ 0x4b
 8002778:	2040      	movs	r0, #64	@ 0x40
 800277a:	f7fe f806 	bl	800078a <drawLine>
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <process_command>:

void process_command(char *cmd)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b098      	sub	sp, #96	@ 0x60
 8002788:	af04      	add	r7, sp, #16
 800278a:	6078      	str	r0, [r7, #4]

    if (strstr(cmd, "LED ON"))
 800278c:	4950      	ldr	r1, [pc, #320]	@ (80028d0 <process_command+0x14c>)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f005 f960 	bl	8007a54 <strstr>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d021      	beq.n	80027de <process_command+0x5a>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // LED ON
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027a0:	484c      	ldr	r0, [pc, #304]	@ (80028d4 <process_command+0x150>)
 80027a2:	f001 fc63 	bl	800406c <HAL_GPIO_WritePin>
        char msg[] = "LED turned ON\r\n";
 80027a6:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <process_command+0x154>)
 80027a8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80027ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        fillScreen(BLACK);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fe2a 	bl	800140c <fillScreen>
        draw_bulb_on();
 80027b8:	f7ff ffa0 	bl	80026fc <draw_bulb_on>
        ST7735_WriteString(5, 90,msg, Font_11x18, YELLOW, BLACK);
 80027bc:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <process_command+0x158>)
 80027be:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80027c2:	2200      	movs	r2, #0
 80027c4:	9202      	str	r2, [sp, #8]
 80027c6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80027ca:	9201      	str	r2, [sp, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	9200      	str	r2, [sp, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	460a      	mov	r2, r1
 80027d4:	215a      	movs	r1, #90	@ 0x5a
 80027d6:	2005      	movs	r0, #5
 80027d8:	f7ff fdd2 	bl	8002380 <ST7735_WriteString>
        char msg[] = "Invalid/Command";
        //HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        fillScreen(BLACK);
        ST7735_WriteStringWithSeparators(10, 90, msg, Font_11x18, RED, BLACK);
    }
}
 80027dc:	e073      	b.n	80028c6 <process_command+0x142>
    else if (strstr(cmd, "LED OFF"))
 80027de:	4940      	ldr	r1, [pc, #256]	@ (80028e0 <process_command+0x15c>)
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f005 f937 	bl	8007a54 <strstr>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <process_command+0xb0>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // LED OFF
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027f2:	4838      	ldr	r0, [pc, #224]	@ (80028d4 <process_command+0x150>)
 80027f4:	f001 fc3a 	bl	800406c <HAL_GPIO_WritePin>
        char msg[] = "LED turned OFF\r\n";
 80027f8:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <process_command+0x160>)
 80027fa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80027fe:	461d      	mov	r5, r3
 8002800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	7023      	strb	r3, [r4, #0]
        fillScreen(BLACK);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe fdff 	bl	800140c <fillScreen>
        draw_bulb_off();
 800280e:	f7ff ff97 	bl	8002740 <draw_bulb_off>
        ST7735_WriteString(5, 90,msg, Font_11x18,CYAN, BLACK);
 8002812:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <process_command+0x158>)
 8002814:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002818:	2200      	movs	r2, #0
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002820:	9201      	str	r2, [sp, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	9200      	str	r2, [sp, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	460a      	mov	r2, r1
 800282a:	215a      	movs	r1, #90	@ 0x5a
 800282c:	2005      	movs	r0, #5
 800282e:	f7ff fda7 	bl	8002380 <ST7735_WriteString>
}
 8002832:	e048      	b.n	80028c6 <process_command+0x142>
    else if (strstr(cmd, "LED TOGGLE"))
 8002834:	492c      	ldr	r1, [pc, #176]	@ (80028e8 <process_command+0x164>)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f005 f90c 	bl	8007a54 <strstr>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01e      	beq.n	8002880 <process_command+0xfc>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002842:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002846:	4823      	ldr	r0, [pc, #140]	@ (80028d4 <process_command+0x150>)
 8002848:	f001 fc28 	bl	800409c <HAL_GPIO_TogglePin>
        char msg[] = "LED Toggled\r\n";
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <process_command+0x168>)
 800284e:	f107 041c 	add.w	r4, r7, #28
 8002852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002854:	c407      	stmia	r4!, {r0, r1, r2}
 8002856:	8023      	strh	r3, [r4, #0]
        fillScreen(BLACK);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fdd7 	bl	800140c <fillScreen>
        ST7735_WriteString(5, 90,msg, Font_11x18, GREEN, BLACK);
 800285e:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <process_command+0x158>)
 8002860:	f107 011c 	add.w	r1, r7, #28
 8002864:	2200      	movs	r2, #0
 8002866:	9202      	str	r2, [sp, #8]
 8002868:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	460a      	mov	r2, r1
 8002876:	215a      	movs	r1, #90	@ 0x5a
 8002878:	2005      	movs	r0, #5
 800287a:	f7ff fd81 	bl	8002380 <ST7735_WriteString>
}
 800287e:	e022      	b.n	80028c6 <process_command+0x142>
    else if (strstr(cmd, "TEST LCD"))
 8002880:	491b      	ldr	r1, [pc, #108]	@ (80028f0 <process_command+0x16c>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f005 f8e6 	bl	8007a54 <strstr>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <process_command+0x110>
    	   testAll();
 800288e:	f7ff fa64 	bl	8001d5a <testAll>
}
 8002892:	e018      	b.n	80028c6 <process_command+0x142>
        char msg[] = "Invalid/Command";
 8002894:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <process_command+0x170>)
 8002896:	f107 040c 	add.w	r4, r7, #12
 800289a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        fillScreen(BLACK);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fdb3 	bl	800140c <fillScreen>
        ST7735_WriteStringWithSeparators(10, 90, msg, Font_11x18, RED, BLACK);
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <process_command+0x158>)
 80028a8:	f107 010c 	add.w	r1, r7, #12
 80028ac:	2200      	movs	r2, #0
 80028ae:	9202      	str	r2, [sp, #8]
 80028b0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028b4:	9201      	str	r2, [sp, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	9200      	str	r2, [sp, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	460a      	mov	r2, r1
 80028be:	215a      	movs	r1, #90	@ 0x5a
 80028c0:	200a      	movs	r0, #10
 80028c2:	f7ff fdcb 	bl	800245c <ST7735_WriteStringWithSeparators>
}
 80028c6:	bf00      	nop
 80028c8:	3750      	adds	r7, #80	@ 0x50
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdb0      	pop	{r4, r5, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08007bb0 	.word	0x08007bb0
 80028d4:	48000400 	.word	0x48000400
 80028d8:	08007bcc 	.word	0x08007bcc
 80028dc:	20000004 	.word	0x20000004
 80028e0:	08007bb8 	.word	0x08007bb8
 80028e4:	08007bdc 	.word	0x08007bdc
 80028e8:	08007bc0 	.word	0x08007bc0
 80028ec:	08007bf0 	.word	0x08007bf0
 80028f0:	08007ba4 	.word	0x08007ba4
 80028f4:	08007c00 	.word	0x08007c00

080028f8 <draw_menu>:
void draw_menu(int selected) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	6078      	str	r0, [r7, #4]
	fillScreen(BLACK);
 8002900:	2000      	movs	r0, #0
 8002902:	f7fe fd83 	bl	800140c <fillScreen>

    for (int i = 0; i < NUM_OPTIONS; i++) {
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e041      	b.n	8002990 <draw_menu+0x98>
        uint16_t y = 20 + i * 20;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3301      	adds	r3, #1
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	817b      	strh	r3, [r7, #10]
        if (i == selected) {
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d120      	bne.n	8002966 <draw_menu+0x6e>
            ST7735_WriteString(10, y, "->", Font_11x18,YELLOW, BLACK);
 8002924:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <draw_menu+0xa8>)
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	2200      	movs	r2, #0
 800292a:	9202      	str	r2, [sp, #8]
 800292c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002930:	9201      	str	r2, [sp, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	9200      	str	r2, [sp, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <draw_menu+0xac>)
 800293a:	200a      	movs	r0, #10
 800293c:	f7ff fd20 	bl	8002380 <ST7735_WriteString>
            ST7735_WriteString(30, y, (char*)menu[i], Font_11x18, YELLOW,BLACK);
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <draw_menu+0xb0>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002948:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <draw_menu+0xa8>)
 800294a:	8979      	ldrh	r1, [r7, #10]
 800294c:	2200      	movs	r2, #0
 800294e:	9202      	str	r2, [sp, #8]
 8002950:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002954:	9201      	str	r2, [sp, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	9200      	str	r2, [sp, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4602      	mov	r2, r0
 800295e:	201e      	movs	r0, #30
 8002960:	f7ff fd0e 	bl	8002380 <ST7735_WriteString>
 8002964:	e011      	b.n	800298a <draw_menu+0x92>

        } else {
            ST7735_WriteString(10, y, (char*)menu[i], Font_11x18, WHITE,BLACK);
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <draw_menu+0xb0>)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800296e:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <draw_menu+0xa8>)
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	2200      	movs	r2, #0
 8002974:	9202      	str	r2, [sp, #8]
 8002976:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800297a:	9201      	str	r2, [sp, #4]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	9200      	str	r2, [sp, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4602      	mov	r2, r0
 8002984:	200a      	movs	r0, #10
 8002986:	f7ff fcfb 	bl	8002380 <ST7735_WriteString>
    for (int i = 0; i < NUM_OPTIONS; i++) {
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b03      	cmp	r3, #3
 8002994:	ddba      	ble.n	800290c <draw_menu+0x14>
        }
    }
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000004 	.word	0x20000004
 80029a4:	08007c10 	.word	0x08007c10
 80029a8:	2000000c 	.word	0x2000000c

080029ac <HAL_UART_RxCpltCallback>:
volatile uint8_t rx_ready = 0;
char last_char;
uint8_t rx_char;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_UART_RxCpltCallback+0x34>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10b      	bne.n	80029d6 <HAL_UART_RxCpltCallback+0x2a>
        last_char = rx_char;
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_UART_RxCpltCallback+0x38>)
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_UART_RxCpltCallback+0x3c>)
 80029c4:	701a      	strb	r2, [r3, #0]
        rx_ready = 1; // Signal main loop
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_UART_RxCpltCallback+0x40>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&hlpuart1, &rx_char, 1);
 80029cc:	2201      	movs	r2, #1
 80029ce:	4905      	ldr	r1, [pc, #20]	@ (80029e4 <HAL_UART_RxCpltCallback+0x38>)
 80029d0:	4807      	ldr	r0, [pc, #28]	@ (80029f0 <HAL_UART_RxCpltCallback+0x44>)
 80029d2:	f003 fc67 	bl	80062a4 <HAL_UART_Receive_IT>
    }
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40008000 	.word	0x40008000
 80029e4:	20000226 	.word	0x20000226
 80029e8:	20000225 	.word	0x20000225
 80029ec:	20000224 	.word	0x20000224
 80029f0:	200000a8 	.word	0x200000a8

080029f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029f8:	f000 fc01 	bl	80031fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029fc:	f000 f874 	bl	8002ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a00:	f000 f954 	bl	8002cac <MX_GPIO_Init>
  MX_DMA_Init();
 8002a04:	f000 f92c 	bl	8002c60 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002a08:	f000 f8c0 	bl	8002b8c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002a0c:	f000 f8ea 	bl	8002be4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff fb53 	bl	80020bc <ST7735_Init>
  fillScreen(BLACK);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fcf8 	bl	800140c <fillScreen>
  ST7735_SetRotation (1);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7ff fb79 	bl	8002114 <ST7735_SetRotation>
  draw_menu(selected);
 8002a22:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <main+0xdc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff66 	bl	80028f8 <draw_menu>
//  char rx_buffer[8];
  HAL_UART_Receive_IT(&hlpuart1, &rx_char, 1);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4929      	ldr	r1, [pc, #164]	@ (8002ad4 <main+0xe0>)
 8002a30:	4829      	ldr	r0, [pc, #164]	@ (8002ad8 <main+0xe4>)
 8002a32:	f003 fc37 	bl	80062a4 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (rx_ready) {
 8002a36:	4b29      	ldr	r3, [pc, #164]	@ (8002adc <main+0xe8>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0fa      	beq.n	8002a36 <main+0x42>
	         rx_ready = 0;
 8002a40:	4b26      	ldr	r3, [pc, #152]	@ (8002adc <main+0xe8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]

	         switch (last_char) {
 8002a46:	4b26      	ldr	r3, [pc, #152]	@ (8002ae0 <main+0xec>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b77      	cmp	r3, #119	@ 0x77
 8002a4c:	d006      	beq.n	8002a5c <main+0x68>
 8002a4e:	2b77      	cmp	r3, #119	@ 0x77
 8002a50:	dcf1      	bgt.n	8002a36 <main+0x42>
 8002a52:	2b0d      	cmp	r3, #13
 8002a54:	d026      	beq.n	8002aa4 <main+0xb0>
 8002a56:	2b73      	cmp	r3, #115	@ 0x73
 8002a58:	d012      	beq.n	8002a80 <main+0x8c>
 8002a5a:	e038      	b.n	8002ace <main+0xda>
	             case 'w':
	                 selected--;
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad0 <main+0xdc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <main+0xdc>)
 8002a64:	6013      	str	r3, [r2, #0]
	                 if (selected < 0) selected = NUM_OPTIONS - 1;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <main+0xdc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da02      	bge.n	8002a74 <main+0x80>
 8002a6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <main+0xdc>)
 8002a70:	2203      	movs	r2, #3
 8002a72:	601a      	str	r2, [r3, #0]
	                 draw_menu(selected);
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <main+0xdc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff3d 	bl	80028f8 <draw_menu>
	                 break;
 8002a7e:	e026      	b.n	8002ace <main+0xda>

	             case 's':
	                 selected++;
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <main+0xdc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	4a12      	ldr	r2, [pc, #72]	@ (8002ad0 <main+0xdc>)
 8002a88:	6013      	str	r3, [r2, #0]
	                 if (selected >= NUM_OPTIONS) selected = 0;
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <main+0xdc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	dd02      	ble.n	8002a98 <main+0xa4>
 8002a92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <main+0xdc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
	                 draw_menu(selected);
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <main+0xdc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff2b 	bl	80028f8 <draw_menu>
	                 break;
 8002aa2:	e014      	b.n	8002ace <main+0xda>

	             case '\r':
	            	 fillScreen(BLACK);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fe fcb1 	bl	800140c <fillScreen>
	                 process_command((char*)menu[selected]);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <main+0xdc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <main+0xf0>)
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe65 	bl	8002784 <process_command>
	                 HAL_Delay(1000);
 8002aba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002abe:	f000 fc13 	bl	80032e8 <HAL_Delay>
	                 draw_menu(selected);
 8002ac2:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <main+0xdc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff16 	bl	80028f8 <draw_menu>

	                 break;
 8002acc:	bf00      	nop
	  if (rx_ready) {
 8002ace:	e7b2      	b.n	8002a36 <main+0x42>
 8002ad0:	20000228 	.word	0x20000228
 8002ad4:	20000226 	.word	0x20000226
 8002ad8:	200000a8 	.word	0x200000a8
 8002adc:	20000224 	.word	0x20000224
 8002ae0:	20000225 	.word	0x20000225
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b096      	sub	sp, #88	@ 0x58
 8002aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	2244      	movs	r2, #68	@ 0x44
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 ffa4 	bl	8007a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002afc:	463b      	mov	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002b0e:	f001 faed 	bl	80040ec <HAL_PWREx_ControlVoltageScaling>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002b18:	f000 f95c 	bl	8002dd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b26:	2340      	movs	r3, #64	@ 0x40
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b36:	230a      	movs	r3, #10
 8002b38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b42:	2302      	movs	r3, #2
 8002b44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fb34 	bl	80041b8 <HAL_RCC_OscConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002b56:	f000 f93d 	bl	8002dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5a:	230f      	movs	r3, #15
 8002b5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b6e:	463b      	mov	r3, r7
 8002b70:	2104      	movs	r1, #4
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 ff3a 	bl	80049ec <HAL_RCC_ClockConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b7e:	f000 f929 	bl	8002dd4 <Error_Handler>
  }
}
 8002b82:	bf00      	nop
 8002b84:	3758      	adds	r7, #88	@ 0x58
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <MX_LPUART1_UART_Init+0x54>)
 8002b94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002b96:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <MX_LPUART1_UART_Init+0x50>)
 8002bca:	f003 fb1d 	bl	8006208 <HAL_UART_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002bd4:	f000 f8fe 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200000a8 	.word	0x200000a8
 8002be0:	40008000 	.word	0x40008000

08002be4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bea:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <MX_SPI1_Init+0x78>)
 8002bec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bee:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bf0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002bfe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c32:	2207      	movs	r2, #7
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c3e:	2208      	movs	r2, #8
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_SPI1_Init+0x74>)
 8002c44:	f002 fdc0 	bl	80057c8 <HAL_SPI_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c4e:	f000 f8c1 	bl	8002dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000130 	.word	0x20000130
 8002c5c:	40013000 	.word	0x40013000

08002c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <MX_DMA_Init+0x48>)
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <MX_DMA_Init+0x48>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <MX_DMA_Init+0x48>)
 8002c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	200c      	movs	r0, #12
 8002c84:	f000 fc2f 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c88:	200c      	movs	r0, #12
 8002c8a:	f000 fc48 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	200d      	movs	r0, #13
 8002c94:	f000 fc27 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c98:	200d      	movs	r0, #13
 8002c9a:	f000 fc40 	bl	800351e <HAL_NVIC_EnableIRQ>

}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000

08002cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b40      	ldr	r3, [pc, #256]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cce:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cda:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	4a39      	ldr	r2, [pc, #228]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce6:	4b37      	ldr	r3, [pc, #220]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf6:	4a33      	ldr	r2, [pc, #204]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cfe:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d16:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d26:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d2e:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <MX_GPIO_Init+0x118>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8002d3a:	f001 fa2d 	bl	8004198 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d44:	4820      	ldr	r0, [pc, #128]	@ (8002dc8 <MX_GPIO_Init+0x11c>)
 8002d46:	f001 f991 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d50:	481e      	ldr	r0, [pc, #120]	@ (8002dcc <MX_GPIO_Init+0x120>)
 8002d52:	f001 f98b 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|reset_Pin, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002d5c:	481c      	ldr	r0, [pc, #112]	@ (8002dd0 <MX_GPIO_Init+0x124>)
 8002d5e:	f001 f985 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DC_Pin */
  GPIO_InitStruct.Pin = DC_Pin;
 8002d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4813      	ldr	r0, [pc, #76]	@ (8002dc8 <MX_GPIO_Init+0x11c>)
 8002d7c:	f000 fef2 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	480c      	ldr	r0, [pc, #48]	@ (8002dcc <MX_GPIO_Init+0x120>)
 8002d9a:	f000 fee3 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin reset_Pin */
  GPIO_InitStruct.Pin = CS_Pin|reset_Pin;
 8002d9e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da4:	2301      	movs	r3, #1
 8002da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4806      	ldr	r0, [pc, #24]	@ (8002dd0 <MX_GPIO_Init+0x124>)
 8002db8:	f000 fed4 	bl	8003b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dbc:	bf00      	nop
 8002dbe:	3728      	adds	r7, #40	@ 0x28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	48001400 	.word	0x48001400
 8002dcc:	48000400 	.word	0x48000400
 8002dd0:	48000c00 	.word	0x48000c00

08002dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd8:	b672      	cpsid	i
}
 8002dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <Error_Handler+0x8>

08002de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <HAL_MspInit+0x44>)
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	4a0e      	ldr	r2, [pc, #56]	@ (8002e24 <HAL_MspInit+0x44>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <HAL_MspInit+0x44>)
 8002df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_MspInit+0x44>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a08      	ldr	r2, [pc, #32]	@ (8002e24 <HAL_MspInit+0x44>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_MspInit+0x44>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b0ac      	sub	sp, #176	@ 0xb0
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	228c      	movs	r2, #140	@ 0x8c
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fdfb 	bl	8007a44 <memset>
  if(huart->Instance==LPUART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a26      	ldr	r2, [pc, #152]	@ (8002eec <HAL_UART_MspInit+0xc4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d145      	bne.n	8002ee4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 ffe5 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e70:	f7ff ffb0 	bl	8002dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e74:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_UART_MspInit+0xc8>)
 8002e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <HAL_UART_MspInit+0xc8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_UART_MspInit+0xc8>)
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <HAL_UART_MspInit+0xc8>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e90:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <HAL_UART_MspInit+0xc8>)
 8002e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e98:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_UART_MspInit+0xc8>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002ea4:	f001 f978 	bl	8004198 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ea8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ec8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4809      	ldr	r0, [pc, #36]	@ (8002ef4 <HAL_UART_MspInit+0xcc>)
 8002ed0:	f000 fe48 	bl	8003b64 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2046      	movs	r0, #70	@ 0x46
 8002eda:	f000 fb04 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002ede:	2046      	movs	r0, #70	@ 0x46
 8002ee0:	f000 fb1d 	bl	800351e <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002ee4:	bf00      	nop
 8002ee6:	37b0      	adds	r7, #176	@ 0xb0
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40008000 	.word	0x40008000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	48001800 	.word	0x48001800

08002ef8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	@ 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a41      	ldr	r2, [pc, #260]	@ (800301c <HAL_SPI_MspInit+0x124>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d17c      	bne.n	8003014 <HAL_SPI_MspInit+0x11c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f1a:	4b41      	ldr	r3, [pc, #260]	@ (8003020 <HAL_SPI_MspInit+0x128>)
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1e:	4a40      	ldr	r2, [pc, #256]	@ (8003020 <HAL_SPI_MspInit+0x128>)
 8002f20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f26:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <HAL_SPI_MspInit+0x128>)
 8002f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <HAL_SPI_MspInit+0x128>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f36:	4a3a      	ldr	r2, [pc, #232]	@ (8003020 <HAL_SPI_MspInit+0x128>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f3e:	4b38      	ldr	r3, [pc, #224]	@ (8003020 <HAL_SPI_MspInit+0x128>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f4a:	23e0      	movs	r3, #224	@ 0xe0
 8002f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f56:	2303      	movs	r3, #3
 8002f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f5a:	2305      	movs	r3, #5
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f68:	f000 fdfc 	bl	8003b64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <HAL_SPI_MspInit+0x130>)
 8002f70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002f72:	4b2c      	ldr	r3, [pc, #176]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f78:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7e:	4b29      	ldr	r3, [pc, #164]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f84:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f86:	2280      	movs	r2, #128	@ 0x80
 8002f88:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8a:	4b26      	ldr	r3, [pc, #152]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f90:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002f96:	4b23      	ldr	r3, [pc, #140]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002f9c:	4b21      	ldr	r3, [pc, #132]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002f9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002fa4:	481f      	ldr	r0, [pc, #124]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002fa6:	f000 fad5 	bl	8003554 <HAL_DMA_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002fb0:	f7ff ff10 	bl	8002dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002fb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fba:	4a1a      	ldr	r2, [pc, #104]	@ (8003024 <HAL_SPI_MspInit+0x12c>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_SPI_MspInit+0x138>)
 8002fc4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fcc:	4b17      	ldr	r3, [pc, #92]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fce:	2210      	movs	r2, #16
 8002fd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd8:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fda:	2280      	movs	r2, #128	@ 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fde:	4b13      	ldr	r3, [pc, #76]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002ff2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ff6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002ff8:	480c      	ldr	r0, [pc, #48]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8002ffa:	f000 faab 	bl	8003554 <HAL_DMA_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8003004:	f7ff fee6 	bl	8002dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_SPI_MspInit+0x134>)
 800300c:	655a      	str	r2, [r3, #84]	@ 0x54
 800300e:	4a07      	ldr	r2, [pc, #28]	@ (800302c <HAL_SPI_MspInit+0x134>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003014:	bf00      	nop
 8003016:	3728      	adds	r7, #40	@ 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40013000 	.word	0x40013000
 8003020:	40021000 	.word	0x40021000
 8003024:	20000194 	.word	0x20000194
 8003028:	4002001c 	.word	0x4002001c
 800302c:	200001dc 	.word	0x200001dc
 8003030:	40020030 	.word	0x40020030

08003034 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <HAL_SPI_MspDeInit+0x44>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d114      	bne.n	8003070 <HAL_SPI_MspDeInit+0x3c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <HAL_SPI_MspDeInit+0x48>)
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	4a0c      	ldr	r2, [pc, #48]	@ (800307c <HAL_SPI_MspDeInit+0x48>)
 800304c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003050:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8003052:	21e0      	movs	r1, #224	@ 0xe0
 8003054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003058:	f000 ff16 	bl	8003e88 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fb2f 	bl	80036c4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fb2a 	bl	80036c4 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI1_MspDeInit 1 */

    /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40013000 	.word	0x40013000
 800307c:	40021000 	.word	0x40021000

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <NMI_Handler+0x4>

08003088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <HardFault_Handler+0x4>

08003090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <MemManage_Handler+0x4>

08003098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <BusFault_Handler+0x4>

080030a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <UsageFault_Handler+0x4>

080030a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d6:	f000 f8e7 	bl	80032a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80030e4:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <DMA1_Channel2_IRQHandler+0x10>)
 80030e6:	f000 fc5e 	bl	80039a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000194 	.word	0x20000194

080030f4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030f8:	4802      	ldr	r0, [pc, #8]	@ (8003104 <DMA1_Channel3_IRQHandler+0x10>)
 80030fa:	f000 fc54 	bl	80039a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200001dc 	.word	0x200001dc

08003108 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <LPUART1_IRQHandler+0x10>)
 800310e:	f003 f915 	bl	800633c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200000a8 	.word	0x200000a8

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	@ (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	@ (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	@ (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f004 fca8 	bl	8007aa0 <__errno>
 8003150:	4603      	mov	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <_sbrk+0x64>)
 800316c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20050000 	.word	0x20050000
 800317c:	00000400 	.word	0x00000400
 8003180:	2000022c 	.word	0x2000022c
 8003184:	20000380 	.word	0x20000380

08003188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <SystemInit+0x20>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003192:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <SystemInit+0x20>)
 8003194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b0:	f7ff ffea 	bl	8003188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b4:	480c      	ldr	r0, [pc, #48]	@ (80031e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80031b6:	490d      	ldr	r1, [pc, #52]	@ (80031ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80031b8:	4a0d      	ldr	r2, [pc, #52]	@ (80031f0 <LoopForever+0xe>)
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031bc:	e002      	b.n	80031c4 <LoopCopyDataInit>

080031be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c2:	3304      	adds	r3, #4

080031c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c8:	d3f9      	bcc.n	80031be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ca:	4a0a      	ldr	r2, [pc, #40]	@ (80031f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031cc:	4c0a      	ldr	r4, [pc, #40]	@ (80031f8 <LoopForever+0x16>)
  movs r3, #0
 80031ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d0:	e001      	b.n	80031d6 <LoopFillZerobss>

080031d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d4:	3204      	adds	r2, #4

080031d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d8:	d3fb      	bcc.n	80031d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031da:	f004 fc67 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031de:	f7ff fc09 	bl	80029f4 <main>

080031e2 <LoopForever>:

LoopForever:
    b LoopForever
 80031e2:	e7fe      	b.n	80031e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80031f0:	08008a3c 	.word	0x08008a3c
  ldr r2, =_sbss
 80031f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80031f8:	2000037c 	.word	0x2000037c

080031fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC1_2_IRQHandler>

080031fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003208:	2003      	movs	r0, #3
 800320a:	f000 f961 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800320e:	200f      	movs	r0, #15
 8003210:	f000 f80e 	bl	8003230 <HAL_InitTick>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	71fb      	strb	r3, [r7, #7]
 800321e:	e001      	b.n	8003224 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003220:	f7ff fdde 	bl	8002de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003224:	79fb      	ldrb	r3, [r7, #7]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800323c:	4b17      	ldr	r3, [pc, #92]	@ (800329c <HAL_InitTick+0x6c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d023      	beq.n	800328c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <HAL_InitTick+0x70>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b14      	ldr	r3, [pc, #80]	@ (800329c <HAL_InitTick+0x6c>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f96d 	bl	800353a <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	d809      	bhi.n	8003280 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800326c:	2200      	movs	r2, #0
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f000 f937 	bl	80034e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003278:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <HAL_InitTick+0x74>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e007      	b.n	8003290 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e004      	b.n	8003290 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	e001      	b.n	8003290 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000024 	.word	0x20000024
 80032a0:	2000001c 	.word	0x2000001c
 80032a4:	20000020 	.word	0x20000020

080032a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_IncTick+0x20>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_IncTick+0x24>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <HAL_IncTick+0x24>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000024 	.word	0x20000024
 80032cc:	20000230 	.word	0x20000230

080032d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return uwTick;
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <HAL_GetTick+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000230 	.word	0x20000230

080032e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7ff ffee 	bl	80032d0 <HAL_GetTick>
 80032f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d005      	beq.n	800330e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_Delay+0x44>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800330e:	bf00      	nop
 8003310:	f7ff ffde 	bl	80032d0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d8f7      	bhi.n	8003310 <HAL_Delay+0x28>
  {
  }
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000024 	.word	0x20000024

08003330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800334c:	4013      	ands	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800335c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <__NVIC_SetPriorityGrouping+0x44>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <__NVIC_GetPriorityGrouping+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0307 	and.w	r3, r3, #7
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db0b      	blt.n	80033be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	4907      	ldr	r1, [pc, #28]	@ (80033cc <__NVIC_EnableIRQ+0x38>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2001      	movs	r0, #1
 80033b6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000e100 	.word	0xe000e100

080033d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	@ (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	@ (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	@ 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1c3 0307 	rsb	r3, r3, #7
 800343e:	2b04      	cmp	r3, #4
 8003440:	bf28      	it	cs
 8003442:	2304      	movcs	r3, #4
 8003444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3304      	adds	r3, #4
 800344a:	2b06      	cmp	r3, #6
 800344c:	d902      	bls.n	8003454 <NVIC_EncodePriority+0x30>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3b03      	subs	r3, #3
 8003452:	e000      	b.n	8003456 <NVIC_EncodePriority+0x32>
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800346c:	f04f 31ff 	mov.w	r1, #4294967295
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	43d9      	mvns	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	4313      	orrs	r3, r2
         );
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f7ff ff8e 	bl	80033d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff29 	bl	8003330 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff3e 	bl	8003378 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff8e 	bl	8003424 <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff5d 	bl	80033d0 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff31 	bl	8003394 <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffa2 	bl	800348c <SysTick_Config>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e098      	b.n	8003698 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b4d      	ldr	r3, [pc, #308]	@ (80036a4 <HAL_DMA_Init+0x150>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d80f      	bhi.n	8003592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b4b      	ldr	r3, [pc, #300]	@ (80036a8 <HAL_DMA_Init+0x154>)
 800357a:	4413      	add	r3, r2
 800357c:	4a4b      	ldr	r2, [pc, #300]	@ (80036ac <HAL_DMA_Init+0x158>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a48      	ldr	r2, [pc, #288]	@ (80036b0 <HAL_DMA_Init+0x15c>)
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003590:	e00e      	b.n	80035b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b46      	ldr	r3, [pc, #280]	@ (80036b4 <HAL_DMA_Init+0x160>)
 800359a:	4413      	add	r3, r2
 800359c:	4a43      	ldr	r2, [pc, #268]	@ (80036ac <HAL_DMA_Init+0x158>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a42      	ldr	r2, [pc, #264]	@ (80036b8 <HAL_DMA_Init+0x164>)
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360a:	d039      	beq.n	8003680 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	4a27      	ldr	r2, [pc, #156]	@ (80036b0 <HAL_DMA_Init+0x15c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11a      	bne.n	800364c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003616:	4b29      	ldr	r3, [pc, #164]	@ (80036bc <HAL_DMA_Init+0x168>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f003 031c 	and.w	r3, r3, #28
 8003622:	210f      	movs	r1, #15
 8003624:	fa01 f303 	lsl.w	r3, r1, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	4924      	ldr	r1, [pc, #144]	@ (80036bc <HAL_DMA_Init+0x168>)
 800362c:	4013      	ands	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003630:	4b22      	ldr	r3, [pc, #136]	@ (80036bc <HAL_DMA_Init+0x168>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	f003 031c 	and.w	r3, r3, #28
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	491d      	ldr	r1, [pc, #116]	@ (80036bc <HAL_DMA_Init+0x168>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
 800364a:	e019      	b.n	8003680 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800364c:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <HAL_DMA_Init+0x16c>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	f003 031c 	and.w	r3, r3, #28
 8003658:	210f      	movs	r1, #15
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	4917      	ldr	r1, [pc, #92]	@ (80036c0 <HAL_DMA_Init+0x16c>)
 8003662:	4013      	ands	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003666:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <HAL_DMA_Init+0x16c>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f003 031c 	and.w	r3, r3, #28
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	4911      	ldr	r1, [pc, #68]	@ (80036c0 <HAL_DMA_Init+0x16c>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40020407 	.word	0x40020407
 80036a8:	bffdfff8 	.word	0xbffdfff8
 80036ac:	cccccccd 	.word	0xcccccccd
 80036b0:	40020000 	.word	0x40020000
 80036b4:	bffdfbf8 	.word	0xbffdfbf8
 80036b8:	40020400 	.word	0x40020400
 80036bc:	400200a8 	.word	0x400200a8
 80036c0:	400204a8 	.word	0x400204a8

080036c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e072      	b.n	80037bc <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <HAL_DMA_DeInit+0x104>)
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d80f      	bhi.n	8003712 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_DMA_DeInit+0x108>)
 80036fa:	4413      	add	r3, r2
 80036fc:	4a34      	ldr	r2, [pc, #208]	@ (80037d0 <HAL_DMA_DeInit+0x10c>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	009a      	lsls	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a31      	ldr	r2, [pc, #196]	@ (80037d4 <HAL_DMA_DeInit+0x110>)
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003710:	e00e      	b.n	8003730 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b2f      	ldr	r3, [pc, #188]	@ (80037d8 <HAL_DMA_DeInit+0x114>)
 800371a:	4413      	add	r3, r2
 800371c:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <HAL_DMA_DeInit+0x10c>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	009a      	lsls	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a2b      	ldr	r2, [pc, #172]	@ (80037dc <HAL_DMA_DeInit+0x118>)
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f003 021c 	and.w	r2, r3, #28
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a20      	ldr	r2, [pc, #128]	@ (80037d4 <HAL_DMA_DeInit+0x110>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10d      	bne.n	8003772 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003756:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <HAL_DMA_DeInit+0x11c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f003 031c 	and.w	r3, r3, #28
 8003762:	210f      	movs	r1, #15
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	491d      	ldr	r1, [pc, #116]	@ (80037e0 <HAL_DMA_DeInit+0x11c>)
 800376c:	4013      	ands	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
 8003770:	e00c      	b.n	800378c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003772:	4b1c      	ldr	r3, [pc, #112]	@ (80037e4 <HAL_DMA_DeInit+0x120>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f003 031c 	and.w	r3, r3, #28
 800377e:	210f      	movs	r1, #15
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	4917      	ldr	r1, [pc, #92]	@ (80037e4 <HAL_DMA_DeInit+0x120>)
 8003788:	4013      	ands	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40020407 	.word	0x40020407
 80037cc:	bffdfff8 	.word	0xbffdfff8
 80037d0:	cccccccd 	.word	0xcccccccd
 80037d4:	40020000 	.word	0x40020000
 80037d8:	bffdfbf8 	.word	0xbffdfbf8
 80037dc:	40020400 	.word	0x40020400
 80037e0:	400200a8 	.word	0x400200a8
 80037e4:	400204a8 	.word	0x400204a8

080037e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_DMA_Start_IT+0x20>
 8003804:	2302      	movs	r3, #2
 8003806:	e04b      	b.n	80038a0 <HAL_DMA_Start_IT+0xb8>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d13a      	bne.n	8003892 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f95f 	bl	8003b04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 020e 	orr.w	r2, r2, #14
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e00f      	b.n	8003880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 020a 	orr.w	r2, r2, #10
 800387e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e005      	b.n	800389e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2204      	movs	r2, #4
 80038c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e022      	b.n	8003918 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 020e 	bic.w	r2, r2, #14
 80038e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f6:	f003 021c 	and.w	r2, r3, #28
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d005      	beq.n	8003948 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2204      	movs	r2, #4
 8003940:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e029      	b.n	800399c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	f003 021c 	and.w	r2, r3, #28
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f202 	lsl.w	r2, r1, r2
 800397a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
    }
  }
  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f003 031c 	and.w	r3, r3, #28
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d026      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x7a>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d021      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0204 	bic.w	r2, r2, #4
 80039f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f003 021c 	and.w	r2, r3, #28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2104      	movs	r1, #4
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d071      	beq.n	8003afa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a1e:	e06c      	b.n	8003afa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a24:	f003 031c 	and.w	r3, r3, #28
 8003a28:	2202      	movs	r2, #2
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02e      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xec>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d029      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 020a 	bic.w	r2, r2, #10
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	f003 021c 	and.w	r2, r3, #28
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	2102      	movs	r1, #2
 8003a72:	fa01 f202 	lsl.w	r2, r1, r2
 8003a76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d038      	beq.n	8003afa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a90:	e033      	b.n	8003afa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 031c 	and.w	r3, r3, #28
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02a      	beq.n	8003afc <HAL_DMA_IRQHandler+0x156>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d025      	beq.n	8003afc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020e 	bic.w	r2, r2, #14
 8003abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac4:	f003 021c 	and.w	r2, r3, #28
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
}
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f003 021c 	and.w	r2, r3, #28
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d108      	bne.n	8003b48 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b46:	e007      	b.n	8003b58 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b72:	e166      	b.n	8003e42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8158 	beq.w	8003e3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d005      	beq.n	8003ba4 <HAL_GPIO_Init+0x40>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d130      	bne.n	8003c06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bda:	2201      	movs	r2, #1
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0201 	and.w	r2, r3, #1
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d017      	beq.n	8003c42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d123      	bne.n	8003c96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	220f      	movs	r2, #15
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	08da      	lsrs	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3208      	adds	r2, #8
 8003c90:	6939      	ldr	r1, [r7, #16]
 8003c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80b2 	beq.w	8003e3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd8:	4b61      	ldr	r3, [pc, #388]	@ (8003e60 <HAL_GPIO_Init+0x2fc>)
 8003cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cdc:	4a60      	ldr	r2, [pc, #384]	@ (8003e60 <HAL_GPIO_Init+0x2fc>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e60 <HAL_GPIO_Init+0x2fc>)
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8003e64 <HAL_GPIO_Init+0x300>)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d1a:	d02b      	beq.n	8003d74 <HAL_GPIO_Init+0x210>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a52      	ldr	r2, [pc, #328]	@ (8003e68 <HAL_GPIO_Init+0x304>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d025      	beq.n	8003d70 <HAL_GPIO_Init+0x20c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a51      	ldr	r2, [pc, #324]	@ (8003e6c <HAL_GPIO_Init+0x308>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01f      	beq.n	8003d6c <HAL_GPIO_Init+0x208>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a50      	ldr	r2, [pc, #320]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d019      	beq.n	8003d68 <HAL_GPIO_Init+0x204>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a4f      	ldr	r2, [pc, #316]	@ (8003e74 <HAL_GPIO_Init+0x310>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_GPIO_Init+0x200>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4e      	ldr	r2, [pc, #312]	@ (8003e78 <HAL_GPIO_Init+0x314>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00d      	beq.n	8003d60 <HAL_GPIO_Init+0x1fc>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a4d      	ldr	r2, [pc, #308]	@ (8003e7c <HAL_GPIO_Init+0x318>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <HAL_GPIO_Init+0x1f8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e80 <HAL_GPIO_Init+0x31c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_GPIO_Init+0x1f4>
 8003d54:	2307      	movs	r3, #7
 8003d56:	e00e      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d58:	2308      	movs	r3, #8
 8003d5a:	e00c      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d5c:	2306      	movs	r3, #6
 8003d5e:	e00a      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d60:	2305      	movs	r3, #5
 8003d62:	e008      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d64:	2304      	movs	r3, #4
 8003d66:	e006      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e004      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e002      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d74:	2300      	movs	r3, #0
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	f002 0203 	and.w	r2, r2, #3
 8003d7c:	0092      	lsls	r2, r2, #2
 8003d7e:	4093      	lsls	r3, r2
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d86:	4937      	ldr	r1, [pc, #220]	@ (8003e64 <HAL_GPIO_Init+0x300>)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d94:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003db8:	4a32      	ldr	r2, [pc, #200]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dbe:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de2:	4a28      	ldr	r2, [pc, #160]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003de8:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e12:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e36:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f47f ae91 	bne.w	8003b74 <HAL_GPIO_Init+0x10>
  }
}
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40010000 	.word	0x40010000
 8003e68:	48000400 	.word	0x48000400
 8003e6c:	48000800 	.word	0x48000800
 8003e70:	48000c00 	.word	0x48000c00
 8003e74:	48001000 	.word	0x48001000
 8003e78:	48001400 	.word	0x48001400
 8003e7c:	48001800 	.word	0x48001800
 8003e80:	48001c00 	.word	0x48001c00
 8003e84:	40010400 	.word	0x40010400

08003e88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e96:	e0c9      	b.n	800402c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80bc 	beq.w	8004026 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003eae:	4a66      	ldr	r2, [pc, #408]	@ (8004048 <HAL_GPIO_DeInit+0x1c0>)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ed6:	d02b      	beq.n	8003f30 <HAL_GPIO_DeInit+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a5c      	ldr	r2, [pc, #368]	@ (800404c <HAL_GPIO_DeInit+0x1c4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d025      	beq.n	8003f2c <HAL_GPIO_DeInit+0xa4>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8004050 <HAL_GPIO_DeInit+0x1c8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01f      	beq.n	8003f28 <HAL_GPIO_DeInit+0xa0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a5a      	ldr	r2, [pc, #360]	@ (8004054 <HAL_GPIO_DeInit+0x1cc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d019      	beq.n	8003f24 <HAL_GPIO_DeInit+0x9c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a59      	ldr	r2, [pc, #356]	@ (8004058 <HAL_GPIO_DeInit+0x1d0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <HAL_GPIO_DeInit+0x98>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a58      	ldr	r2, [pc, #352]	@ (800405c <HAL_GPIO_DeInit+0x1d4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00d      	beq.n	8003f1c <HAL_GPIO_DeInit+0x94>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a57      	ldr	r2, [pc, #348]	@ (8004060 <HAL_GPIO_DeInit+0x1d8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <HAL_GPIO_DeInit+0x90>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a56      	ldr	r2, [pc, #344]	@ (8004064 <HAL_GPIO_DeInit+0x1dc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_GPIO_DeInit+0x8c>
 8003f10:	2307      	movs	r3, #7
 8003f12:	e00e      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f14:	2308      	movs	r3, #8
 8003f16:	e00c      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f18:	2306      	movs	r3, #6
 8003f1a:	e00a      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f1c:	2305      	movs	r3, #5
 8003f1e:	e008      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f24:	2303      	movs	r3, #3
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_DeInit+0xaa>
 8003f30:	2300      	movs	r3, #0
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d132      	bne.n	8003fa8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f42:	4b49      	ldr	r3, [pc, #292]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	4947      	ldr	r1, [pc, #284]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f50:	4b45      	ldr	r3, [pc, #276]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	4943      	ldr	r1, [pc, #268]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f5e:	4b42      	ldr	r3, [pc, #264]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	4940      	ldr	r1, [pc, #256]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	493c      	ldr	r1, [pc, #240]	@ (8004068 <HAL_GPIO_DeInit+0x1e0>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	220f      	movs	r2, #15
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004048 <HAL_GPIO_DeInit+0x1c0>)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	3302      	adds	r3, #2
 8003f92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	482b      	ldr	r0, [pc, #172]	@ (8004048 <HAL_GPIO_DeInit+0x1c0>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	2103      	movs	r1, #3
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	08da      	lsrs	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3208      	adds	r2, #8
 8003fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	08d2      	lsrs	r2, r2, #3
 8003fdc:	4019      	ands	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3208      	adds	r2, #8
 8003fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2103      	movs	r1, #3
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	2101      	movs	r1, #1
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	401a      	ands	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2103      	movs	r1, #3
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	401a      	ands	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3301      	adds	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f af2f 	bne.w	8003e98 <HAL_GPIO_DeInit+0x10>
  }
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40010000 	.word	0x40010000
 800404c:	48000400 	.word	0x48000400
 8004050:	48000800 	.word	0x48000800
 8004054:	48000c00 	.word	0x48000c00
 8004058:	48001000 	.word	0x48001000
 800405c:	48001400 	.word	0x48001400
 8004060:	48001800 	.word	0x48001800
 8004064:	48001c00 	.word	0x48001c00
 8004068:	40010400 	.word	0x40010400

0800406c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
 8004078:	4613      	mov	r3, r2
 800407a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800407c:	787b      	ldrb	r3, [r7, #1]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004088:	e002      	b.n	8004090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	041a      	lsls	r2, r3, #16
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43d9      	mvns	r1, r3
 80040ba:	887b      	ldrh	r3, [r7, #2]
 80040bc:	400b      	ands	r3, r1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040d4:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40007000 	.word	0x40007000

080040ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040fa:	d130      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fc:	4b23      	ldr	r3, [pc, #140]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004108:	d038      	beq.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800410a:	4b20      	ldr	r3, [pc, #128]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004112:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800411a:	4b1d      	ldr	r3, [pc, #116]	@ (8004190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2232      	movs	r2, #50	@ 0x32
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004130:	e002      	b.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b01      	subs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004138:	4b14      	ldr	r3, [pc, #80]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004144:	d102      	bne.n	800414c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f2      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800414c:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004158:	d110      	bne.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e00f      	b.n	800417e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800415e:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d007      	beq.n	800417c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800416c:	4b07      	ldr	r3, [pc, #28]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004174:	4a05      	ldr	r2, [pc, #20]	@ (800418c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800417a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000
 8004190:	2000001c 	.word	0x2000001c
 8004194:	431bde83 	.word	0x431bde83

08004198 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80041a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041a6:	6053      	str	r3, [r2, #4]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40007000 	.word	0x40007000

080041b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f000 bc08 	b.w	80049dc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041cc:	4b96      	ldr	r3, [pc, #600]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d6:	4b94      	ldr	r3, [pc, #592]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80e4 	beq.w	80043b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <HAL_RCC_OscConfig+0x4c>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	f040 808b 	bne.w	8004312 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	f040 8087 	bne.w	8004312 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004204:	4b88      	ldr	r3, [pc, #544]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_OscConfig+0x64>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e3df      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	4b81      	ldr	r3, [pc, #516]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <HAL_RCC_OscConfig+0x7e>
 800422c:	4b7e      	ldr	r3, [pc, #504]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004234:	e005      	b.n	8004242 <HAL_RCC_OscConfig+0x8a>
 8004236:	4b7c      	ldr	r3, [pc, #496]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004242:	4293      	cmp	r3, r2
 8004244:	d223      	bcs.n	800428e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fd92 	bl	8004d74 <RCC_SetFlashLatencyFromMSIRange>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e3c0      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425a:	4b73      	ldr	r3, [pc, #460]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a72      	ldr	r2, [pc, #456]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004260:	f043 0308 	orr.w	r3, r3, #8
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b70      	ldr	r3, [pc, #448]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	496d      	ldr	r1, [pc, #436]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004278:	4b6b      	ldr	r3, [pc, #428]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	4968      	ldr	r1, [pc, #416]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
 800428c:	e025      	b.n	80042da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800428e:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a65      	ldr	r2, [pc, #404]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004294:	f043 0308 	orr.w	r3, r3, #8
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b63      	ldr	r3, [pc, #396]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4960      	ldr	r1, [pc, #384]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	495b      	ldr	r1, [pc, #364]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fd52 	bl	8004d74 <RCC_SetFlashLatencyFromMSIRange>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e380      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042da:	f000 fc87 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80042de:	4602      	mov	r2, r0
 80042e0:	4b51      	ldr	r3, [pc, #324]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	4950      	ldr	r1, [pc, #320]	@ (800442c <HAL_RCC_OscConfig+0x274>)
 80042ec:	5ccb      	ldrb	r3, [r1, r3]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	fa22 f303 	lsr.w	r3, r2, r3
 80042f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004430 <HAL_RCC_OscConfig+0x278>)
 80042f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004434 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe ff96 	bl	8003230 <HAL_InitTick>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d052      	beq.n	80043b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	e364      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d032      	beq.n	8004380 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800431a:	4b43      	ldr	r3, [pc, #268]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a42      	ldr	r2, [pc, #264]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004326:	f7fe ffd3 	bl	80032d0 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800432e:	f7fe ffcf 	bl	80032d0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e34d      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004340:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434c:	4b36      	ldr	r3, [pc, #216]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a35      	ldr	r2, [pc, #212]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b33      	ldr	r3, [pc, #204]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4930      	ldr	r1, [pc, #192]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	492b      	ldr	r1, [pc, #172]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 800437e:	e01a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004380:	4b29      	ldr	r3, [pc, #164]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a28      	ldr	r2, [pc, #160]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800438c:	f7fe ffa0 	bl	80032d0 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004394:	f7fe ff9c 	bl	80032d0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e31a      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043a6:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x1dc>
 80043b2:	e000      	b.n	80043b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d073      	beq.n	80044aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x21c>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d10e      	bne.n	80043ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d10b      	bne.n	80043ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d063      	beq.n	80044a8 <HAL_RCC_OscConfig+0x2f0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d15f      	bne.n	80044a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e2f7      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x24c>
 80043f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e025      	b.n	8004450 <HAL_RCC_OscConfig+0x298>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800440c:	d114      	bne.n	8004438 <HAL_RCC_OscConfig+0x280>
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a05      	ldr	r2, [pc, #20]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a02      	ldr	r2, [pc, #8]	@ (8004428 <HAL_RCC_OscConfig+0x270>)
 8004420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e013      	b.n	8004450 <HAL_RCC_OscConfig+0x298>
 8004428:	40021000 	.word	0x40021000
 800442c:	080089e4 	.word	0x080089e4
 8004430:	2000001c 	.word	0x2000001c
 8004434:	20000020 	.word	0x20000020
 8004438:	4ba0      	ldr	r3, [pc, #640]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a9f      	ldr	r2, [pc, #636]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b9d      	ldr	r3, [pc, #628]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a9c      	ldr	r2, [pc, #624]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800444a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800444e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fe ff3a 	bl	80032d0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe ff36 	bl	80032d0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	@ 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e2b4      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004472:	4b92      	ldr	r3, [pc, #584]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x2a8>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fe ff26 	bl	80032d0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe ff22 	bl	80032d0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e2a0      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449a:	4b88      	ldr	r3, [pc, #544]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x2d0>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d060      	beq.n	8004578 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_OscConfig+0x310>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d119      	bne.n	80044f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d116      	bne.n	80044f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c8:	4b7c      	ldr	r3, [pc, #496]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_OscConfig+0x328>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e27d      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b76      	ldr	r3, [pc, #472]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	4973      	ldr	r1, [pc, #460]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f4:	e040      	b.n	8004578 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d023      	beq.n	8004546 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044fe:	4b6f      	ldr	r3, [pc, #444]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6e      	ldr	r2, [pc, #440]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fe fee1 	bl	80032d0 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004512:	f7fe fedd 	bl	80032d0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e25b      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004524:	4b65      	ldr	r3, [pc, #404]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b62      	ldr	r3, [pc, #392]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	495f      	ldr	r1, [pc, #380]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
 8004544:	e018      	b.n	8004578 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b5d      	ldr	r3, [pc, #372]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5c      	ldr	r2, [pc, #368]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800454c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fe febd 	bl	80032d0 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455a:	f7fe feb9 	bl	80032d0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e237      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800456c:	4b53      	ldr	r3, [pc, #332]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03c      	beq.n	80045fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458c:	4b4b      	ldr	r3, [pc, #300]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800458e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004592:	4a4a      	ldr	r2, [pc, #296]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fe fe98 	bl	80032d0 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fe fe94 	bl	80032d0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e212      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b6:	4b41      	ldr	r3, [pc, #260]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <HAL_RCC_OscConfig+0x3ec>
 80045c4:	e01b      	b.n	80045fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c6:	4b3d      	ldr	r3, [pc, #244]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045cc:	4a3b      	ldr	r2, [pc, #236]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fe fe7b 	bl	80032d0 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045de:	f7fe fe77 	bl	80032d0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e1f5      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f0:	4b32      	ldr	r3, [pc, #200]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ef      	bne.n	80045de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a6 	beq.w	8004758 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004610:	4b2a      	ldr	r3, [pc, #168]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b27      	ldr	r3, [pc, #156]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004620:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6593      	str	r3, [r2, #88]	@ 0x58
 8004628:	4b24      	ldr	r3, [pc, #144]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004634:	2301      	movs	r3, #1
 8004636:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004638:	4b21      	ldr	r3, [pc, #132]	@ (80046c0 <HAL_RCC_OscConfig+0x508>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d118      	bne.n	8004676 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004644:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_RCC_OscConfig+0x508>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1d      	ldr	r2, [pc, #116]	@ (80046c0 <HAL_RCC_OscConfig+0x508>)
 800464a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800464e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004650:	f7fe fe3e 	bl	80032d0 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004658:	f7fe fe3a 	bl	80032d0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1b8      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466a:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <HAL_RCC_OscConfig+0x508>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d108      	bne.n	8004690 <HAL_RCC_OscConfig+0x4d8>
 800467e:	4b0f      	ldr	r3, [pc, #60]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	4a0d      	ldr	r2, [pc, #52]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800468e:	e029      	b.n	80046e4 <HAL_RCC_OscConfig+0x52c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b05      	cmp	r3, #5
 8004696:	d115      	bne.n	80046c4 <HAL_RCC_OscConfig+0x50c>
 8004698:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	4a07      	ldr	r2, [pc, #28]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046a8:	4b04      	ldr	r3, [pc, #16]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ae:	4a03      	ldr	r2, [pc, #12]	@ (80046bc <HAL_RCC_OscConfig+0x504>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b8:	e014      	b.n	80046e4 <HAL_RCC_OscConfig+0x52c>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40007000 	.word	0x40007000
 80046c4:	4b9d      	ldr	r3, [pc, #628]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ca:	4a9c      	ldr	r2, [pc, #624]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046d4:	4b99      	ldr	r3, [pc, #612]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046da:	4a98      	ldr	r2, [pc, #608]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80046dc:	f023 0304 	bic.w	r3, r3, #4
 80046e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d016      	beq.n	800471a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fe fdf0 	bl	80032d0 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fe fdec 	bl	80032d0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e168      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	4b8c      	ldr	r3, [pc, #560]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ed      	beq.n	80046f4 <HAL_RCC_OscConfig+0x53c>
 8004718:	e015      	b.n	8004746 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fe fdd9 	bl	80032d0 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fe fdd5 	bl	80032d0 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e151      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004738:	4b80      	ldr	r3, [pc, #512]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ed      	bne.n	8004722 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004746:	7ffb      	ldrb	r3, [r7, #31]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474c:	4b7b      	ldr	r3, [pc, #492]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	4a7a      	ldr	r2, [pc, #488]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004756:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03c      	beq.n	80047de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800476c:	4b73      	ldr	r3, [pc, #460]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 800476e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004772:	4a72      	ldr	r2, [pc, #456]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fe fda8 	bl	80032d0 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004784:	f7fe fda4 	bl	80032d0 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e122      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004796:	4b69      	ldr	r3, [pc, #420]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCC_OscConfig+0x5cc>
 80047a4:	e01b      	b.n	80047de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047a6:	4b65      	ldr	r3, [pc, #404]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80047a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ac:	4a63      	ldr	r2, [pc, #396]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fe fd8b 	bl	80032d0 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047be:	f7fe fd87 	bl	80032d0 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e105      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d0:	4b5a      	ldr	r3, [pc, #360]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80047d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ef      	bne.n	80047be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80f9 	beq.w	80049da <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	f040 80cf 	bne.w	8004990 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047f2:	4b52      	ldr	r3, [pc, #328]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	429a      	cmp	r2, r3
 8004804:	d12c      	bne.n	8004860 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	3b01      	subs	r3, #1
 8004812:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d123      	bne.n	8004860 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d11b      	bne.n	8004860 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d113      	bne.n	8004860 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	3b01      	subs	r3, #1
 8004846:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d109      	bne.n	8004860 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	3b01      	subs	r3, #1
 800485a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d071      	beq.n	8004944 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b0c      	cmp	r3, #12
 8004864:	d068      	beq.n	8004938 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004872:	4b32      	ldr	r3, [pc, #200]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e0ac      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004882:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2d      	ldr	r2, [pc, #180]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800488c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800488e:	f7fe fd1f 	bl	80032d0 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004896:	f7fe fd1b 	bl	80032d0 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e099      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b4:	4b21      	ldr	r3, [pc, #132]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <HAL_RCC_OscConfig+0x788>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048c4:	3a01      	subs	r2, #1
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048ce:	0212      	lsls	r2, r2, #8
 80048d0:	4311      	orrs	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048d6:	0852      	lsrs	r2, r2, #1
 80048d8:	3a01      	subs	r2, #1
 80048da:	0552      	lsls	r2, r2, #21
 80048dc:	4311      	orrs	r1, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048e2:	0852      	lsrs	r2, r2, #1
 80048e4:	3a01      	subs	r2, #1
 80048e6:	0652      	lsls	r2, r2, #25
 80048e8:	4311      	orrs	r1, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048ee:	06d2      	lsls	r2, r2, #27
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4912      	ldr	r1, [pc, #72]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048f8:	4b10      	ldr	r3, [pc, #64]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0f      	ldr	r2, [pc, #60]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 80048fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004902:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004904:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a0c      	ldr	r2, [pc, #48]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 800490a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004910:	f7fe fcde 	bl	80032d0 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fe fcda 	bl	80032d0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e058      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492a:	4b04      	ldr	r3, [pc, #16]	@ (800493c <HAL_RCC_OscConfig+0x784>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004936:	e050      	b.n	80049da <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e04f      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
 800493c:	40021000 	.word	0x40021000
 8004940:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d144      	bne.n	80049da <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004950:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a23      	ldr	r2, [pc, #140]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800495a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800495c:	4b21      	ldr	r3, [pc, #132]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a20      	ldr	r2, [pc, #128]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 8004962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004968:	f7fe fcb2 	bl	80032d0 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fe fcae 	bl	80032d0 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e02c      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004982:	4b18      	ldr	r3, [pc, #96]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x7b8>
 800498e:	e024      	b.n	80049da <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b0c      	cmp	r3, #12
 8004994:	d01f      	beq.n	80049d6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a12      	ldr	r2, [pc, #72]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 800499c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fe fc95 	bl	80032d0 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049aa:	f7fe fc91 	bl	80032d0 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e00f      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049bc:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f0      	bne.n	80049aa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	4905      	ldr	r1, [pc, #20]	@ (80049e4 <HAL_RCC_OscConfig+0x82c>)
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_OscConfig+0x830>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60cb      	str	r3, [r1, #12]
 80049d4:	e001      	b.n	80049da <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	feeefffc 	.word	0xfeeefffc

080049ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0e7      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	4b75      	ldr	r3, [pc, #468]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d910      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b72      	ldr	r3, [pc, #456]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 0207 	bic.w	r2, r3, #7
 8004a16:	4970      	ldr	r1, [pc, #448]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0cf      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d010      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	4b66      	ldr	r3, [pc, #408]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d908      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	4b63      	ldr	r3, [pc, #396]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4960      	ldr	r1, [pc, #384]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d04c      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a72:	4b5a      	ldr	r3, [pc, #360]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d121      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0a6      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8a:	4b54      	ldr	r3, [pc, #336]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d115      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e09a      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e08e      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e086      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ac2:	4b46      	ldr	r3, [pc, #280]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f023 0203 	bic.w	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4943      	ldr	r1, [pc, #268]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fe fbfc 	bl	80032d0 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004adc:	f7fe fbf8 	bl	80032d0 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e06e      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	4b3a      	ldr	r3, [pc, #232]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 020c 	and.w	r2, r3, #12
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d1eb      	bne.n	8004adc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d010      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	4b31      	ldr	r3, [pc, #196]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d208      	bcs.n	8004b32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b20:	4b2e      	ldr	r3, [pc, #184]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	492b      	ldr	r1, [pc, #172]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b32:	4b29      	ldr	r3, [pc, #164]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d210      	bcs.n	8004b62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b40:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f023 0207 	bic.w	r2, r3, #7
 8004b48:	4923      	ldr	r1, [pc, #140]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b50:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e036      	b.n	8004bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4918      	ldr	r1, [pc, #96]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d009      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8c:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4910      	ldr	r1, [pc, #64]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba0:	f000 f824 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <HAL_RCC_ClockConfig+0x1f0>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	490b      	ldr	r1, [pc, #44]	@ (8004be0 <HAL_RCC_ClockConfig+0x1f4>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f8>)
 8004bbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bc0:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCC_ClockConfig+0x1fc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fb33 	bl	8003230 <HAL_InitTick>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bce:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40022000 	.word	0x40022000
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	080089e4 	.word	0x080089e4
 8004be4:	2000001c 	.word	0x2000001c
 8004be8:	20000020 	.word	0x20000020

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	@ 0x24
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c04:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x34>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d121      	bne.n	8004c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d11e      	bne.n	8004c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c20:	4b34      	ldr	r3, [pc, #208]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c2c:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e005      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c48:	4a2b      	ldr	r2, [pc, #172]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5c:	e00a      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d102      	bne.n	8004c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c64:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e004      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c70:	4b23      	ldr	r3, [pc, #140]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d134      	bne.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d003      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0xac>
 8004c90:	e005      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c92:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004c94:	617b      	str	r3, [r7, #20]
      break;
 8004c96:	e005      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c98:	4b19      	ldr	r3, [pc, #100]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c9a:	617b      	str	r3, [r7, #20]
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	617b      	str	r3, [r7, #20]
      break;
 8004ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	3301      	adds	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	0a1b      	lsrs	r3, r3, #8
 8004cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	fb03 f202 	mul.w	r2, r3, r2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cca:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	0e5b      	lsrs	r3, r3, #25
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3724      	adds	r7, #36	@ 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	080089fc 	.word	0x080089fc
 8004cfc:	00f42400 	.word	0x00f42400
 8004d00:	007a1200 	.word	0x007a1200

08004d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d08:	4b03      	ldr	r3, [pc, #12]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	2000001c 	.word	0x2000001c

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d20:	f7ff fff0 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	@ (8004d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	080089f4 	.word	0x080089f4

08004d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d4c:	f7ff ffda 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0adb      	lsrs	r3, r3, #11
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4904      	ldr	r1, [pc, #16]	@ (8004d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	080089f4 	.word	0x080089f4

08004d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d80:	4b2a      	ldr	r3, [pc, #168]	@ (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d8c:	f7ff f9a0 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004d90:	6178      	str	r0, [r7, #20]
 8004d92:	e014      	b.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b25      	ldr	r3, [pc, #148]	@ (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d98:	4a24      	ldr	r2, [pc, #144]	@ (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da0:	4b22      	ldr	r3, [pc, #136]	@ (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dac:	f7ff f990 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004db2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc4:	d10b      	bne.n	8004dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b80      	cmp	r3, #128	@ 0x80
 8004dca:	d919      	bls.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dd0:	d902      	bls.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	e013      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd8:	2301      	movs	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e010      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b80      	cmp	r3, #128	@ 0x80
 8004de2:	d902      	bls.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004de4:	2303      	movs	r3, #3
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e00a      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b80      	cmp	r3, #128	@ 0x80
 8004dee:	d102      	bne.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004df0:	2302      	movs	r3, #2
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e004      	b.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b70      	cmp	r3, #112	@ 0x70
 8004dfa:	d101      	bne.n	8004e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 0207 	bic.w	r2, r3, #7
 8004e08:	4909      	ldr	r1, [pc, #36]	@ (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e10:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d001      	beq.n	8004e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40022000 	.word	0x40022000

08004e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e40:	2300      	movs	r3, #0
 8004e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d041      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e58:	d02a      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e5e:	d824      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e64:	d008      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e6a:	d81e      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e74:	d010      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e76:	e018      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e78:	4b86      	ldr	r3, [pc, #536]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a85      	ldr	r2, [pc, #532]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e84:	e015      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 facd 	bl	800542c <RCCEx_PLLSAI1_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e96:	e00c      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3320      	adds	r3, #32
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fbb6 	bl	8005610 <RCCEx_PLLSAI2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ea8:	e003      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	74fb      	strb	r3, [r7, #19]
      break;
 8004eae:	e000      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb2:	7cfb      	ldrb	r3, [r7, #19]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eb8:	4b76      	ldr	r3, [pc, #472]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ec6:	4973      	ldr	r1, [pc, #460]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ece:	e001      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d041      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ee8:	d02a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eee:	d824      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ef4:	d008      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efa:	d81e      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f04:	d010      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f06:	e018      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f08:	4b62      	ldr	r3, [pc, #392]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a61      	ldr	r2, [pc, #388]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f14:	e015      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fa85 	bl	800542c <RCCEx_PLLSAI1_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f26:	e00c      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3320      	adds	r3, #32
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fb6e 	bl	8005610 <RCCEx_PLLSAI2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f48:	4b52      	ldr	r3, [pc, #328]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f56:	494f      	ldr	r1, [pc, #316]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80a0 	beq.w	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f76:	4b47      	ldr	r3, [pc, #284]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b41      	ldr	r3, [pc, #260]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	4a40      	ldr	r2, [pc, #256]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f98:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a3a      	ldr	r2, [pc, #232]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb4:	f7fe f98c 	bl	80032d0 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fba:	e009      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fe f988 	bl	80032d0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd0:	4b31      	ldr	r3, [pc, #196]	@ (8005098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ef      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d15c      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01f      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d019      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005000:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800500a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800500c:	4b21      	ldr	r3, [pc, #132]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005012:	4a20      	ldr	r2, [pc, #128]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800501c:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800502c:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fe f947 	bl	80032d0 <HAL_GetTick>
 8005042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005044:	e00b      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fe f943 	bl	80032d0 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d902      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	74fb      	strb	r3, [r7, #19]
            break;
 800505c:	e006      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ec      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10c      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005072:	4b08      	ldr	r3, [pc, #32]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	4904      	ldr	r1, [pc, #16]	@ (8005094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800508a:	e009      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	74bb      	strb	r3, [r7, #18]
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a0:	7c7b      	ldrb	r3, [r7, #17]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d105      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a6:	4ba6      	ldr	r3, [pc, #664]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	4aa5      	ldr	r2, [pc, #660]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050be:	4ba0      	ldr	r3, [pc, #640]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c4:	f023 0203 	bic.w	r2, r3, #3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	499c      	ldr	r1, [pc, #624]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e0:	4b97      	ldr	r3, [pc, #604]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e6:	f023 020c 	bic.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	4994      	ldr	r1, [pc, #592]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005102:	4b8f      	ldr	r3, [pc, #572]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005108:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	498b      	ldr	r1, [pc, #556]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005124:	4b86      	ldr	r3, [pc, #536]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005132:	4983      	ldr	r1, [pc, #524]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005146:	4b7e      	ldr	r3, [pc, #504]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005154:	497a      	ldr	r1, [pc, #488]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005168:	4b75      	ldr	r3, [pc, #468]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005176:	4972      	ldr	r1, [pc, #456]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518a:	4b6d      	ldr	r3, [pc, #436]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005198:	4969      	ldr	r1, [pc, #420]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ac:	4b64      	ldr	r3, [pc, #400]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ba:	4961      	ldr	r1, [pc, #388]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051dc:	4958      	ldr	r1, [pc, #352]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f0:	4b53      	ldr	r3, [pc, #332]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	4950      	ldr	r1, [pc, #320]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005212:	4b4b      	ldr	r3, [pc, #300]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005218:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005220:	4947      	ldr	r1, [pc, #284]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005234:	4b42      	ldr	r3, [pc, #264]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800523a:	f023 0203 	bic.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	493f      	ldr	r1, [pc, #252]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d028      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005256:	4b3a      	ldr	r3, [pc, #232]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005264:	4936      	ldr	r1, [pc, #216]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005274:	d106      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005276:	4b32      	ldr	r3, [pc, #200]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4a31      	ldr	r2, [pc, #196]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800527c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005280:	60d3      	str	r3, [r2, #12]
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	2101      	movs	r1, #1
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f8c9 	bl	800542c <RCCEx_PLLSAI1_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d028      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052b4:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c2:	491f      	ldr	r1, [pc, #124]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d2:	d106      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4a19      	ldr	r2, [pc, #100]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	e011      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2101      	movs	r1, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f89a 	bl	800542c <RCCEx_PLLSAI1_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d02a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005312:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005318:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005320:	4907      	ldr	r1, [pc, #28]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800532c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005330:	d108      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005332:	4b03      	ldr	r3, [pc, #12]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a02      	ldr	r2, [pc, #8]	@ (8005340 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533c:	60d3      	str	r3, [r2, #12]
 800533e:	e013      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005340:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f869 	bl	800542c <RCCEx_PLLSAI1_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005374:	4b2c      	ldr	r3, [pc, #176]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005382:	4929      	ldr	r1, [pc, #164]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800538e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005392:	d10d      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f846 	bl	800542c <RCCEx_PLLSAI1_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d014      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	74bb      	strb	r3, [r7, #18]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3320      	adds	r3, #32
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f925 	bl	8005610 <RCCEx_PLLSAI2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053e0:	4b11      	ldr	r3, [pc, #68]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f0:	490d      	ldr	r1, [pc, #52]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005404:	4b08      	ldr	r3, [pc, #32]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005414:	4904      	ldr	r1, [pc, #16]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800541c:	7cbb      	ldrb	r3, [r7, #18]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000

0800542c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800543a:	4b74      	ldr	r3, [pc, #464]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d018      	beq.n	8005478 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005446:	4b71      	ldr	r3, [pc, #452]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0203 	and.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d10d      	bne.n	8005472 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
       ||
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800545e:	4b6b      	ldr	r3, [pc, #428]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
       ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d047      	beq.n	8005502 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	e044      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d018      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0x86>
 8005480:	2b03      	cmp	r3, #3
 8005482:	d825      	bhi.n	80054d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005484:	2b01      	cmp	r3, #1
 8005486:	d002      	beq.n	800548e <RCCEx_PLLSAI1_Config+0x62>
 8005488:	2b02      	cmp	r3, #2
 800548a:	d009      	beq.n	80054a0 <RCCEx_PLLSAI1_Config+0x74>
 800548c:	e020      	b.n	80054d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800548e:	4b5f      	ldr	r3, [pc, #380]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d11d      	bne.n	80054d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549e:	e01a      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054a0:	4b5a      	ldr	r3, [pc, #360]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d116      	bne.n	80054da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b0:	e013      	b.n	80054da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054b2:	4b56      	ldr	r3, [pc, #344]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054be:	4b53      	ldr	r3, [pc, #332]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ce:	e006      	b.n	80054de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	e004      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054de:	bf00      	nop
    }

    if(status == HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054e6:	4b49      	ldr	r3, [pc, #292]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	430b      	orrs	r3, r1
 80054fc:	4943      	ldr	r1, [pc, #268]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d17c      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005508:	4b40      	ldr	r3, [pc, #256]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a3f      	ldr	r2, [pc, #252]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 800550e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005514:	f7fd fedc 	bl	80032d0 <HAL_GetTick>
 8005518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800551a:	e009      	b.n	8005530 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800551c:	f7fd fed8 	bl	80032d0 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d902      	bls.n	8005530 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	73fb      	strb	r3, [r7, #15]
        break;
 800552e:	e005      	b.n	800553c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005530:	4b36      	ldr	r3, [pc, #216]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ef      	bne.n	800551c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d15f      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d110      	bne.n	800556a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005548:	4b30      	ldr	r3, [pc, #192]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005550:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6892      	ldr	r2, [r2, #8]
 8005558:	0211      	lsls	r1, r2, #8
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68d2      	ldr	r2, [r2, #12]
 800555e:	06d2      	lsls	r2, r2, #27
 8005560:	430a      	orrs	r2, r1
 8005562:	492a      	ldr	r1, [pc, #168]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005564:	4313      	orrs	r3, r2
 8005566:	610b      	str	r3, [r1, #16]
 8005568:	e027      	b.n	80055ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d112      	bne.n	8005596 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005570:	4b26      	ldr	r3, [pc, #152]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005578:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6892      	ldr	r2, [r2, #8]
 8005580:	0211      	lsls	r1, r2, #8
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6912      	ldr	r2, [r2, #16]
 8005586:	0852      	lsrs	r2, r2, #1
 8005588:	3a01      	subs	r2, #1
 800558a:	0552      	lsls	r2, r2, #21
 800558c:	430a      	orrs	r2, r1
 800558e:	491f      	ldr	r1, [pc, #124]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005590:	4313      	orrs	r3, r2
 8005592:	610b      	str	r3, [r1, #16]
 8005594:	e011      	b.n	80055ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005596:	4b1d      	ldr	r3, [pc, #116]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800559e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6892      	ldr	r2, [r2, #8]
 80055a6:	0211      	lsls	r1, r2, #8
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6952      	ldr	r2, [r2, #20]
 80055ac:	0852      	lsrs	r2, r2, #1
 80055ae:	3a01      	subs	r2, #1
 80055b0:	0652      	lsls	r2, r2, #25
 80055b2:	430a      	orrs	r2, r1
 80055b4:	4915      	ldr	r1, [pc, #84]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055ba:	4b14      	ldr	r3, [pc, #80]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a13      	ldr	r2, [pc, #76]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c6:	f7fd fe83 	bl	80032d0 <HAL_GetTick>
 80055ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055cc:	e009      	b.n	80055e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ce:	f7fd fe7f 	bl	80032d0 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d902      	bls.n	80055e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	73fb      	strb	r3, [r7, #15]
          break;
 80055e0:	e005      	b.n	80055ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0ef      	beq.n	80055ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055f4:	4b05      	ldr	r3, [pc, #20]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	4903      	ldr	r1, [pc, #12]	@ (800560c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000

08005610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561e:	4b69      	ldr	r3, [pc, #420]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800562a:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0203 	and.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10d      	bne.n	8005656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
       ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005642:	4b60      	ldr	r3, [pc, #384]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
       ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d047      	beq.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e044      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d018      	beq.n	8005696 <RCCEx_PLLSAI2_Config+0x86>
 8005664:	2b03      	cmp	r3, #3
 8005666:	d825      	bhi.n	80056b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <RCCEx_PLLSAI2_Config+0x62>
 800566c:	2b02      	cmp	r3, #2
 800566e:	d009      	beq.n	8005684 <RCCEx_PLLSAI2_Config+0x74>
 8005670:	e020      	b.n	80056b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005672:	4b54      	ldr	r3, [pc, #336]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005682:	e01a      	b.n	80056ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005684:	4b4f      	ldr	r3, [pc, #316]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005694:	e013      	b.n	80056be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005696:	4b4b      	ldr	r3, [pc, #300]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056a2:	4b48      	ldr	r3, [pc, #288]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e004      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ca:	4b3e      	ldr	r3, [pc, #248]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	430b      	orrs	r3, r1
 80056e0:	4938      	ldr	r1, [pc, #224]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d166      	bne.n	80057ba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056ec:	4b35      	ldr	r3, [pc, #212]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a34      	ldr	r2, [pc, #208]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fd fdea 	bl	80032d0 <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005700:	f7fd fde6 	bl	80032d0 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
        break;
 8005712:	e005      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005714:	4b2b      	ldr	r3, [pc, #172]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d149      	bne.n	80057ba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d110      	bne.n	800574e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800572c:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005734:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6892      	ldr	r2, [r2, #8]
 800573c:	0211      	lsls	r1, r2, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	06d2      	lsls	r2, r2, #27
 8005744:	430a      	orrs	r2, r1
 8005746:	491f      	ldr	r1, [pc, #124]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005748:	4313      	orrs	r3, r2
 800574a:	614b      	str	r3, [r1, #20]
 800574c:	e011      	b.n	8005772 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800574e:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005756:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6892      	ldr	r2, [r2, #8]
 800575e:	0211      	lsls	r1, r2, #8
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6912      	ldr	r2, [r2, #16]
 8005764:	0852      	lsrs	r2, r2, #1
 8005766:	3a01      	subs	r2, #1
 8005768:	0652      	lsls	r2, r2, #25
 800576a:	430a      	orrs	r2, r1
 800576c:	4915      	ldr	r1, [pc, #84]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800576e:	4313      	orrs	r3, r2
 8005770:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005772:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a13      	ldr	r2, [pc, #76]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fd fda7 	bl	80032d0 <HAL_GetTick>
 8005782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005784:	e009      	b.n	800579a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005786:	f7fd fda3 	bl	80032d0 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d902      	bls.n	800579a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	73fb      	strb	r3, [r7, #15]
          break;
 8005798:	e005      	b.n	80057a6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800579a:	4b0a      	ldr	r3, [pc, #40]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ef      	beq.n	8005786 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057ac:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057ae:	695a      	ldr	r2, [r3, #20]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	4903      	ldr	r1, [pc, #12]	@ (80057c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000

080057c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e095      	b.n	8005906 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ea:	d009      	beq.n	8005800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	61da      	str	r2, [r3, #28]
 80057f2:	e005      	b.n	8005800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fd fb6c 	bl	8002ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005836:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005840:	d902      	bls.n	8005848 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e002      	b.n	800584e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800584c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005856:	d007      	beq.n	8005868 <HAL_SPI_Init+0xa0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005860:	d002      	beq.n	8005868 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058aa:	ea42 0103 	orr.w	r1, r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	f003 0204 	and.w	r2, r3, #4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058e4:	ea42 0103 	orr.w	r1, r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e01a      	b.n	8005956 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005936:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fd fb7b 	bl	8003034 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b088      	sub	sp, #32
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596e:	f7fd fcaf 	bl	80032d0 <HAL_GetTick>
 8005972:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
 8005986:	e15c      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0x36>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e154      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Transmit+0x48>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e14d      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f8:	d10f      	bne.n	8005a1a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a40:	d952      	bls.n	8005ae8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_Transmit+0xf2>
 8005a4a:	8b7b      	ldrh	r3, [r7, #26]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d145      	bne.n	8005adc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a74:	e032      	b.n	8005adc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d112      	bne.n	8005aaa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aa8:	e018      	b.n	8005adc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aaa:	f7fd fc11 	bl	80032d0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d803      	bhi.n	8005ac2 <HAL_SPI_Transmit+0x164>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <HAL_SPI_Transmit+0x16a>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e0b2      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1c7      	bne.n	8005a76 <HAL_SPI_Transmit+0x118>
 8005ae6:	e083      	b.n	8005bf0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Transmit+0x198>
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d177      	bne.n	8005be6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d912      	bls.n	8005b26 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b02      	subs	r3, #2
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b24:	e05f      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b4c:	e04b      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d12b      	bne.n	8005bb4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d912      	bls.n	8005b8c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b02      	subs	r3, #2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b8a:	e02c      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	7812      	ldrb	r2, [r2, #0]
 8005b98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bb2:	e018      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb4:	f7fd fb8c 	bl	80032d0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d803      	bhi.n	8005bcc <HAL_SPI_Transmit+0x26e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d102      	bne.n	8005bd2 <HAL_SPI_Transmit+0x274>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e02d      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ae      	bne.n	8005b4e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fac1 	bl	800617c <SPI_EndRxTxTransaction>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
  }
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d001      	beq.n	8005c6a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
 8005c68:	e0d4      	b.n	8005e14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_SPI_Transmit_DMA+0x2a>
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e0cc      	b.n	8005e14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_SPI_Transmit_DMA+0x3c>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e0c5      	b.n	8005e14 <HAL_SPI_Transmit_DMA+0x1c8>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2203      	movs	r2, #3
 8005c94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cda:	d10f      	bne.n	8005cfc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d00:	4a46      	ldr	r2, [pc, #280]	@ (8005e1c <HAL_SPI_Transmit_DMA+0x1d0>)
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d08:	4a45      	ldr	r2, [pc, #276]	@ (8005e20 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d10:	4a44      	ldr	r2, [pc, #272]	@ (8005e24 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d18:	2200      	movs	r2, #0
 8005d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d2a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d34:	d82d      	bhi.n	8005d92 <HAL_SPI_Transmit_DMA+0x146>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d40:	d127      	bne.n	8005d92 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10f      	bne.n	8005d70 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d5e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d6e:	e010      	b.n	8005d92 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d7e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005daa:	f7fd fd1d 	bl	80037e8 <HAL_DMA_Start_IT>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db8:	f043 0210 	orr.w	r2, r3, #16
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e023      	b.n	8005e14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d007      	beq.n	8005dea <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0202 	orr.w	r2, r2, #2
 8005e10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	08005ee3 	.word	0x08005ee3
 8005e20:	08005e3d 	.word	0x08005e3d
 8005e24:	08005eff 	.word	0x08005eff

08005e28 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e48:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e4a:	f7fd fa41 	bl	80032d0 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d03b      	beq.n	8005ed6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0220 	bic.w	r2, r2, #32
 8005e6c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0202 	bic.w	r2, r2, #2
 8005e7c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	2164      	movs	r1, #100	@ 0x64
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f000 f97a 	bl	800617c <SPI_EndRxTxTransaction>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e92:	f043 0220 	orr.w	r2, r3, #32
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ece:	6978      	ldr	r0, [r7, #20]
 8005ed0:	f7fb ff6e 	bl	8001db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ed4:	e002      	b.n	8005edc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	f7fb ffa0 	bl	8001e1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff ff99 	bl	8005e28 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0203 	bic.w	r2, r2, #3
 8005f1a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f20:	f043 0210 	orr.w	r2, r3, #16
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7fb ff3d 	bl	8001db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f50:	f7fd f9be 	bl	80032d0 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f60:	f7fd f9b6 	bl	80032d0 <HAL_GetTick>
 8005f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f66:	4b39      	ldr	r3, [pc, #228]	@ (800604c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	015b      	lsls	r3, r3, #5
 8005f6c:	0d1b      	lsrs	r3, r3, #20
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f76:	e054      	b.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7e:	d050      	beq.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f80:	f7fd f9a6 	bl	80032d0 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d902      	bls.n	8005f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d13d      	bne.n	8006012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fae:	d111      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fb8:	d004      	beq.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc2:	d107      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fdc:	d10f      	bne.n	8005ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e017      	b.n	8006042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	3b01      	subs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4013      	ands	r3, r2
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	429a      	cmp	r2, r3
 800603e:	d19b      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2000001c 	.word	0x2000001c

08006050 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	@ 0x28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006062:	f7fd f935 	bl	80032d0 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	4413      	add	r3, r2
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006072:	f7fd f92d 	bl	80032d0 <HAL_GetTick>
 8006076:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006080:	4b3d      	ldr	r3, [pc, #244]	@ (8006178 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00da      	lsls	r2, r3, #3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	0d1b      	lsrs	r3, r3, #20
 8006090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006098:	e060      	b.n	800615c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80060a0:	d107      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d050      	beq.n	800615c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ba:	f7fd f909 	bl	80032d0 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d902      	bls.n	80060d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d13d      	bne.n	800614c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e8:	d111      	bne.n	800610e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f2:	d004      	beq.n	80060fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fc:	d107      	bne.n	800610e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800610c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006116:	d10f      	bne.n	8006138 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006136:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e010      	b.n	800616e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	3b01      	subs	r3, #1
 800615a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d196      	bne.n	800609a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3728      	adds	r7, #40	@ 0x28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	2000001c 	.word	0x2000001c

0800617c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff5b 	bl	8006050 <SPI_WaitFifoStateUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e027      	b.n	8006200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2180      	movs	r1, #128	@ 0x80
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff fec0 	bl	8005f40 <SPI_WaitFlagStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e014      	b.n	8006200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2200      	movs	r2, #0
 80061de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff ff34 	bl	8006050 <SPI_WaitFifoStateUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e000      	b.n	8006200 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e040      	b.n	800629c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fc fdfc 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	@ 0x24
 8006234:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fe52 	bl	8006ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb97 	bl	8006988 <UART_SetConfig>
 800625a:	4603      	mov	r3, r0
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e01b      	b.n	800629c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fed1 	bl	800703c <UART_CheckIdleState>
 800629a:	4603      	mov	r3, r0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	@ 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d137      	bne.n	800632c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_UART_Receive_IT+0x24>
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e030      	b.n	800632e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <HAL_UART_Receive_IT+0x94>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d01f      	beq.n	800631c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	613b      	str	r3, [r7, #16]
   return(result);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	69f9      	ldr	r1, [r7, #28]
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	61bb      	str	r3, [r7, #24]
   return(result);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	461a      	mov	r2, r3
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 ffa0 	bl	8007268 <UART_Start_Receive_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	e000      	b.n	800632e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3728      	adds	r7, #40	@ 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40008000 	.word	0x40008000

0800633c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b0ba      	sub	sp, #232	@ 0xe8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800636a:	4013      	ands	r3, r2
 800636c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d115      	bne.n	80063a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00f      	beq.n	80063a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d009      	beq.n	80063a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 82ca 	beq.w	800692e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
      }
      return;
 80063a2:	e2c4      	b.n	800692e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80063a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8117 	beq.w	80065dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063be:	4b85      	ldr	r3, [pc, #532]	@ (80065d4 <HAL_UART_IRQHandler+0x298>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 810a 	beq.w	80065dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <HAL_UART_IRQHandler+0xbc>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ee:	f043 0201 	orr.w	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d011      	beq.n	8006428 <HAL_UART_IRQHandler+0xec>
 8006404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2202      	movs	r2, #2
 8006416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d011      	beq.n	8006458 <HAL_UART_IRQHandler+0x11c>
 8006434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2204      	movs	r2, #4
 8006446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644e:	f043 0202 	orr.w	r2, r3, #2
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d017      	beq.n	8006494 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2208      	movs	r2, #8
 8006482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648a:	f043 0208 	orr.w	r2, r3, #8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800649c:	2b00      	cmp	r3, #0
 800649e:	d012      	beq.n	80064c6 <HAL_UART_IRQHandler+0x18a>
 80064a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8230 	beq.w	8006932 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b40      	cmp	r3, #64	@ 0x40
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006516:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04f      	beq.n	80065be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 ff68 	bl	80073f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d141      	bne.n	80065b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800654c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800655e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800656a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658a:	4a13      	ldr	r2, [pc, #76]	@ (80065d8 <HAL_UART_IRQHandler+0x29c>)
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006592:	4618      	mov	r0, r3
 8006594:	f7fd f9c6 	bl	8003924 <HAL_DMA_Abort_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d017      	beq.n	80065ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e00f      	b.n	80065ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9d4 	bl	800695c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b4:	e00b      	b.n	80065ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f9d0 	bl	800695c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	e007      	b.n	80065ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9cc 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80065cc:	e1b1      	b.n	8006932 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ce:	bf00      	nop
    return;
 80065d0:	e1af      	b.n	8006932 <HAL_UART_IRQHandler+0x5f6>
 80065d2:	bf00      	nop
 80065d4:	04000120 	.word	0x04000120
 80065d8:	080074bd 	.word	0x080074bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f040 816a 	bne.w	80068ba <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8163 	beq.w	80068ba <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 815c 	beq.w	80068ba <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b40      	cmp	r3, #64	@ 0x40
 8006616:	f040 80d4 	bne.w	80067c2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006626:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 80ad 	beq.w	800678a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663a:	429a      	cmp	r2, r3
 800663c:	f080 80a5 	bcs.w	800678a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006646:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8086 	bne.w	8006768 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800668a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1da      	bne.n	800665c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e1      	bne.n	80066a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800670c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006738:	f023 0310 	bic.w	r3, r3, #16
 800673c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e4      	bne.n	8006728 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006762:	4618      	mov	r0, r3
 8006764:	f7fd f8a0 	bl	80038a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800677a:	b29b      	uxth	r3, r3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	b29b      	uxth	r3, r3
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f8f4 	bl	8006970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006788:	e0d5      	b.n	8006936 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006794:	429a      	cmp	r2, r3
 8006796:	f040 80ce 	bne.w	8006936 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f040 80c5 	bne.w	8006936 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f8d8 	bl	8006970 <HAL_UARTEx_RxEventCallback>
      return;
 80067c0:	e0b9      	b.n	8006936 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80ab 	beq.w	800693a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80067e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80a6 	beq.w	800693a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006810:	647b      	str	r3, [r7, #68]	@ 0x44
 8006812:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800681e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e4      	bne.n	80067ee <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	623b      	str	r3, [r7, #32]
   return(result);
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	f023 0301 	bic.w	r3, r3, #1
 800683a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006848:	633a      	str	r2, [r7, #48]	@ 0x30
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800684e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e3      	bne.n	8006824 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2220      	movs	r2, #32
 8006860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	60fb      	str	r3, [r7, #12]
   return(result);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f023 0310 	bic.w	r3, r3, #16
 8006884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	69b9      	ldr	r1, [r7, #24]
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	617b      	str	r3, [r7, #20]
   return(result);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e4      	bne.n	8006870 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f85c 	bl	8006970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068b8:	e03f      	b.n	800693a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5a8>
 80068c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 ffe9 	bl	80078b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068e2:	e02d      	b.n	8006940 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01c      	beq.n	800693e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
    }
    return;
 800690c:	e017      	b.n	800693e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <HAL_UART_IRQHandler+0x604>
 800691a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00c      	beq.n	8006940 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fdde 	bl	80074e8 <UART_EndTransmit_IT>
    return;
 800692c:	e008      	b.n	8006940 <HAL_UART_IRQHandler+0x604>
      return;
 800692e:	bf00      	nop
 8006930:	e006      	b.n	8006940 <HAL_UART_IRQHandler+0x604>
    return;
 8006932:	bf00      	nop
 8006934:	e004      	b.n	8006940 <HAL_UART_IRQHandler+0x604>
      return;
 8006936:	bf00      	nop
 8006938:	e002      	b.n	8006940 <HAL_UART_IRQHandler+0x604>
      return;
 800693a:	bf00      	nop
 800693c:	e000      	b.n	8006940 <HAL_UART_IRQHandler+0x604>
    return;
 800693e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006940:	37e8      	adds	r7, #232	@ 0xe8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop

08006948 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800698c:	b08a      	sub	sp, #40	@ 0x28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4ba4      	ldr	r3, [pc, #656]	@ (8006c48 <UART_SetConfig+0x2c0>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a99      	ldr	r2, [pc, #612]	@ (8006c4c <UART_SetConfig+0x2c4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069f0:	4313      	orrs	r3, r2
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a90      	ldr	r2, [pc, #576]	@ (8006c50 <UART_SetConfig+0x2c8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d126      	bne.n	8006a60 <UART_SetConfig+0xd8>
 8006a12:	4b90      	ldr	r3, [pc, #576]	@ (8006c54 <UART_SetConfig+0x2cc>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d81b      	bhi.n	8006a58 <UART_SetConfig+0xd0>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0xa0>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3e:	e116      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006a40:	2302      	movs	r3, #2
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a46:	e112      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a4e:	e10e      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006a50:	2308      	movs	r3, #8
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a56:	e10a      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a5e:	e106      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a7c      	ldr	r2, [pc, #496]	@ (8006c58 <UART_SetConfig+0x2d0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d138      	bne.n	8006adc <UART_SetConfig+0x154>
 8006a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c54 <UART_SetConfig+0x2cc>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a70:	f003 030c 	and.w	r3, r3, #12
 8006a74:	2b0c      	cmp	r3, #12
 8006a76:	d82d      	bhi.n	8006ad4 <UART_SetConfig+0x14c>
 8006a78:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <UART_SetConfig+0xf8>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	08006ad5 	.word	0x08006ad5
 8006a8c:	08006ad5 	.word	0x08006ad5
 8006a90:	08006ac5 	.word	0x08006ac5
 8006a94:	08006ad5 	.word	0x08006ad5
 8006a98:	08006ad5 	.word	0x08006ad5
 8006a9c:	08006ad5 	.word	0x08006ad5
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ad5 	.word	0x08006ad5
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006acd 	.word	0x08006acd
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aba:	e0d8      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006abc:	2302      	movs	r3, #2
 8006abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac2:	e0d4      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006ac4:	2304      	movs	r3, #4
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aca:	e0d0      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006acc:	2308      	movs	r3, #8
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ad2:	e0cc      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006ad4:	2310      	movs	r3, #16
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ada:	e0c8      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c5c <UART_SetConfig+0x2d4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d125      	bne.n	8006b32 <UART_SetConfig+0x1aa>
 8006ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c54 <UART_SetConfig+0x2cc>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006af0:	2b30      	cmp	r3, #48	@ 0x30
 8006af2:	d016      	beq.n	8006b22 <UART_SetConfig+0x19a>
 8006af4:	2b30      	cmp	r3, #48	@ 0x30
 8006af6:	d818      	bhi.n	8006b2a <UART_SetConfig+0x1a2>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d00a      	beq.n	8006b12 <UART_SetConfig+0x18a>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d814      	bhi.n	8006b2a <UART_SetConfig+0x1a2>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <UART_SetConfig+0x182>
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d008      	beq.n	8006b1a <UART_SetConfig+0x192>
 8006b08:	e00f      	b.n	8006b2a <UART_SetConfig+0x1a2>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b10:	e0ad      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b12:	2302      	movs	r3, #2
 8006b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b18:	e0a9      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b20:	e0a5      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b22:	2308      	movs	r3, #8
 8006b24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b28:	e0a1      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b30:	e09d      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a4a      	ldr	r2, [pc, #296]	@ (8006c60 <UART_SetConfig+0x2d8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d125      	bne.n	8006b88 <UART_SetConfig+0x200>
 8006b3c:	4b45      	ldr	r3, [pc, #276]	@ (8006c54 <UART_SetConfig+0x2cc>)
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b48:	d016      	beq.n	8006b78 <UART_SetConfig+0x1f0>
 8006b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b4c:	d818      	bhi.n	8006b80 <UART_SetConfig+0x1f8>
 8006b4e:	2b80      	cmp	r3, #128	@ 0x80
 8006b50:	d00a      	beq.n	8006b68 <UART_SetConfig+0x1e0>
 8006b52:	2b80      	cmp	r3, #128	@ 0x80
 8006b54:	d814      	bhi.n	8006b80 <UART_SetConfig+0x1f8>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <UART_SetConfig+0x1d8>
 8006b5a:	2b40      	cmp	r3, #64	@ 0x40
 8006b5c:	d008      	beq.n	8006b70 <UART_SetConfig+0x1e8>
 8006b5e:	e00f      	b.n	8006b80 <UART_SetConfig+0x1f8>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b66:	e082      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6e:	e07e      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b70:	2304      	movs	r3, #4
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b76:	e07a      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b7e:	e076      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b80:	2310      	movs	r3, #16
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b86:	e072      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a35      	ldr	r2, [pc, #212]	@ (8006c64 <UART_SetConfig+0x2dc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d12a      	bne.n	8006be8 <UART_SetConfig+0x260>
 8006b92:	4b30      	ldr	r3, [pc, #192]	@ (8006c54 <UART_SetConfig+0x2cc>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba0:	d01a      	beq.n	8006bd8 <UART_SetConfig+0x250>
 8006ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba6:	d81b      	bhi.n	8006be0 <UART_SetConfig+0x258>
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bac:	d00c      	beq.n	8006bc8 <UART_SetConfig+0x240>
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb2:	d815      	bhi.n	8006be0 <UART_SetConfig+0x258>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <UART_SetConfig+0x238>
 8006bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bbc:	d008      	beq.n	8006bd0 <UART_SetConfig+0x248>
 8006bbe:	e00f      	b.n	8006be0 <UART_SetConfig+0x258>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc6:	e052      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bce:	e04e      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bd6:	e04a      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bde:	e046      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006be0:	2310      	movs	r3, #16
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006be6:	e042      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a17      	ldr	r2, [pc, #92]	@ (8006c4c <UART_SetConfig+0x2c4>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d13a      	bne.n	8006c68 <UART_SetConfig+0x2e0>
 8006bf2:	4b18      	ldr	r3, [pc, #96]	@ (8006c54 <UART_SetConfig+0x2cc>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c00:	d01a      	beq.n	8006c38 <UART_SetConfig+0x2b0>
 8006c02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c06:	d81b      	bhi.n	8006c40 <UART_SetConfig+0x2b8>
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c0c:	d00c      	beq.n	8006c28 <UART_SetConfig+0x2a0>
 8006c0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c12:	d815      	bhi.n	8006c40 <UART_SetConfig+0x2b8>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <UART_SetConfig+0x298>
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1c:	d008      	beq.n	8006c30 <UART_SetConfig+0x2a8>
 8006c1e:	e00f      	b.n	8006c40 <UART_SetConfig+0x2b8>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c26:	e022      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c2e:	e01e      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c36:	e01a      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3e:	e016      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c46:	e012      	b.n	8006c6e <UART_SetConfig+0x2e6>
 8006c48:	efff69f3 	.word	0xefff69f3
 8006c4c:	40008000 	.word	0x40008000
 8006c50:	40013800 	.word	0x40013800
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40004400 	.word	0x40004400
 8006c5c:	40004800 	.word	0x40004800
 8006c60:	40004c00 	.word	0x40004c00
 8006c64:	40005000 	.word	0x40005000
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a9f      	ldr	r2, [pc, #636]	@ (8006ef0 <UART_SetConfig+0x568>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d17a      	bne.n	8006d6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d824      	bhi.n	8006cca <UART_SetConfig+0x342>
 8006c80:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <UART_SetConfig+0x300>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006ccb 	.word	0x08006ccb
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006cbb 	.word	0x08006cbb
 8006c9c:	08006ccb 	.word	0x08006ccb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006ccb 	.word	0x08006ccb
 8006ca8:	08006cc3 	.word	0x08006cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fe f836 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8006cb0:	61f8      	str	r0, [r7, #28]
        break;
 8006cb2:	e010      	b.n	8006cd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8006ef4 <UART_SetConfig+0x56c>)
 8006cb6:	61fb      	str	r3, [r7, #28]
        break;
 8006cb8:	e00d      	b.n	8006cd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cba:	f7fd ff97 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006cbe:	61f8      	str	r0, [r7, #28]
        break;
 8006cc0:	e009      	b.n	8006cd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc6:	61fb      	str	r3, [r7, #28]
        break;
 8006cc8:	e005      	b.n	8006cd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80fb 	beq.w	8006ed4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d305      	bcc.n	8006cfa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d903      	bls.n	8006d02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d00:	e0e8      	b.n	8006ed4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2200      	movs	r2, #0
 8006d06:	461c      	mov	r4, r3
 8006d08:	4615      	mov	r5, r2
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	022b      	lsls	r3, r5, #8
 8006d14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d18:	0222      	lsls	r2, r4, #8
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	6849      	ldr	r1, [r1, #4]
 8006d1e:	0849      	lsrs	r1, r1, #1
 8006d20:	2000      	movs	r0, #0
 8006d22:	4688      	mov	r8, r1
 8006d24:	4681      	mov	r9, r0
 8006d26:	eb12 0a08 	adds.w	sl, r2, r8
 8006d2a:	eb43 0b09 	adc.w	fp, r3, r9
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	4659      	mov	r1, fp
 8006d40:	f7f9 fa54 	bl	80001ec <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4613      	mov	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d52:	d308      	bcc.n	8006d66 <UART_SetConfig+0x3de>
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d5a:	d204      	bcs.n	8006d66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	60da      	str	r2, [r3, #12]
 8006d64:	e0b6      	b.n	8006ed4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d6c:	e0b2      	b.n	8006ed4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d76:	d15e      	bne.n	8006e36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d828      	bhi.n	8006dd2 <UART_SetConfig+0x44a>
 8006d80:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <UART_SetConfig+0x400>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006db5 	.word	0x08006db5
 8006d90:	08006dbd 	.word	0x08006dbd
 8006d94:	08006dd3 	.word	0x08006dd3
 8006d98:	08006dc3 	.word	0x08006dc3
 8006d9c:	08006dd3 	.word	0x08006dd3
 8006da0:	08006dd3 	.word	0x08006dd3
 8006da4:	08006dd3 	.word	0x08006dd3
 8006da8:	08006dcb 	.word	0x08006dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dac:	f7fd ffb6 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8006db0:	61f8      	str	r0, [r7, #28]
        break;
 8006db2:	e014      	b.n	8006dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db4:	f7fd ffc8 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 8006db8:	61f8      	str	r0, [r7, #28]
        break;
 8006dba:	e010      	b.n	8006dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8006ef4 <UART_SetConfig+0x56c>)
 8006dbe:	61fb      	str	r3, [r7, #28]
        break;
 8006dc0:	e00d      	b.n	8006dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc2:	f7fd ff13 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006dc6:	61f8      	str	r0, [r7, #28]
        break;
 8006dc8:	e009      	b.n	8006dde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dce:	61fb      	str	r3, [r7, #28]
        break;
 8006dd0:	e005      	b.n	8006dde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d077      	beq.n	8006ed4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	005a      	lsls	r2, r3, #1
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	441a      	add	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b0f      	cmp	r3, #15
 8006dfe:	d916      	bls.n	8006e2e <UART_SetConfig+0x4a6>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e06:	d212      	bcs.n	8006e2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f023 030f 	bic.w	r3, r3, #15
 8006e10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	8afb      	ldrh	r3, [r7, #22]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	8afa      	ldrh	r2, [r7, #22]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e052      	b.n	8006ed4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e34:	e04e      	b.n	8006ed4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d827      	bhi.n	8006e8e <UART_SetConfig+0x506>
 8006e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <UART_SetConfig+0x4bc>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e79 	.word	0x08006e79
 8006e50:	08006e8f 	.word	0x08006e8f
 8006e54:	08006e7f 	.word	0x08006e7f
 8006e58:	08006e8f 	.word	0x08006e8f
 8006e5c:	08006e8f 	.word	0x08006e8f
 8006e60:	08006e8f 	.word	0x08006e8f
 8006e64:	08006e87 	.word	0x08006e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fd ff58 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 8006e6c:	61f8      	str	r0, [r7, #28]
        break;
 8006e6e:	e014      	b.n	8006e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e70:	f7fd ff6a 	bl	8004d48 <HAL_RCC_GetPCLK2Freq>
 8006e74:	61f8      	str	r0, [r7, #28]
        break;
 8006e76:	e010      	b.n	8006e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e78:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef4 <UART_SetConfig+0x56c>)
 8006e7a:	61fb      	str	r3, [r7, #28]
        break;
 8006e7c:	e00d      	b.n	8006e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fd feb5 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006e82:	61f8      	str	r0, [r7, #28]
        break;
 8006e84:	e009      	b.n	8006e9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e8a:	61fb      	str	r3, [r7, #28]
        break;
 8006e8c:	e005      	b.n	8006e9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e98:	bf00      	nop
    }

    if (pclk != 0U)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d019      	beq.n	8006ed4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	085a      	lsrs	r2, r3, #1
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	d909      	bls.n	8006ece <UART_SetConfig+0x546>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec0:	d205      	bcs.n	8006ece <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	e002      	b.n	8006ed4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ee0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3728      	adds	r7, #40	@ 0x28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eee:	bf00      	nop
 8006ef0:	40008000 	.word	0x40008000
 8006ef4:	00f42400 	.word	0x00f42400

08006ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01a      	beq.n	800700e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ff6:	d10a      	bne.n	800700e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
  }
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b098      	sub	sp, #96	@ 0x60
 8007040:	af02      	add	r7, sp, #8
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800704c:	f7fc f940 	bl	80032d0 <HAL_GetTick>
 8007050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b08      	cmp	r3, #8
 800705e:	d12e      	bne.n	80070be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007068:	2200      	movs	r2, #0
 800706a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f88c 	bl	800718c <UART_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d021      	beq.n	80070be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800708e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007098:	647b      	str	r3, [r7, #68]	@ 0x44
 800709a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800709e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e6      	bne.n	800707a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e062      	b.n	8007184 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d149      	bne.n	8007160 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d4:	2200      	movs	r2, #0
 80070d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f856 	bl	800718c <UART_WaitOnFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d03c      	beq.n	8007160 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	623b      	str	r3, [r7, #32]
   return(result);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007104:	633b      	str	r3, [r7, #48]	@ 0x30
 8007106:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800710a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	60fb      	str	r3, [r7, #12]
   return(result);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007138:	61fa      	str	r2, [r7, #28]
 800713a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	69b9      	ldr	r1, [r7, #24]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	617b      	str	r3, [r7, #20]
   return(result);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e011      	b.n	8007184 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3758      	adds	r7, #88	@ 0x58
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	4613      	mov	r3, r2
 800719a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719c:	e04f      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d04b      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a6:	f7fc f893 	bl	80032d0 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d302      	bcc.n	80071bc <UART_WaitOnFlagUntilTimeout+0x30>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e04e      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d037      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b80      	cmp	r3, #128	@ 0x80
 80071d2:	d034      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d031      	beq.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d110      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2208      	movs	r2, #8
 80071ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f8ff 	bl	80073f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2208      	movs	r2, #8
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e029      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007218:	d111      	bne.n	800723e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f8e5 	bl	80073f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e00f      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4013      	ands	r3, r2
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	bf0c      	ite	eq
 800724e:	2301      	moveq	r3, #1
 8007250:	2300      	movne	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	429a      	cmp	r2, r3
 800725a:	d0a0      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007268:	b480      	push	{r7}
 800726a:	b097      	sub	sp, #92	@ 0x5c
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729a:	d10e      	bne.n	80072ba <UART_Start_Receive_IT+0x52>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <UART_Start_Receive_IT+0x48>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072ae:	e02d      	b.n	800730c <UART_Start_Receive_IT+0xa4>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	22ff      	movs	r2, #255	@ 0xff
 80072b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072b8:	e028      	b.n	800730c <UART_Start_Receive_IT+0xa4>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10d      	bne.n	80072de <UART_Start_Receive_IT+0x76>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <UART_Start_Receive_IT+0x6c>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	22ff      	movs	r2, #255	@ 0xff
 80072ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072d2:	e01b      	b.n	800730c <UART_Start_Receive_IT+0xa4>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	227f      	movs	r2, #127	@ 0x7f
 80072d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072dc:	e016      	b.n	800730c <UART_Start_Receive_IT+0xa4>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e6:	d10d      	bne.n	8007304 <UART_Start_Receive_IT+0x9c>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <UART_Start_Receive_IT+0x92>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	227f      	movs	r2, #127	@ 0x7f
 80072f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072f8:	e008      	b.n	800730c <UART_Start_Receive_IT+0xa4>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	223f      	movs	r2, #63	@ 0x3f
 80072fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007302:	e003      	b.n	800730c <UART_Start_Receive_IT+0xa4>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2222      	movs	r2, #34	@ 0x22
 8007318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	657b      	str	r3, [r7, #84]	@ 0x54
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800733c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800733e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800734a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e5      	bne.n	800731c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007358:	d107      	bne.n	800736a <UART_Start_Receive_IT+0x102>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a21      	ldr	r2, [pc, #132]	@ (80073ec <UART_Start_Receive_IT+0x184>)
 8007366:	669a      	str	r2, [r3, #104]	@ 0x68
 8007368:	e002      	b.n	8007370 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a20      	ldr	r2, [pc, #128]	@ (80073f0 <UART_Start_Receive_IT+0x188>)
 800736e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d019      	beq.n	80073ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800738c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007396:	637b      	str	r3, [r7, #52]	@ 0x34
 8007398:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800739c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_Start_Receive_IT+0x110>
 80073aa:	e018      	b.n	80073de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f043 0320 	orr.w	r3, r3, #32
 80073c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ca:	623b      	str	r3, [r7, #32]
 80073cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	69f9      	ldr	r1, [r7, #28]
 80073d0:	6a3a      	ldr	r2, [r7, #32]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e6      	bne.n	80073ac <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	375c      	adds	r7, #92	@ 0x5c
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	080076f9 	.word	0x080076f9
 80073f0:	0800753d 	.word	0x0800753d

080073f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b095      	sub	sp, #84	@ 0x54
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800741a:	643b      	str	r3, [r7, #64]	@ 0x40
 800741c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007420:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e6      	bne.n	80073fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3308      	adds	r3, #8
 8007434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	61fb      	str	r3, [r7, #28]
   return(result);
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	f023 0301 	bic.w	r3, r3, #1
 8007444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3308      	adds	r3, #8
 800744c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800744e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007450:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e5      	bne.n	800742e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007466:	2b01      	cmp	r3, #1
 8007468:	d118      	bne.n	800749c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	60bb      	str	r3, [r7, #8]
   return(result);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f023 0310 	bic.w	r3, r3, #16
 800747e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6979      	ldr	r1, [r7, #20]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	613b      	str	r3, [r7, #16]
   return(result);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074b0:	bf00      	nop
 80074b2:	3754      	adds	r7, #84	@ 0x54
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fa3e 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007504:	61fb      	str	r3, [r7, #28]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6979      	ldr	r1, [r7, #20]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	613b      	str	r3, [r7, #16]
   return(result);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e6      	bne.n	80074f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fa0a 	bl	8006948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007534:	bf00      	nop
 8007536:	3720      	adds	r7, #32
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b09c      	sub	sp, #112	@ 0x70
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800754a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007554:	2b22      	cmp	r3, #34	@ 0x22
 8007556:	f040 80be 	bne.w	80076d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007560:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007564:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007568:	b2d9      	uxtb	r1, r3
 800756a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007574:	400a      	ands	r2, r1
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f040 80a3 	bne.w	80076ea <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e6      	bne.n	80075a4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80075f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a34      	ldr	r2, [pc, #208]	@ (80076f4 <UART_RxISR_8BIT+0x1b8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d01f      	beq.n	8007668 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	623b      	str	r3, [r7, #32]
   return(result);
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800764a:	663b      	str	r3, [r7, #96]	@ 0x60
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007654:	633b      	str	r3, [r7, #48]	@ 0x30
 8007656:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800765a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e6      	bne.n	8007636 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800766c:	2b01      	cmp	r3, #1
 800766e:	d12e      	bne.n	80076ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	60fb      	str	r3, [r7, #12]
   return(result);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0310 	bic.w	r3, r3, #16
 800768a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007694:	61fb      	str	r3, [r7, #28]
 8007696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	69b9      	ldr	r1, [r7, #24]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	617b      	str	r3, [r7, #20]
   return(result);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e6      	bne.n	8007676 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d103      	bne.n	80076be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2210      	movs	r2, #16
 80076bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff f952 	bl	8006970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076cc:	e00d      	b.n	80076ea <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fb f96c 	bl	80029ac <HAL_UART_RxCpltCallback>
}
 80076d4:	e009      	b.n	80076ea <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	8b1b      	ldrh	r3, [r3, #24]
 80076dc:	b29a      	uxth	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0208 	orr.w	r2, r2, #8
 80076e6:	b292      	uxth	r2, r2
 80076e8:	831a      	strh	r2, [r3, #24]
}
 80076ea:	bf00      	nop
 80076ec:	3770      	adds	r7, #112	@ 0x70
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40008000 	.word	0x40008000

080076f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b09c      	sub	sp, #112	@ 0x70
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007706:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007710:	2b22      	cmp	r3, #34	@ 0x22
 8007712:	f040 80be 	bne.w	8007892 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800771c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007724:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007726:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800772a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800772e:	4013      	ands	r3, r2
 8007730:	b29a      	uxth	r2, r3
 8007732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007734:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773a:	1c9a      	adds	r2, r3, #2
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 80a3 	bne.w	80078a6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800776e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007774:	667b      	str	r3, [r7, #100]	@ 0x64
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800777e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007780:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800778c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e6      	bne.n	8007760 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3308      	adds	r3, #8
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a34      	ldr	r2, [pc, #208]	@ (80078b0 <UART_RxISR_16BIT+0x1b8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d01f      	beq.n	8007824 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d018      	beq.n	8007824 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007806:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007812:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007828:	2b01      	cmp	r3, #1
 800782a:	d12e      	bne.n	800788a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 0310 	bic.w	r3, r3, #16
 8007846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6979      	ldr	r1, [r7, #20]
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	613b      	str	r3, [r7, #16]
   return(result);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d103      	bne.n	800787a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2210      	movs	r2, #16
 8007878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff f874 	bl	8006970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007888:	e00d      	b.n	80078a6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fb f88e 	bl	80029ac <HAL_UART_RxCpltCallback>
}
 8007890:	e009      	b.n	80078a6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	8b1b      	ldrh	r3, [r3, #24]
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0208 	orr.w	r2, r2, #8
 80078a2:	b292      	uxth	r2, r2
 80078a4:	831a      	strh	r2, [r3, #24]
}
 80078a6:	bf00      	nop
 80078a8:	3770      	adds	r7, #112	@ 0x70
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40008000 	.word	0x40008000

080078b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <malloc>:
 80078c8:	4b02      	ldr	r3, [pc, #8]	@ (80078d4 <malloc+0xc>)
 80078ca:	4601      	mov	r1, r0
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f000 b82d 	b.w	800792c <_malloc_r>
 80078d2:	bf00      	nop
 80078d4:	20000028 	.word	0x20000028

080078d8 <free>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <free+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f000 b90b 	b.w	8007af8 <_free_r>
 80078e2:	bf00      	nop
 80078e4:	20000028 	.word	0x20000028

080078e8 <sbrk_aligned>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007928 <sbrk_aligned+0x40>)
 80078ec:	460c      	mov	r4, r1
 80078ee:	6831      	ldr	r1, [r6, #0]
 80078f0:	4605      	mov	r5, r0
 80078f2:	b911      	cbnz	r1, 80078fa <sbrk_aligned+0x12>
 80078f4:	f000 f8c4 	bl	8007a80 <_sbrk_r>
 80078f8:	6030      	str	r0, [r6, #0]
 80078fa:	4621      	mov	r1, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f8bf 	bl	8007a80 <_sbrk_r>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d103      	bne.n	800790e <sbrk_aligned+0x26>
 8007906:	f04f 34ff 	mov.w	r4, #4294967295
 800790a:	4620      	mov	r0, r4
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	1cc4      	adds	r4, r0, #3
 8007910:	f024 0403 	bic.w	r4, r4, #3
 8007914:	42a0      	cmp	r0, r4
 8007916:	d0f8      	beq.n	800790a <sbrk_aligned+0x22>
 8007918:	1a21      	subs	r1, r4, r0
 800791a:	4628      	mov	r0, r5
 800791c:	f000 f8b0 	bl	8007a80 <_sbrk_r>
 8007920:	3001      	adds	r0, #1
 8007922:	d1f2      	bne.n	800790a <sbrk_aligned+0x22>
 8007924:	e7ef      	b.n	8007906 <sbrk_aligned+0x1e>
 8007926:	bf00      	nop
 8007928:	20000234 	.word	0x20000234

0800792c <_malloc_r>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	1ccd      	adds	r5, r1, #3
 8007932:	f025 0503 	bic.w	r5, r5, #3
 8007936:	3508      	adds	r5, #8
 8007938:	2d0c      	cmp	r5, #12
 800793a:	bf38      	it	cc
 800793c:	250c      	movcc	r5, #12
 800793e:	2d00      	cmp	r5, #0
 8007940:	4606      	mov	r6, r0
 8007942:	db01      	blt.n	8007948 <_malloc_r+0x1c>
 8007944:	42a9      	cmp	r1, r5
 8007946:	d904      	bls.n	8007952 <_malloc_r+0x26>
 8007948:	230c      	movs	r3, #12
 800794a:	6033      	str	r3, [r6, #0]
 800794c:	2000      	movs	r0, #0
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a28 <_malloc_r+0xfc>
 8007956:	f000 f869 	bl	8007a2c <__malloc_lock>
 800795a:	f8d8 3000 	ldr.w	r3, [r8]
 800795e:	461c      	mov	r4, r3
 8007960:	bb44      	cbnz	r4, 80079b4 <_malloc_r+0x88>
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ffbf 	bl	80078e8 <sbrk_aligned>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	4604      	mov	r4, r0
 800796e:	d158      	bne.n	8007a22 <_malloc_r+0xf6>
 8007970:	f8d8 4000 	ldr.w	r4, [r8]
 8007974:	4627      	mov	r7, r4
 8007976:	2f00      	cmp	r7, #0
 8007978:	d143      	bne.n	8007a02 <_malloc_r+0xd6>
 800797a:	2c00      	cmp	r4, #0
 800797c:	d04b      	beq.n	8007a16 <_malloc_r+0xea>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	4639      	mov	r1, r7
 8007982:	4630      	mov	r0, r6
 8007984:	eb04 0903 	add.w	r9, r4, r3
 8007988:	f000 f87a 	bl	8007a80 <_sbrk_r>
 800798c:	4581      	cmp	r9, r0
 800798e:	d142      	bne.n	8007a16 <_malloc_r+0xea>
 8007990:	6821      	ldr	r1, [r4, #0]
 8007992:	1a6d      	subs	r5, r5, r1
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ffa6 	bl	80078e8 <sbrk_aligned>
 800799c:	3001      	adds	r0, #1
 800799e:	d03a      	beq.n	8007a16 <_malloc_r+0xea>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	442b      	add	r3, r5
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	f8d8 3000 	ldr.w	r3, [r8]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	bb62      	cbnz	r2, 8007a08 <_malloc_r+0xdc>
 80079ae:	f8c8 7000 	str.w	r7, [r8]
 80079b2:	e00f      	b.n	80079d4 <_malloc_r+0xa8>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	1b52      	subs	r2, r2, r5
 80079b8:	d420      	bmi.n	80079fc <_malloc_r+0xd0>
 80079ba:	2a0b      	cmp	r2, #11
 80079bc:	d917      	bls.n	80079ee <_malloc_r+0xc2>
 80079be:	1961      	adds	r1, r4, r5
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	bf18      	it	ne
 80079c6:	6059      	strne	r1, [r3, #4]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	bf08      	it	eq
 80079cc:	f8c8 1000 	streq.w	r1, [r8]
 80079d0:	5162      	str	r2, [r4, r5]
 80079d2:	604b      	str	r3, [r1, #4]
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f82f 	bl	8007a38 <__malloc_unlock>
 80079da:	f104 000b 	add.w	r0, r4, #11
 80079de:	1d23      	adds	r3, r4, #4
 80079e0:	f020 0007 	bic.w	r0, r0, #7
 80079e4:	1ac2      	subs	r2, r0, r3
 80079e6:	bf1c      	itt	ne
 80079e8:	1a1b      	subne	r3, r3, r0
 80079ea:	50a3      	strne	r3, [r4, r2]
 80079ec:	e7af      	b.n	800794e <_malloc_r+0x22>
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	bf0c      	ite	eq
 80079f4:	f8c8 2000 	streq.w	r2, [r8]
 80079f8:	605a      	strne	r2, [r3, #4]
 80079fa:	e7eb      	b.n	80079d4 <_malloc_r+0xa8>
 80079fc:	4623      	mov	r3, r4
 80079fe:	6864      	ldr	r4, [r4, #4]
 8007a00:	e7ae      	b.n	8007960 <_malloc_r+0x34>
 8007a02:	463c      	mov	r4, r7
 8007a04:	687f      	ldr	r7, [r7, #4]
 8007a06:	e7b6      	b.n	8007976 <_malloc_r+0x4a>
 8007a08:	461a      	mov	r2, r3
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d1fb      	bne.n	8007a08 <_malloc_r+0xdc>
 8007a10:	2300      	movs	r3, #0
 8007a12:	6053      	str	r3, [r2, #4]
 8007a14:	e7de      	b.n	80079d4 <_malloc_r+0xa8>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 f80c 	bl	8007a38 <__malloc_unlock>
 8007a20:	e794      	b.n	800794c <_malloc_r+0x20>
 8007a22:	6005      	str	r5, [r0, #0]
 8007a24:	e7d6      	b.n	80079d4 <_malloc_r+0xa8>
 8007a26:	bf00      	nop
 8007a28:	20000238 	.word	0x20000238

08007a2c <__malloc_lock>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	@ (8007a34 <__malloc_lock+0x8>)
 8007a2e:	f000 b861 	b.w	8007af4 <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	20000378 	.word	0x20000378

08007a38 <__malloc_unlock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	@ (8007a40 <__malloc_unlock+0x8>)
 8007a3a:	f000 b85c 	b.w	8007af6 <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	20000378 	.word	0x20000378

08007a44 <memset>:
 8007a44:	4402      	add	r2, r0
 8007a46:	4603      	mov	r3, r0
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d100      	bne.n	8007a4e <memset+0xa>
 8007a4c:	4770      	bx	lr
 8007a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a52:	e7f9      	b.n	8007a48 <memset+0x4>

08007a54 <strstr>:
 8007a54:	780a      	ldrb	r2, [r1, #0]
 8007a56:	b570      	push	{r4, r5, r6, lr}
 8007a58:	b96a      	cbnz	r2, 8007a76 <strstr+0x22>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d109      	bne.n	8007a74 <strstr+0x20>
 8007a60:	460c      	mov	r4, r1
 8007a62:	4605      	mov	r5, r0
 8007a64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0f6      	beq.n	8007a5a <strstr+0x6>
 8007a6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a70:	429e      	cmp	r6, r3
 8007a72:	d0f7      	beq.n	8007a64 <strstr+0x10>
 8007a74:	3001      	adds	r0, #1
 8007a76:	7803      	ldrb	r3, [r0, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1ef      	bne.n	8007a5c <strstr+0x8>
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	e7ec      	b.n	8007a5a <strstr+0x6>

08007a80 <_sbrk_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	@ (8007a9c <_sbrk_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7fb fb46 	bl	800311c <_sbrk>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_sbrk_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_sbrk_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000374 	.word	0x20000374

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	@ (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000028 	.word	0x20000028

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	@ (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	@ (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f000 f864 	bl	8007b8c <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	08008a34 	.word	0x08008a34
 8007ae8:	08008a34 	.word	0x08008a34
 8007aec:	08008a34 	.word	0x08008a34
 8007af0:	08008a38 	.word	0x08008a38

08007af4 <__retarget_lock_acquire_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <__retarget_lock_release_recursive>:
 8007af6:	4770      	bx	lr

08007af8 <_free_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	2900      	cmp	r1, #0
 8007afe:	d041      	beq.n	8007b84 <_free_r+0x8c>
 8007b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b04:	1f0c      	subs	r4, r1, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfb8      	it	lt
 8007b0a:	18e4      	addlt	r4, r4, r3
 8007b0c:	f7ff ff8e 	bl	8007a2c <__malloc_lock>
 8007b10:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <_free_r+0x90>)
 8007b12:	6813      	ldr	r3, [r2, #0]
 8007b14:	b933      	cbnz	r3, 8007b24 <_free_r+0x2c>
 8007b16:	6063      	str	r3, [r4, #4]
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b20:	f7ff bf8a 	b.w	8007a38 <__malloc_unlock>
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d908      	bls.n	8007b3a <_free_r+0x42>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	1821      	adds	r1, r4, r0
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	bf01      	itttt	eq
 8007b30:	6819      	ldreq	r1, [r3, #0]
 8007b32:	685b      	ldreq	r3, [r3, #4]
 8007b34:	1809      	addeq	r1, r1, r0
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	e7ed      	b.n	8007b16 <_free_r+0x1e>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b10b      	cbz	r3, 8007b44 <_free_r+0x4c>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d9fa      	bls.n	8007b3a <_free_r+0x42>
 8007b44:	6811      	ldr	r1, [r2, #0]
 8007b46:	1850      	adds	r0, r2, r1
 8007b48:	42a0      	cmp	r0, r4
 8007b4a:	d10b      	bne.n	8007b64 <_free_r+0x6c>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	4401      	add	r1, r0
 8007b50:	1850      	adds	r0, r2, r1
 8007b52:	4283      	cmp	r3, r0
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	d1e0      	bne.n	8007b1a <_free_r+0x22>
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	4408      	add	r0, r1
 8007b60:	6010      	str	r0, [r2, #0]
 8007b62:	e7da      	b.n	8007b1a <_free_r+0x22>
 8007b64:	d902      	bls.n	8007b6c <_free_r+0x74>
 8007b66:	230c      	movs	r3, #12
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	e7d6      	b.n	8007b1a <_free_r+0x22>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf04      	itt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf04      	itt	eq
 8007b7c:	1809      	addeq	r1, r1, r0
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	6054      	str	r4, [r2, #4]
 8007b82:	e7ca      	b.n	8007b1a <_free_r+0x22>
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	20000238 	.word	0x20000238

08007b8c <_init>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr

08007b98 <_fini>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr
